
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00001abc  00001b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  008001b6  008001b6  00001c06  2**0
                  ALLOC
  3 .stab         00002388  00000000  00000000  00001c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c9d  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004c2d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000530  00000000  00000000  00004c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a34a  00000000  00000000  0000516e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002db1  00000000  00000000  0000f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003b83  00000000  00000000  00012269  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001154  00000000  00000000  00015dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003b45  00000000  00000000  00016f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006e39  00000000  00000000  0001aa85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000860  00000000  00000000  000218be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	25 c5       	rjmp	.+2634   	; 0xa74 <__vector_10>
}
      2a:	00 00       	nop
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
      2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
      2e:	00 00       	nop
      30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
      32:	00 00       	nop
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      36:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
      3a:	00 00       	nop
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
      3e:	00 00       	nop
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
      42:	00 00       	nop
		{
			Endpoint_ClearOUT();

			if (BytesProcessed != NULL)
      44:	38 c2       	rjmp	.+1136   	; 0x4b6 <__vector_17>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      46:	00 00       	nop
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
      4a:	00 00       	nop
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
      4e:	00 00       	nop
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
      52:	00 00       	nop
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
      54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
		if (!(Endpoint_IsReadWriteAllowed()))
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
      56:	00 00       	nop
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
			#endif

			if (BytesProcessed != NULL)
      5a:	00 00       	nop
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
      5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      5e:	00 00       	nop
			{
				*BytesProcessed += BytesInTransfer;
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
      62:	00 00       	nop
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
			#endif

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
      66:	00 00       	nop
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
      6a:	00 00       	nop
		}
		else
		{
			Endpoint_Discard_8();

			Length--;
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
			BytesInTransfer++;
      6e:	00 00       	nop
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
      72:	00 00       	nop
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
      76:	00 00       	nop
			Length--;
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      7a:	00 00       	nop
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
      7e:	00 00       	nop
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
      82:	00 00       	nop
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
			Length--;
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      8a:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      8e:	00 00       	nop
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
      96:	00 00       	nop
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
      9a:	00 00       	nop
      9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
      9e:	00 00       	nop

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
      a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
      a2:	00 00       	nop
      a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
      a6:	00 00       	nop

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
      a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				ReportSize     -= 4;
     118:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000126 <DeviceDescriptor>:
				ReportData     += 4;
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
				ReportSize     -= 2;
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	ec eb       	ldi	r30, 0xBC	; 188
     14c:	fa e1       	ldi	r31, 0x1A	; 26
				ReportData     += 2;
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
				break;
     152:	0d 92       	st	X+, r0
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
     154:	a6 3b       	cpi	r26, 0xB6	; 182
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a6 eb       	ldi	r26, 0xB6	; 182
     15e:	b1 e0       	ldi	r27, 0x01	; 1
				ReportSize     -= 1;
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a2 3e       	cpi	r26, 0xE2	; 226
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 04 0a 	call	0x1408	; 0x1408 <main>
     16e:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <_Z9switchOffv>:
				ReportData     += 1;
     174:	80 91 c4 01 	lds	r24, 0x01C4
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     178:	90 91 c5 01 	lds	r25, 0x01C5
     17c:	a0 91 c6 01 	lds	r26, 0x01C6
     180:	b0 91 c7 01 	lds	r27, 0x01C7
     184:	8f 3f       	cpi	r24, 0xFF	; 255
     186:	9f 4f       	sbci	r25, 0xFF	; 255
     188:	af 4f       	sbci	r26, 0xFF	; 255
     18a:	bf 4f       	sbci	r27, 0xFF	; 255
     18c:	61 f4       	brne	.+24     	; 0x1a6 <_Z9switchOffv+0x32>
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	88 e0       	ldi	r24, 0x08	; 8
     192:	a9 d2       	rcall	.+1362   	; 0x6e6 <_Z12digitalWritecc>
     194:	07 d2       	rcall	.+1038   	; 0x5a4 <_Z7secondsv>
     196:	60 93 c4 01 	sts	0x01C4, r22
     19a:	70 93 c5 01 	sts	0x01C5, r23
     19e:	80 93 c6 01 	sts	0x01C6, r24
     1a2:	90 93 c7 01 	sts	0x01C7, r25
     1a6:	08 95       	ret

000001a8 <_Z7getTemps>:
     1a8:	6a d1       	rcall	.+724    	; 0x47e <_Z10analogReads>
     1aa:	2f ee       	ldi	r18, 0xEF	; 239
     1ac:	31 e0       	ldi	r19, 0x01	; 1
     1ae:	dc 01       	movw	r26, r24
     1b0:	0e 94 14 0a 	call	0x1428	; 0x1428 <__usmulhisi3>
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	34 e0       	ldi	r19, 0x04	; 4
     1b8:	40 e0       	ldi	r20, 0x00	; 0
     1ba:	50 e0       	ldi	r21, 0x00	; 0
     1bc:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__divmodsi4>
     1c0:	21 51       	subi	r18, 0x11	; 17
     1c2:	31 40       	sbci	r19, 0x01	; 1
     1c4:	41 09       	sbc	r20, r1
     1c6:	51 09       	sbc	r21, r1
     1c8:	c9 01       	movw	r24, r18
     1ca:	08 95       	ret

000001cc <_Z8switchOnv>:
     1cc:	cf 92       	push	r12
     1ce:	df 92       	push	r13
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	c0 90 c4 01 	lds	r12, 0x01C4
     1d8:	d0 90 c5 01 	lds	r13, 0x01C5
     1dc:	e0 90 c6 01 	lds	r14, 0x01C6
     1e0:	f0 90 c7 01 	lds	r15, 0x01C7
     1e4:	8c e2       	ldi	r24, 0x2C	; 44
     1e6:	c8 0e       	add	r12, r24
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	d8 1e       	adc	r13, r24
     1ec:	e1 1c       	adc	r14, r1
     1ee:	f1 1c       	adc	r15, r1
     1f0:	d9 d1       	rcall	.+946    	; 0x5a4 <_Z7secondsv>
     1f2:	c6 16       	cp	r12, r22
     1f4:	d7 06       	cpc	r13, r23
     1f6:	e8 06       	cpc	r14, r24
     1f8:	f9 06       	cpc	r15, r25
     1fa:	98 f0       	brcs	.+38     	; 0x222 <_Z8switchOnv+0x56>
     1fc:	85 e2       	ldi	r24, 0x25	; 37
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	d3 df       	rcall	.-90     	; 0x1a8 <_Z7getTemps>
     202:	c8 97       	sbiw	r24, 0x38	; 56
     204:	74 f4       	brge	.+28     	; 0x222 <_Z8switchOnv+0x56>
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	88 e0       	ldi	r24, 0x08	; 8
     20a:	6d d2       	rcall	.+1242   	; 0x6e6 <_Z12digitalWritecc>
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	9f ef       	ldi	r25, 0xFF	; 255
     210:	dc 01       	movw	r26, r24
     212:	80 93 c4 01 	sts	0x01C4, r24
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     216:	90 93 c5 01 	sts	0x01C5, r25
     21a:	a0 93 c6 01 	sts	0x01C6, r26
     21e:	b0 93 c7 01 	sts	0x01C7, r27
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     222:	ff 90       	pop	r15
     224:	ef 90       	pop	r14
     226:	df 90       	pop	r13
     228:	cf 90       	pop	r12
     22a:	08 95       	ret

0000022c <_Z9checkTempv>:
     22c:	85 e2       	ldi	r24, 0x25	; 37
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	bb df       	rcall	.-138    	; 0x1a8 <_Z7getTemps>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     232:	20 91 18 01 	lds	r18, 0x0118
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     236:	30 91 19 01 	lds	r19, 0x0119
     23a:	2f 5f       	subi	r18, 0xFF	; 255
     23c:	3f 4f       	sbci	r19, 0xFF	; 255
     23e:	28 17       	cp	r18, r24
     240:	39 07       	cpc	r19, r25
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     242:	0c f4       	brge	.+2      	; 0x246 <_Z9checkTempv+0x1a>
     244:	c3 cf       	rjmp	.-122    	; 0x1cc <_Z8switchOnv>
				break;
     246:	96 cf       	rjmp	.-212    	; 0x174 <_Z9switchOffv>

00000248 <_Z5doCmdv>:
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     248:	80 91 c8 01 	lds	r24, 0x01C8
     24c:	8f 36       	cpi	r24, 0x6F	; 111
     24e:	b9 f0       	breq	.+46     	; 0x27e <_Z5doCmdv+0x36>
     250:	83 37       	cpi	r24, 0x73	; 115
				break;
     252:	c1 f1       	breq	.+112    	; 0x2c4 <_Z5doCmdv+0x7c>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     254:	87 36       	cpi	r24, 0x67	; 103
     256:	09 f0       	breq	.+2      	; 0x25a <_Z5doCmdv+0x12>
     258:	5a c0       	rjmp	.+180    	; 0x30e <_Z5doCmdv+0xc6>
     25a:	80 91 c9 01 	lds	r24, 0x01C9
				break;
     25e:	85 36       	cpi	r24, 0x65	; 101
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     260:	09 f0       	breq	.+2      	; 0x264 <_Z5doCmdv+0x1c>
     262:	5d c0       	rjmp	.+186    	; 0x31e <_Z5doCmdv+0xd6>
     264:	80 91 ca 01 	lds	r24, 0x01CA
     268:	84 37       	cpi	r24, 0x74	; 116
     26a:	09 f0       	breq	.+2      	; 0x26e <_Z5doCmdv+0x26>
     26c:	58 c0       	rjmp	.+176    	; 0x31e <_Z5doCmdv+0xd6>
				break;
     26e:	85 e2       	ldi	r24, 0x25	; 37
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	9a df       	rcall	.-204    	; 0x1a8 <_Z7getTemps>
     274:	9f 93       	push	r25
     276:	8f 93       	push	r24
     278:	81 e8       	ldi	r24, 0x81	; 129
				break;
     27a:	91 e0       	ldi	r25, 0x01	; 1
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     27c:	3f c0       	rjmp	.+126    	; 0x2fc <_Z5doCmdv+0xb4>
     27e:	80 91 c9 01 	lds	r24, 0x01C9
     282:	81 33       	cpi	r24, 0x31	; 49
     284:	09 f0       	breq	.+2      	; 0x288 <_Z5doCmdv+0x40>
     286:	4b c0       	rjmp	.+150    	; 0x31e <_Z5doCmdv+0xd6>
     288:	60 91 ca 01 	lds	r22, 0x01CA
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     28c:	60 53       	subi	r22, 0x30	; 48
     28e:	62 30       	cpi	r22, 0x02	; 2
				break;
     290:	08 f0       	brcs	.+2      	; 0x294 <_Z5doCmdv+0x4c>
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     292:	45 c0       	rjmp	.+138    	; 0x31e <_Z5doCmdv+0xd6>
     294:	88 e0       	ldi	r24, 0x08	; 8
     296:	27 d2       	rcall	.+1102   	; 0x6e6 <_Z12digitalWritecc>
     298:	80 91 ca 01 	lds	r24, 0x01CA
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	c0 97       	sbiw	r24, 0x30	; 48
				break;
     2a0:	9f 93       	push	r25
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     2a2:	8f 93       	push	r24
     2a4:	1f 92       	push	r1
				break;
     2a6:	88 e0       	ldi	r24, 0x08	; 8
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2a8:	8f 93       	push	r24
     2aa:	8e e8       	ldi	r24, 0x8E	; 142
     2ac:	91 e0       	ldi	r25, 0x01	; 1
				break;
     2ae:	9f 93       	push	r25
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2b0:	8f 93       	push	r24
     2b2:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0

				if (ParserData->UsingReportIDs)
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	0f 90       	pop	r0
     2c2:	08 95       	ret
     2c4:	20 91 c9 01 	lds	r18, 0x01C9
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2c8:	82 2f       	mov	r24, r18
     2ca:	80 53       	subi	r24, 0x30	; 48
     2cc:	8a 30       	cpi	r24, 0x0A	; 10
     2ce:	38 f5       	brcc	.+78     	; 0x31e <_Z5doCmdv+0xd6>
     2d0:	80 91 ca 01 	lds	r24, 0x01CA
     2d4:	98 2f       	mov	r25, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2d6:	90 53       	subi	r25, 0x30	; 48

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     2d8:	9a 30       	cpi	r25, 0x0A	; 10
     2da:	08 f5       	brcc	.+66     	; 0x31e <_Z5doCmdv+0xd6>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2de:	3a e0       	ldi	r19, 0x0A	; 10
     2e0:	23 9f       	mul	r18, r19
     2e2:	80 0d       	add	r24, r0
     2e4:	91 1d       	adc	r25, r1
     2e6:	11 24       	eor	r1, r1
     2e8:	80 51       	subi	r24, 0x10	; 16
     2ea:	92 40       	sbci	r25, 0x02	; 2
     2ec:	90 93 19 01 	sts	0x0119, r25
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2f0:	80 93 18 01 	sts	0x0118, r24
     2f4:	9f 93       	push	r25
     2f6:	8f 93       	push	r24
     2f8:	8b e9       	ldi	r24, 0x9B	; 155
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	9f 93       	push	r25
     2fe:	8f 93       	push	r24
     300:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	08 95       	ret
     30e:	8c ea       	ldi	r24, 0xAC	; 172

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	9f 93       	push	r25
     314:	8f 93       	push	r24
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     316:	0e 94 cf 0a 	call	0x159e	; 0x159e <printf>
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	08 95       	ret

00000320 <_Z9fermostatv>:
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	80 91 dc 01 	lds	r24, 0x01DC
     328:	90 91 dd 01 	lds	r25, 0x01DD
     32c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <fgetc>
     330:	ec 01       	movw	r28, r24
     332:	97 fd       	sbrc	r25, 7
     334:	1e c0       	rjmp	.+60     	; 0x372 <_Z9fermostatv+0x52>
     336:	60 91 de 01 	lds	r22, 0x01DE
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     33a:	70 91 df 01 	lds	r23, 0x01DF
     33e:	0e 94 a3 0a 	call	0x1546	; 0x1546 <fputc>
					}
				}

				ParserData->UsingReportIDs = true;
     342:	c6 36       	cpi	r28, 0x66	; 102
     344:	d1 05       	cpc	r29, r1
     346:	29 f4       	brne	.+10     	; 0x352 <_Z9fermostatv+0x32>
     348:	10 92 1b 01 	sts	0x011B, r1

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     34c:	10 92 1a 01 	sts	0x011A, r1
     350:	10 c0       	rjmp	.+32     	; 0x372 <_Z9fermostatv+0x52>
     352:	80 91 1a 01 	lds	r24, 0x011A
     356:	90 91 1b 01 	lds	r25, 0x011B
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     35a:	83 30       	cpi	r24, 0x03	; 3
     35c:	91 05       	cpc	r25, r1
     35e:	48 f4       	brcc	.+18     	; 0x372 <_Z9fermostatv+0x52>
     360:	fc 01       	movw	r30, r24
     362:	e8 53       	subi	r30, 0x38	; 56
     364:	fe 4f       	sbci	r31, 0xFE	; 254
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     366:	c0 83       	st	Z, r28
     368:	01 96       	adiw	r24, 0x01	; 1
     36a:	90 93 1b 01 	sts	0x011B, r25
     36e:	80 93 1a 01 	sts	0x011A, r24
     372:	80 91 1a 01 	lds	r24, 0x011A
     376:	90 91 1b 01 	lds	r25, 0x011B
     37a:	03 97       	sbiw	r24, 0x03	; 3
     37c:	39 f4       	brne	.+14     	; 0x38c <_Z9fermostatv+0x6c>
     37e:	64 df       	rcall	.-312    	; 0x248 <_Z5doCmdv>
     380:	8f ef       	ldi	r24, 0xFF	; 255
     382:	9f ef       	ldi	r25, 0xFF	; 255
				break;
     384:	90 93 1b 01 	sts	0x011B, r25
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     388:	80 93 1a 01 	sts	0x011A, r24
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <_Z6getPins>:
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     392:	46 97       	sbiw	r24, 0x16	; 22
     394:	81 31       	cpi	r24, 0x11	; 17
     396:	91 05       	cpc	r25, r1
     398:	40 f4       	brcc	.+16     	; 0x3aa <_Z6getPins+0x18>
     39a:	fc 01       	movw	r30, r24
     39c:	e8 5b       	subi	r30, 0xB8	; 184
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     39e:	fe 4f       	sbci	r31, 0xFE	; 254
     3a0:	20 81       	ld	r18, Z
     3a2:	33 27       	eor	r19, r19
     3a4:	27 fd       	sbrc	r18, 7
     3a6:	30 95       	com	r19
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <_Z6getPins+0x1c>

					while (CurrCollectionPath->Parent != NULL)
     3aa:	2f ef       	ldi	r18, 0xFF	; 255
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3ac:	3f ef       	ldi	r19, 0xFF	; 255
     3ae:	c9 01       	movw	r24, r18
     3b0:	08 95       	ret

000003b2 <_Z6setRefs>:
     3b2:	ec e7       	ldi	r30, 0x7C	; 124
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	90 81       	ld	r25, Z
     3b8:	82 95       	swap	r24
     3ba:	88 0f       	add	r24, r24
     3bc:	88 0f       	add	r24, r24
     3be:	80 7c       	andi	r24, 0xC0	; 192
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3c0:	9f 73       	andi	r25, 0x3F	; 63
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3c2:	89 2b       	or	r24, r25
     3c4:	80 83       	st	Z, r24
     3c6:	08 95       	ret

000003c8 <_Z14setRefInternalv>:
     3c8:	83 e0       	ldi	r24, 0x03	; 3
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	f2 cf       	rjmp	.-28     	; 0x3b2 <_Z6setRefs>

000003ce <_Z14setRefExternalv>:
     3ce:	80 e0       	ldi	r24, 0x00	; 0
				}

				CurrCollectionPath->Type       = ReportItemData;
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	ef cf       	rjmp	.-34     	; 0x3b2 <_Z6setRefs>

000003d4 <_Z9setRefVCCv>:
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	ec cf       	rjmp	.-40     	; 0x3b2 <_Z6setRefs>

000003da <_Z6setPins>:
     3da:	db df       	rcall	.-74     	; 0x392 <_Z6getPins>
     3dc:	9c 01       	movw	r18, r24
     3de:	97 fd       	sbrc	r25, 7
     3e0:	17 c0       	rjmp	.+46     	; 0x410 <_Z6setPins+0x36>

				if (UsageListSize)
     3e2:	40 91 7c 00 	lds	r20, 0x007C
     3e6:	8f 70       	andi	r24, 0x0F	; 15
     3e8:	99 27       	eor	r25, r25
     3ea:	40 7c       	andi	r20, 0xC0	; 192
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3ec:	48 2b       	or	r20, r24
     3ee:	40 93 7c 00 	sts	0x007C, r20
     3f2:	c9 01       	movw	r24, r18
     3f4:	80 7f       	andi	r24, 0xF0	; 240
     3f6:	99 27       	eor	r25, r25
     3f8:	89 2b       	or	r24, r25
     3fa:	21 f0       	breq	.+8      	; 0x404 <_Z6setPins+0x2a>
     3fc:	80 91 7b 00 	lds	r24, 0x007B
     400:	80 62       	ori	r24, 0x20	; 32

					for (uint8_t i = 0; i < UsageListSize; i++)
     402:	03 c0       	rjmp	.+6      	; 0x40a <_Z6setPins+0x30>
					  UsageList[i] = UsageList[i + 1];
     404:	80 91 7b 00 	lds	r24, 0x007B
     408:	8f 7d       	andi	r24, 0xDF	; 223
     40a:	80 93 7b 00 	sts	0x007B, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     40e:	02 c0       	rjmp	.+4      	; 0x414 <_Z6setPins+0x3a>
     410:	2f ef       	ldi	r18, 0xFF	; 255
     412:	3f ef       	ldi	r19, 0xFF	; 255
     414:	c9 01       	movw	r24, r18
     416:	08 95       	ret

00000418 <_Z9setThermov>:
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     418:	d7 df       	rcall	.-82     	; 0x3c8 <_Z14setRefInternalv>
     41a:	ec e7       	ldi	r30, 0x7C	; 124
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 7c       	andi	r24, 0xC0	; 192
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     422:	87 60       	ori	r24, 0x07	; 7
     424:	80 83       	st	Z, r24
     426:	eb e7       	ldi	r30, 0x7B	; 123
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	80 62       	ori	r24, 0x20	; 32
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     42e:	80 83       	st	Z, r24
     430:	87 e2       	ldi	r24, 0x27	; 39
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	08 95       	ret

00000436 <_Z7convertv>:
     436:	80 91 7a 00 	lds	r24, 0x007A
     43a:	80 68       	ori	r24, 0x80	; 128
     43c:	80 93 7a 00 	sts	0x007A, r24
     440:	80 91 7a 00 	lds	r24, 0x007A
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     444:	80 64       	ori	r24, 0x40	; 64
     446:	80 93 7a 00 	sts	0x007A, r24
     44a:	80 91 7a 00 	lds	r24, 0x007A
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     44e:	86 fd       	sbrc	r24, 6
     450:	fc cf       	rjmp	.-8      	; 0x44a <_Z7convertv+0x14>
				break;
     452:	20 91 78 00 	lds	r18, 0x0078
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     456:	30 91 79 00 	lds	r19, 0x0079
     45a:	80 91 7a 00 	lds	r24, 0x007A
     45e:	8f 77       	andi	r24, 0x7F	; 127
     460:	80 93 7a 00 	sts	0x007A, r24
     464:	93 2f       	mov	r25, r19
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	ac 01       	movw	r20, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     46a:	42 2b       	or	r20, r18
     46c:	9a 01       	movw	r18, r20
     46e:	c9 01       	movw	r24, r18
     470:	08 95       	ret

00000472 <_Z11analogSetupv>:
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     472:	ea e7       	ldi	r30, 0x7A	; 122
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	87 60       	ori	r24, 0x07	; 7

					if (UsageListSize)
     47a:	80 83       	st	Z, r24
     47c:	a5 cf       	rjmp	.-182    	; 0x3c8 <_Z14setRefInternalv>

0000047e <_Z10analogReads>:
     47e:	ad df       	rcall	.-166    	; 0x3da <_Z6setPins>
     480:	97 ff       	sbrs	r25, 7
     482:	d9 cf       	rjmp	.-78     	; 0x436 <_Z7convertv>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	9f ef       	ldi	r25, 0xFF	; 255
     488:	08 95       	ret

0000048a <_Z8runTasksv>:
     48a:	08 95       	ret

0000048c <_Z7initRTCv>:
     48c:	e1 e8       	ldi	r30, 0x81	; 129
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	88 60       	ori	r24, 0x08	; 8
     494:	80 83       	st	Z, r24
     496:	80 e4       	ldi	r24, 0x40	; 64
     498:	9f e1       	ldi	r25, 0x1F	; 31

						for (uint8_t i = 0; i < UsageListSize; i++)
     49a:	90 93 89 00 	sts	0x0089, r25
						  UsageList[i] = UsageList[i + 1];
     49e:	80 93 88 00 	sts	0x0088, r24
     4a2:	80 81       	ld	r24, Z

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	80 83       	st	Z, r24
     4a8:	ef e6       	ldi	r30, 0x6F	; 111
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	82 60       	ori	r24, 0x02	; 2
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     4b0:	80 83       	st	Z, r24
     4b2:	78 94       	sei
     4b4:	08 95       	ret

000004b6 <__vector_17>:
     4b6:	1f 92       	push	r1
     4b8:	0f 92       	push	r0
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	0f 92       	push	r0
     4be:	11 24       	eor	r1, r1
     4c0:	8f 93       	push	r24
     4c2:	9f 93       	push	r25
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4c4:	80 91 1c 01 	lds	r24, 0x011C
     4c8:	90 91 1d 01 	lds	r25, 0x011D
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	90 93 1d 01 	sts	0x011D, r25
     4d2:	80 93 1c 01 	sts	0x011C, r24
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4d6:	80 91 1c 01 	lds	r24, 0x011C
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4da:	90 91 1d 01 	lds	r25, 0x011D
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4de:	89 2b       	or	r24, r25
     4e0:	c1 f4       	brne	.+48     	; 0x512 <__vector_17+0x5c>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4e2:	80 91 cd 01 	lds	r24, 0x01CD
     4e6:	90 91 ce 01 	lds	r25, 0x01CE
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4ea:	01 96       	adiw	r24, 0x01	; 1

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4ec:	90 93 ce 01 	sts	0x01CE, r25
     4f0:	80 93 cd 01 	sts	0x01CD, r24
     4f4:	80 91 cd 01 	lds	r24, 0x01CD
     4f8:	90 91 ce 01 	lds	r25, 0x01CE
     4fc:	89 2b       	or	r24, r25
     4fe:	49 f4       	brne	.+18     	; 0x512 <__vector_17+0x5c>
     500:	80 91 cb 01 	lds	r24, 0x01CB
     504:	90 91 cc 01 	lds	r25, 0x01CC

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	90 93 cc 01 	sts	0x01CC, r25
     50e:	80 93 cb 01 	sts	0x01CB, r24
     512:	9f 91       	pop	r25
     514:	8f 91       	pop	r24
     516:	0f 90       	pop	r0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <_Z6millisv>:
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	00 d0       	rcall	.+0      	; 0x52a <_Z6millisv+0xa>
     52a:	00 d0       	rcall	.+0      	; 0x52c <_Z6millisv+0xc>
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	20 91 1c 01 	lds	r18, 0x011C
     534:	30 91 1d 01 	lds	r19, 0x011D
     538:	80 91 cd 01 	lds	r24, 0x01CD
     53c:	90 91 ce 01 	lds	r25, 0x01CE
     540:	40 91 cb 01 	lds	r20, 0x01CB
     544:	50 91 cc 01 	lds	r21, 0x01CC
     548:	a0 e0       	ldi	r26, 0x00	; 0
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	6f e0       	ldi	r22, 0x0F	; 15
     54e:	88 0f       	add	r24, r24
     550:	99 1f       	adc	r25, r25
     552:	aa 1f       	adc	r26, r26
     554:	bb 1f       	adc	r27, r27
     556:	6a 95       	dec	r22
     558:	d1 f7       	brne	.-12     	; 0x54e <_Z6millisv+0x2e>
     55a:	36 95       	lsr	r19
     55c:	27 95       	ror	r18
     55e:	82 0f       	add	r24, r18
     560:	93 1f       	adc	r25, r19
     562:	a1 1d       	adc	r26, r1
     564:	b1 1d       	adc	r27, r1
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	77 27       	eor	r23, r23

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     56c:	46 95       	lsr	r20
     56e:	77 95       	ror	r23
     570:	66 27       	eor	r22, r22
     572:	55 27       	eor	r21, r21
					  return HID_PARSE_InsufficientReportItems;
     574:	44 27       	eor	r20, r20
     576:	84 0f       	add	r24, r20

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     578:	95 1f       	adc	r25, r21
     57a:	a6 1f       	adc	r26, r22
     57c:	b7 1f       	adc	r27, r23
     57e:	89 83       	std	Y+1, r24	; 0x01
     580:	9a 83       	std	Y+2, r25	; 0x02
     582:	ab 83       	std	Y+3, r26	; 0x03
     584:	bc 83       	std	Y+4, r27	; 0x04
     586:	09 81       	ldd	r16, Y+1	; 0x01
     588:	1a 81       	ldd	r17, Y+2	; 0x02
     58a:	2b 81       	ldd	r18, Y+3	; 0x03
     58c:	3c 81       	ldd	r19, Y+4	; 0x04
     58e:	b8 01       	movw	r22, r16
     590:	c9 01       	movw	r24, r18
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	0f 91       	pop	r16
     5a2:	08 95       	ret

000005a4 <_Z7secondsv>:
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	60 91 cd 01 	lds	r22, 0x01CD
     5b0:	70 91 ce 01 	lds	r23, 0x01CE
     5b4:	20 91 1c 01 	lds	r18, 0x011C
     5b8:	30 91 1d 01 	lds	r19, 0x011D
     5bc:	cb 01       	movw	r24, r22
     5be:	a0 e0       	ldi	r26, 0x00	; 0
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	77 27       	eor	r23, r23
     5c4:	66 27       	eor	r22, r22
     5c6:	62 0f       	add	r22, r18
     5c8:	73 1f       	adc	r23, r19
     5ca:	81 1d       	adc	r24, r1
     5cc:	91 1d       	adc	r25, r1
     5ce:	20 ed       	ldi	r18, 0xD0	; 208
     5d0:	37 e0       	ldi	r19, 0x07	; 7
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	50 e0       	ldi	r21, 0x00	; 0
     5d6:	2e d7       	rcall	.+3676   	; 0x1434 <__divmodsi4>
     5d8:	69 01       	movw	r12, r18
     5da:	7a 01       	movw	r14, r20
     5dc:	60 91 cb 01 	lds	r22, 0x01CB
     5e0:	70 91 cc 01 	lds	r23, 0x01CC
     5e4:	cb 01       	movw	r24, r22
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	77 27       	eor	r23, r23
     5ec:	66 27       	eor	r22, r22
     5ee:	28 ee       	ldi	r18, 0xE8	; 232
     5f0:	33 e0       	ldi	r19, 0x03	; 3
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	1e d7       	rcall	.+3644   	; 0x1434 <__divmodsi4>
     5f8:	d9 01       	movw	r26, r18
     5fa:	99 27       	eor	r25, r25
     5fc:	88 27       	eor	r24, r24
     5fe:	c8 0e       	add	r12, r24
     600:	d9 1e       	adc	r13, r25
     602:	ea 1e       	adc	r14, r26
     604:	fb 1e       	adc	r15, r27
     606:	b6 01       	movw	r22, r12
     608:	c7 01       	movw	r24, r14
     60a:	ff 90       	pop	r15
     60c:	ef 90       	pop	r14
     60e:	df 90       	pop	r13
     610:	cf 90       	pop	r12
     612:	08 95       	ret

00000614 <_Z11delayMillisj>:
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	6c 01       	movw	r12, r24
     626:	7c df       	rcall	.-264    	; 0x520 <_Z6millisv>
     628:	4b 01       	movw	r8, r22
     62a:	5c 01       	movw	r10, r24
     62c:	e1 2c       	mov	r14, r1
     62e:	f1 2c       	mov	r15, r1
					  ParserData->TotalReportItems++;
     630:	77 df       	rcall	.-274    	; 0x520 <_Z6millisv>
     632:	68 19       	sub	r22, r8
     634:	79 09       	sbc	r23, r9
     636:	8a 09       	sbc	r24, r10
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     638:	9b 09       	sbc	r25, r11
     63a:	6c 15       	cp	r22, r12
     63c:	7d 05       	cpc	r23, r13
     63e:	8e 05       	cpc	r24, r14
     640:	9f 05       	cpc	r25, r15
     642:	b0 f3       	brcs	.-20     	; 0x630 <_Z11delayMillisj+0x1c>
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     64e:	af 90       	pop	r10
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	08 95       	ret

00000656 <_Z7getPORTi>:
     656:	89 32       	cpi	r24, 0x29	; 41
     658:	91 05       	cpc	r25, r1
     65a:	8c f4       	brge	.+34     	; 0x67e <_Z7getPORTi+0x28>
     65c:	fc 01       	movw	r30, r24
     65e:	e8 5a       	subi	r30, 0xA8	; 168
     660:	fe 4f       	sbci	r31, 0xFE	; 254
     662:	e0 81       	ld	r30, Z
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	f5 95       	asr	r31
     66a:	e7 95       	ror	r30
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     66c:	8a 95       	dec	r24
     66e:	e1 f7       	brne	.-8      	; 0x668 <_Z7getPORTi+0x12>
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	e6 5c       	subi	r30, 0xC6	; 198
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	20 81       	ld	r18, Z
     67a:	31 81       	ldd	r19, Z+1	; 0x01
     67c:	02 c0       	rjmp	.+4      	; 0x682 <_Z7getPORTi+0x2c>
     67e:	20 e0       	ldi	r18, 0x00	; 0
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	c9 01       	movw	r24, r18
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     684:	08 95       	ret

00000686 <_Z6getPINi>:
     686:	89 32       	cpi	r24, 0x29	; 41
     688:	91 05       	cpc	r25, r1
     68a:	8c f4       	brge	.+34     	; 0x6ae <_Z6getPINi+0x28>
     68c:	fc 01       	movw	r30, r24
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     68e:	e8 5a       	subi	r30, 0xA8	; 168
     690:	fe 4f       	sbci	r31, 0xFE	; 254
     692:	e0 81       	ld	r30, Z
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	24 e0       	ldi	r18, 0x04	; 4
     698:	f5 95       	asr	r31
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     69a:	e7 95       	ror	r30
     69c:	2a 95       	dec	r18
     69e:	e1 f7       	brne	.-8      	; 0x698 <_Z6getPINi+0x12>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6a0:	ee 0f       	add	r30, r30
     6a2:	ff 1f       	adc	r31, r31
     6a4:	e4 5d       	subi	r30, 0xD4	; 212
     6a6:	fe 4f       	sbci	r31, 0xFE	; 254
     6a8:	20 81       	ld	r18, Z
     6aa:	31 81       	ldd	r19, Z+1	; 0x01
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <_Z6getPINi+0x2c>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	c9 01       	movw	r24, r18
     6b4:	08 95       	ret

000006b6 <_Z6getDDRi>:
	  return HID_PARSE_NoUnfilteredReportItems;
     6b6:	89 32       	cpi	r24, 0x29	; 41
     6b8:	91 05       	cpc	r25, r1

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6ba:	8c f4       	brge	.+34     	; 0x6de <_Z6getDDRi+0x28>
     6bc:	fc 01       	movw	r30, r24

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6be:	e8 5a       	subi	r30, 0xA8	; 168
     6c0:	fe 4f       	sbci	r31, 0xFE	; 254

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c2:	e0 81       	ld	r30, Z
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6c6:	44 e0       	ldi	r20, 0x04	; 4
     6c8:	f5 95       	asr	r31
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ca:	e7 95       	ror	r30
     6cc:	4a 95       	dec	r20
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <_Z6getDDRi+0x12>
     6d0:	ee 0f       	add	r30, r30
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d2:	ff 1f       	adc	r31, r31
     6d4:	e2 5e       	subi	r30, 0xE2	; 226
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6d6:	fe 4f       	sbci	r31, 0xFE	; 254
     6d8:	20 81       	ld	r18, Z
     6da:	31 81       	ldd	r19, Z+1	; 0x01
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <_Z6getDDRi+0x2c>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	c9 01       	movw	r24, r18
     6e4:	08 95       	ret

000006e6 <_Z12digitalWritecc>:
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	89 32       	cpi	r24, 0x29	; 41
     6ec:	48 f5       	brcc	.+82     	; 0x740 <_Z12digitalWritecc+0x5a>
     6ee:	c8 2f       	mov	r28, r24
     6f0:	d0 e0       	ldi	r29, 0x00	; 0
     6f2:	ce 01       	movw	r24, r28
     6f4:	66 23       	and	r22, r22
     6f6:	81 f0       	breq	.+32     	; 0x718 <_Z12digitalWritecc+0x32>
     6f8:	ae df       	rcall	.-164    	; 0x656 <_Z7getPORTi>
     6fa:	fc 01       	movw	r30, r24
     6fc:	40 81       	ld	r20, Z
     6fe:	c8 5a       	subi	r28, 0xA8	; 168
     700:	de 4f       	sbci	r29, 0xFE	; 254
     702:	58 81       	ld	r21, Y
     704:	5f 70       	andi	r21, 0x0F	; 15
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	05 2e       	mov	r0, r21
     70c:	01 c0       	rjmp	.+2      	; 0x710 <_Z12digitalWritecc+0x2a>
     70e:	22 0f       	add	r18, r18
     710:	0a 94       	dec	r0
int digitalWrite(char pin, char val)
{
	if(pin > maxPin)
		return -1;
	if(val)
		*getPORT(pin) |= _BV(pins[pin-1] & 0xF);
     712:	ea f7       	brpl	.-6      	; 0x70e <_Z12digitalWritecc+0x28>
     714:	42 2b       	or	r20, r18
     716:	10 c0       	rjmp	.+32     	; 0x738 <_Z12digitalWritecc+0x52>
     718:	9e df       	rcall	.-196    	; 0x656 <_Z7getPORTi>
	else
		*getPORT(pin) &= ~_BV(pins[pin-1] & 0xF);
     71a:	fc 01       	movw	r30, r24
     71c:	40 81       	ld	r20, Z
     71e:	c8 5a       	subi	r28, 0xA8	; 168
     720:	de 4f       	sbci	r29, 0xFE	; 254
     722:	58 81       	ld	r21, Y
     724:	5f 70       	andi	r21, 0x0F	; 15
     726:	21 e0       	ldi	r18, 0x01	; 1
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	05 2e       	mov	r0, r21
     72c:	01 c0       	rjmp	.+2      	; 0x730 <_Z12digitalWritecc+0x4a>
     72e:	22 0f       	add	r18, r18
     730:	0a 94       	dec	r0
     732:	ea f7       	brpl	.-6      	; 0x72e <_Z12digitalWritecc+0x48>
     734:	20 95       	com	r18
     736:	42 23       	and	r20, r18
     738:	40 83       	st	Z, r20
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
     73e:	02 c0       	rjmp	.+4      	; 0x744 <_Z12digitalWritecc+0x5e>
     740:	2f ef       	ldi	r18, 0xFF	; 255
     742:	3f ef       	ldi	r19, 0xFF	; 255
}

int digitalWrite(char pin, char val)
{
	if(pin > maxPin)
		return -1;
     744:	c9 01       	movw	r24, r18
     746:	df 91       	pop	r29
	if(val)
		*getPORT(pin) |= _BV(pins[pin-1] & 0xF);
	else
		*getPORT(pin) &= ~_BV(pins[pin-1] & 0xF);
	return 0;
}
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <_Z12setDirectioncc>:
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29

int setDirection(char pin, char val)
{
     750:	89 32       	cpi	r24, 0x29	; 41
     752:	48 f5       	brcc	.+82     	; 0x7a6 <_Z12setDirectioncc+0x5a>
	if(pin > maxPin)
     754:	c8 2f       	mov	r28, r24
     756:	d0 e0       	ldi	r29, 0x00	; 0
     758:	ce 01       	movw	r24, r28
     75a:	66 23       	and	r22, r22
		return -1;

	if(val)
		*getDDR(pin) |= _BV(pins[pin-1] & 0xF);
     75c:	81 f0       	breq	.+32     	; 0x77e <_Z12setDirectioncc+0x32>
int setDirection(char pin, char val)
{
	if(pin > maxPin)
		return -1;

	if(val)
     75e:	ab df       	rcall	.-170    	; 0x6b6 <_Z6getDDRi>
     760:	fc 01       	movw	r30, r24
		*getDDR(pin) |= _BV(pins[pin-1] & 0xF);
     762:	40 81       	ld	r20, Z
     764:	c8 5a       	subi	r28, 0xA8	; 168
     766:	de 4f       	sbci	r29, 0xFE	; 254
     768:	58 81       	ld	r21, Y
     76a:	5f 70       	andi	r21, 0x0F	; 15
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	05 2e       	mov	r0, r21
     772:	01 c0       	rjmp	.+2      	; 0x776 <_Z12setDirectioncc+0x2a>
     774:	22 0f       	add	r18, r18
     776:	0a 94       	dec	r0
     778:	ea f7       	brpl	.-6      	; 0x774 <_Z12setDirectioncc+0x28>
     77a:	42 2b       	or	r20, r18
     77c:	10 c0       	rjmp	.+32     	; 0x79e <_Z12setDirectioncc+0x52>
     77e:	9b df       	rcall	.-202    	; 0x6b6 <_Z6getDDRi>
     780:	fc 01       	movw	r30, r24
     782:	40 81       	ld	r20, Z
	else
		*getDDR(pin) &= ~_BV(pins[pin-1] & 0xF);
     784:	c8 5a       	subi	r28, 0xA8	; 168
     786:	de 4f       	sbci	r29, 0xFE	; 254
     788:	58 81       	ld	r21, Y
     78a:	5f 70       	andi	r21, 0x0F	; 15
     78c:	21 e0       	ldi	r18, 0x01	; 1
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	05 2e       	mov	r0, r21
     792:	01 c0       	rjmp	.+2      	; 0x796 <_Z12setDirectioncc+0x4a>
     794:	22 0f       	add	r18, r18
     796:	0a 94       	dec	r0
     798:	ea f7       	brpl	.-6      	; 0x794 <_Z12setDirectioncc+0x48>
     79a:	20 95       	com	r18
     79c:	42 23       	and	r20, r18
     79e:	40 83       	st	Z, r20
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <_Z12setDirectioncc+0x5e>
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
	return 0;
     7a8:	3f ef       	ldi	r19, 0xFF	; 255
     7aa:	c9 01       	movw	r24, r18
     7ac:	df 91       	pop	r29
}

int setDirection(char pin, char val)
{
	if(pin > maxPin)
		return -1;
     7ae:	cf 91       	pop	r28
     7b0:	08 95       	ret

000007b2 <_Z11digitalReadc>:
	if(val)
		*getDDR(pin) |= _BV(pins[pin-1] & 0xF);
	else
		*getDDR(pin) &= ~_BV(pins[pin-1] & 0xF);
	return 0;
}
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	89 32       	cpi	r24, 0x29	; 41
     7b8:	98 f4       	brcc	.+38     	; 0x7e0 <_Z11digitalReadc+0x2e>

int digitalRead(char pin)
{
     7ba:	c8 2f       	mov	r28, r24
     7bc:	d0 e0       	ldi	r29, 0x00	; 0

	if(pin > maxPin)
     7be:	ce 01       	movw	r24, r28
     7c0:	62 df       	rcall	.-316    	; 0x686 <_Z6getPINi>
		return -1;

	return (*getPIN(pin) >> (pins[pin-1] & 0xF)) &1;
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 81       	ld	r18, Z
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	c8 5a       	subi	r28, 0xA8	; 168
     7ca:	de 4f       	sbci	r29, 0xFE	; 254
     7cc:	88 81       	ld	r24, Y
     7ce:	8f 70       	andi	r24, 0x0F	; 15
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <_Z11digitalReadc+0x24>
     7d2:	35 95       	asr	r19
     7d4:	27 95       	ror	r18
     7d6:	8a 95       	dec	r24
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <_Z11digitalReadc+0x20>
     7da:	21 70       	andi	r18, 0x01	; 1
     7dc:	33 27       	eor	r19, r19
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <_Z11digitalReadc+0x32>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	3f ef       	ldi	r19, 0xFF	; 255
     7e4:	c9 01       	movw	r24, r18
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28

int digitalRead(char pin)
{

	if(pin > maxPin)
		return -1;
     7ea:	08 95       	ret

000007ec <runUSB>:
     7ec:	80 e0       	ldi	r24, 0x00	; 0

	return (*getPIN(pin) >> (pins[pin-1] & 0xF)) &1;
}
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	f0 d4       	rcall	.+2528   	; 0x11d2 <CDC_Device_USBTask>
     7f2:	2c c4       	rjmp	.+2136   	; 0x104c <USB_USBTask>

000007f4 <SetupHardware>:
     7f4:	90 e0       	ldi	r25, 0x00	; 0
//
void runUSB(void)
{
//	CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
        CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
        USB_USBTask();	
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	80 93 61 00 	sts	0x0061, r24
     800:	90 93 61 00 	sts	0x0061, r25
     804:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	USB_Init();
     806:	1e c1       	rjmp	.+572    	; 0xa44 <USB_Init>

00000808 <initUSBSerial>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
void initUSBSerial(void)
{
     808:	f5 df       	rcall	.-22     	; 0x7f4 <SetupHardware>
     80a:	66 eb       	ldi	r22, 0xB6	; 182
  	SetupHardware();

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	2f d5       	rcall	.+2654   	; 0x1272 <CDC_Device_CreateStream>
     814:	86 eb       	ldi	r24, 0xB6	; 182
     816:	91 e0       	ldi	r25, 0x01	; 1

	stdout = &USBSerialStream;
     818:	90 93 df 01 	sts	0x01DF, r25
     81c:	80 93 de 01 	sts	0x01DE, r24
     820:	90 93 dd 01 	sts	0x01DD, r25
	stdin = &USBSerialStream;
     824:	80 93 dc 01 	sts	0x01DC, r24
     828:	08 95       	ret

0000082a <EVENT_USB_Device_Disconnect>:
}

/** Checks for changes in the position of the board joystick, sending strings to the host upon each change. */

void EVENT_USB_Device_Disconnect(void)
{
     82a:	08 95       	ret

0000082c <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	1f c4       	rjmp	.+2110   	; 0x1070 <CDC_Device_ConfigureEndpoints>

00000832 <EVENT_USB_Device_ControlRequest>:
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	31 c5       	rjmp	.+2658   	; 0x129a <CDC_Device_ProcessControlRequest>

00000838 <CALLBACK_USB_GetDescriptor>:
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     838:	29 2f       	mov	r18, r25
     83a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     83c:	22 30       	cpi	r18, 0x02	; 2
     83e:	31 05       	cpc	r19, r1
     840:	39 f0       	breq	.+14     	; 0x850 <CALLBACK_USB_GetDescriptor+0x18>
     842:	23 30       	cpi	r18, 0x03	; 3
     844:	31 05       	cpc	r19, r1
     846:	49 f0       	breq	.+18     	; 0x85a <CALLBACK_USB_GetDescriptor+0x22>
     848:	21 30       	cpi	r18, 0x01	; 1
     84a:	31 05       	cpc	r19, r1
     84c:	21 f1       	breq	.+72     	; 0x896 <CALLBACK_USB_GetDescriptor+0x5e>
     84e:	28 c0       	rjmp	.+80     	; 0x8a0 <CALLBACK_USB_GetDescriptor+0x68>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     850:	ee e3       	ldi	r30, 0x3E	; 62
     852:	f0 e0       	ldi	r31, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     854:	88 ee       	ldi	r24, 0xE8	; 232
     856:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     858:	27 c0       	rjmp	.+78     	; 0x8a8 <CALLBACK_USB_GetDescriptor+0x70>
			break;
	}

	*DescriptorAddress = Address;
	return Size;
}
     85a:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	91 05       	cpc	r25, r1
     860:	61 f0       	breq	.+24     	; 0x87a <CALLBACK_USB_GetDescriptor+0x42>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	91 05       	cpc	r25, r1
     866:	81 f0       	breq	.+32     	; 0x888 <CALLBACK_USB_GetDescriptor+0x50>
     868:	89 2b       	or	r24, r25
     86a:	d1 f4       	brne	.+52     	; 0x8a0 <CALLBACK_USB_GetDescriptor+0x68>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     86c:	e4 ee       	ldi	r30, 0xE4	; 228
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	e4 91       	lpm	r30, Z+
     872:	f0 e0       	ldi	r31, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = &LanguageString;
     874:	84 ee       	ldi	r24, 0xE4	; 228
     876:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     878:	17 c0       	rjmp	.+46     	; 0x8a8 <CALLBACK_USB_GetDescriptor+0x70>
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     87a:	ea ec       	ldi	r30, 0xCA	; 202
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	e4 91       	lpm	r30, Z+
     880:	f0 e0       	ldi	r31, 0x00	; 0
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01:
					Address = &ManufacturerString;
     882:	8a ec       	ldi	r24, 0xCA	; 202
     884:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     886:	10 c0       	rjmp	.+32     	; 0x8a8 <CALLBACK_USB_GetDescriptor+0x70>
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     888:	ec ea       	ldi	r30, 0xAC	; 172
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	e4 91       	lpm	r30, Z+
     88e:	f0 e0       	ldi	r31, 0x00	; 0
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
     890:	8c ea       	ldi	r24, 0xAC	; 172
     892:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     894:	09 c0       	rjmp	.+18     	; 0x8a8 <CALLBACK_USB_GetDescriptor+0x70>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     896:	e2 e1       	ldi	r30, 0x12	; 18
     898:	f0 e0       	ldi	r31, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     89a:	86 e2       	ldi	r24, 0x26	; 38
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <CALLBACK_USB_GetDescriptor+0x70>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     8a0:	e0 e0       	ldi	r30, 0x00	; 0
     8a2:	f0 e0       	ldi	r31, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     8a8:	da 01       	movw	r26, r20
     8aa:	8d 93       	st	X+, r24
     8ac:	9c 93       	st	X, r25
	return Size;
}
     8ae:	cf 01       	movw	r24, r30
     8b0:	08 95       	ret

000008b2 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     8b2:	98 2f       	mov	r25, r24
     8b4:	2c c0       	rjmp	.+88     	; 0x90e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     8b6:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     8ba:	98 17       	cp	r25, r24
     8bc:	39 f0       	breq	.+14     	; 0x8cc <Endpoint_ConfigureEndpoint_Prv+0x1a>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     8be:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     8c2:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     8c6:	50 91 f0 00 	lds	r21, 0x00F0
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <Endpoint_ConfigureEndpoint_Prv+0x20>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     8cc:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     8ce:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     8d0:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     8d2:	21 fd       	sbrc	r18, 1
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <Endpoint_ConfigureEndpoint_Prv+0x28>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     8d6:	9f 5f       	subi	r25, 0xFF	; 255
     8d8:	1a c0       	rjmp	.+52     	; 0x90e <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     8da:	30 91 eb 00 	lds	r19, 0x00EB
     8de:	3e 7f       	andi	r19, 0xFE	; 254
     8e0:	30 93 eb 00 	sts	0x00EB, r19

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     8e4:	30 91 ed 00 	lds	r19, 0x00ED
     8e8:	3d 7f       	andi	r19, 0xFD	; 253
     8ea:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     8ee:	30 91 eb 00 	lds	r19, 0x00EB
     8f2:	31 60       	ori	r19, 0x01	; 1
     8f4:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     8f8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     8fc:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     900:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     904:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     908:	27 fd       	sbrc	r18, 7
     90a:	e5 cf       	rjmp	.-54     	; 0x8d6 <Endpoint_ConfigureEndpoint_Prv+0x24>
     90c:	06 c0       	rjmp	.+12     	; 0x91a <Endpoint_ConfigureEndpoint_Prv+0x68>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     90e:	97 30       	cpi	r25, 0x07	; 7
     910:	90 f2       	brcs	.-92     	; 0x8b6 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     912:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     91a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     91c:	08 95       	ret

0000091e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     91e:	80 91 d4 01 	lds	r24, 0x01D4
     922:	87 fd       	sbrc	r24, 7
     924:	05 c0       	rjmp	.+10     	; 0x930 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     926:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     92a:	80 ff       	sbrs	r24, 0
     92c:	0e c0       	rjmp	.+28     	; 0x94a <Endpoint_ClearStatusStage+0x2c>
     92e:	12 c0       	rjmp	.+36     	; 0x954 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     930:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     934:	82 fd       	sbrc	r24, 2
     936:	05 c0       	rjmp	.+10     	; 0x942 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     938:	80 91 d3 01 	lds	r24, 0x01D3
     93c:	81 11       	cpse	r24, r1
     93e:	f8 cf       	rjmp	.-16     	; 0x930 <Endpoint_ClearStatusStage+0x12>
     940:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     942:	80 91 e8 00 	lds	r24, 0x00E8
     946:	8b 77       	andi	r24, 0x7B	; 123
     948:	08 c0       	rjmp	.+16     	; 0x95a <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     94a:	80 91 d3 01 	lds	r24, 0x01D3
     94e:	81 11       	cpse	r24, r1
     950:	ea cf       	rjmp	.-44     	; 0x926 <Endpoint_ClearStatusStage+0x8>
     952:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     954:	80 91 e8 00 	lds	r24, 0x00E8
     958:	8e 77       	andi	r24, 0x7E	; 126
     95a:	80 93 e8 00 	sts	0x00E8, r24
     95e:	08 95       	ret

00000960 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     960:	80 91 e4 00 	lds	r24, 0x00E4
     964:	90 91 e5 00 	lds	r25, 0x00E5
     968:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     96a:	20 91 ec 00 	lds	r18, 0x00EC
     96e:	20 fd       	sbrc	r18, 0
     970:	1f c0       	rjmp	.+62     	; 0x9b0 <Endpoint_WaitUntilReady+0x50>
     972:	23 c0       	rjmp	.+70     	; 0x9ba <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     974:	20 91 d3 01 	lds	r18, 0x01D3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     978:	22 23       	and	r18, r18
     97a:	91 f0       	breq	.+36     	; 0x9a0 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     97c:	25 30       	cpi	r18, 0x05	; 5
     97e:	91 f0       	breq	.+36     	; 0x9a4 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     980:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     984:	25 fd       	sbrc	r18, 5
     986:	10 c0       	rjmp	.+32     	; 0x9a8 <Endpoint_WaitUntilReady+0x48>
     988:	20 91 e4 00 	lds	r18, 0x00E4
     98c:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     990:	28 17       	cp	r18, r24
     992:	39 07       	cpc	r19, r25
     994:	51 f3       	breq	.-44     	; 0x96a <Endpoint_WaitUntilReady+0xa>
     996:	41 50       	subi	r20, 0x01	; 1
     998:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     99a:	39 f7       	brne	.-50     	; 0x96a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9b0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     9b4:	20 ff       	sbrs	r18, 0
     9b6:	de cf       	rjmp	.-68     	; 0x974 <Endpoint_WaitUntilReady+0x14>
     9b8:	f9 cf       	rjmp	.-14     	; 0x9ac <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9ba:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     9be:	22 ff       	sbrs	r18, 2
     9c0:	d9 cf       	rjmp	.-78     	; 0x974 <Endpoint_WaitUntilReady+0x14>
     9c2:	f4 cf       	rjmp	.-24     	; 0x9ac <Endpoint_WaitUntilReady+0x4c>

000009c4 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     9cc:	46 d0       	rcall	.+140    	; 0xa5a <USB_INT_DisableAllInterrupts>
     9ce:	4d d0       	rcall	.+154    	; 0xa6a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     9d0:	c8 ed       	ldi	r28, 0xD8	; 216
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     9d4:	88 81       	ld	r24, Y
     9d6:	8f 77       	andi	r24, 0x7F	; 127
     9d8:	88 83       	st	Y, r24
     9da:	88 81       	ld	r24, Y
     9dc:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     9de:	88 83       	st	Y, r24
     9e0:	88 81       	ld	r24, Y
     9e2:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     9e4:	88 83       	st	Y, r24
     9e6:	19 bc       	out	0x29, r1	; 41
     9e8:	10 92 d3 01 	sts	0x01D3, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     9ec:	10 92 cf 01 	sts	0x01CF, r1
	USB_Device_ConfigurationNumber  = 0;
     9f0:	10 92 d1 01 	sts	0x01D1, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     9f4:	10 92 d0 01 	sts	0x01D0, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     9f8:	00 ee       	ldi	r16, 0xE0	; 224
     9fa:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     9fc:	f8 01       	movw	r30, r16
     9fe:	80 81       	ld	r24, Z
     a00:	8b 7f       	andi	r24, 0xFB	; 251
     a02:	80 83       	st	Z, r24
     a04:	88 81       	ld	r24, Y
     a06:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     a08:	88 83       	st	Y, r24
     a0a:	42 e0       	ldi	r20, 0x02	; 2
     a0c:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	50 df       	rcall	.-352    	; 0x8b2 <Endpoint_ConfigureEndpoint_Prv>
     a12:	e1 ee       	ldi	r30, 0xE1	; 225
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     a18:	8e 7f       	andi	r24, 0xFE	; 254
     a1a:	80 83       	st	Z, r24
     a1c:	e2 ee       	ldi	r30, 0xE2	; 226
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	80 83       	st	Z, r24
     a26:	80 81       	ld	r24, Z
     a28:	88 60       	ori	r24, 0x08	; 8
     a2a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     a2c:	f8 01       	movw	r30, r16
     a2e:	80 81       	ld	r24, Z
     a30:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a32:	80 83       	st	Z, r24
     a34:	88 81       	ld	r24, Y
     a36:	80 61       	ori	r24, 0x10	; 16
     a38:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     a44:	e7 ed       	ldi	r30, 0xD7	; 215
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	80 81       	ld	r24, Z
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     a4e:	84 e0       	ldi	r24, 0x04	; 4
     a50:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	80 93 d2 01 	sts	0x01D2, r24

	USB_ResetInterface();
     a58:	b5 cf       	rjmp	.-150    	; 0x9c4 <USB_ResetInterface>

00000a5a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     a5a:	e8 ed       	ldi	r30, 0xD8	; 216
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	8e 7f       	andi	r24, 0xFE	; 254
     a62:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     a64:	10 92 e2 00 	sts	0x00E2, r1
     a68:	08 95       	ret

00000a6a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a6a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     a6e:	10 92 e1 00 	sts	0x00E1, r1
     a72:	08 95       	ret

00000a74 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	3f 93       	push	r19
     a82:	4f 93       	push	r20
     a84:	5f 93       	push	r21
     a86:	6f 93       	push	r22
     a88:	7f 93       	push	r23
     a8a:	8f 93       	push	r24
     a8c:	9f 93       	push	r25
     a8e:	af 93       	push	r26
     a90:	bf 93       	push	r27
     a92:	ef 93       	push	r30
     a94:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     a96:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     a9a:	82 ff       	sbrs	r24, 2
     a9c:	0a c0       	rjmp	.+20     	; 0xab2 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     a9e:	80 91 e2 00 	lds	r24, 0x00E2
     aa2:	82 ff       	sbrs	r24, 2
     aa4:	06 c0       	rjmp	.+12     	; 0xab2 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     aa6:	80 91 e1 00 	lds	r24, 0x00E1
     aaa:	8b 7f       	andi	r24, 0xFB	; 251
     aac:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     ab0:	cc d2       	rcall	.+1432   	; 0x104a <USB_Event_Stub>
     ab2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     ab6:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     ab8:	1d c0       	rjmp	.+58     	; 0xaf4 <__vector_10+0x80>
     aba:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     abe:	80 ff       	sbrs	r24, 0
     ac0:	19 c0       	rjmp	.+50     	; 0xaf4 <__vector_10+0x80>
     ac2:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     ac6:	8e 7f       	andi	r24, 0xFE	; 254
     ac8:	80 93 da 00 	sts	0x00DA, r24
     acc:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     ad0:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ad2:	0c c0       	rjmp	.+24     	; 0xaec <__vector_10+0x78>
     ad4:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ad6:	89 bd       	out	0x29, r24	; 41
     ad8:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ada:	89 bd       	out	0x29, r24	; 41
     adc:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     ade:	00 fe       	sbrs	r0, 0
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <__vector_10+0x68>
     ae2:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     ae4:	80 93 d3 01 	sts	0x01D3, r24
     ae8:	b0 d2       	rcall	.+1376   	; 0x104a <USB_Event_Stub>
			EVENT_USB_Device_Connect();
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <__vector_10+0x80>
     aec:	19 bc       	out	0x29, r1	; 41
     aee:	10 92 d3 01 	sts	0x01D3, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     af2:	9b de       	rcall	.-714    	; 0x82a <EVENT_USB_Device_Disconnect>
     af4:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     af8:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     afa:	18 c0       	rjmp	.+48     	; 0xb2c <__stack+0x2d>
     afc:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     b00:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     b02:	14 c0       	rjmp	.+40     	; 0xb2c <__stack+0x2d>
     b04:	80 91 e2 00 	lds	r24, 0x00E2
     b08:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b0a:	80 93 e2 00 	sts	0x00E2, r24
     b0e:	80 91 e2 00 	lds	r24, 0x00E2
     b12:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b14:	80 93 e2 00 	sts	0x00E2, r24
     b18:	80 91 d8 00 	lds	r24, 0x00D8
     b1c:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     b1e:	80 93 d8 00 	sts	0x00D8, r24
     b22:	19 bc       	out	0x29, r1	; 41
     b24:	85 e0       	ldi	r24, 0x05	; 5
     b26:	80 93 d3 01 	sts	0x01D3, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     b2a:	8f d2       	rcall	.+1310   	; 0x104a <USB_Event_Stub>
     b2c:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     b30:	84 ff       	sbrs	r24, 4
     b32:	2d c0       	rjmp	.+90     	; 0xb8e <__stack+0x8f>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     b34:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     b38:	84 ff       	sbrs	r24, 4
     b3a:	29 c0       	rjmp	.+82     	; 0xb8e <__stack+0x8f>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     b3c:	80 e1       	ldi	r24, 0x10	; 16
     b3e:	89 bd       	out	0x29, r24	; 41
     b40:	82 e1       	ldi	r24, 0x12	; 18
     b42:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b44:	09 b4       	in	r0, 0x29	; 41
     b46:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b48:	fd cf       	rjmp	.-6      	; 0xb44 <__stack+0x45>
     b4a:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     b4e:	8f 7d       	andi	r24, 0xDF	; 223
     b50:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b54:	80 91 e1 00 	lds	r24, 0x00E1
     b58:	8f 7e       	andi	r24, 0xEF	; 239
     b5a:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     b5e:	80 91 e2 00 	lds	r24, 0x00E2
     b62:	8f 7e       	andi	r24, 0xEF	; 239
     b64:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     b68:	80 91 e2 00 	lds	r24, 0x00E2
     b6c:	81 60       	ori	r24, 0x01	; 1
     b6e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     b72:	80 91 cf 01 	lds	r24, 0x01CF
     b76:	81 11       	cpse	r24, r1
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__stack+0x83>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     b7a:	80 91 e3 00 	lds	r24, 0x00E3
     b7e:	87 ff       	sbrs	r24, 7
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <__stack+0x87>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <__stack+0x89>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	80 93 d3 01 	sts	0x01D3, r24
     b8c:	5e d2       	rcall	.+1212   	; 0x104a <USB_Event_Stub>
     b8e:	80 91 e1 00 	lds	r24, 0x00E1
     b92:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     b94:	22 c0       	rjmp	.+68     	; 0xbda <__stack+0xdb>
     b96:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     b9a:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     b9c:	1e c0       	rjmp	.+60     	; 0xbda <__stack+0xdb>
     b9e:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ba2:	87 7f       	andi	r24, 0xF7	; 247
     ba4:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ba8:	82 e0       	ldi	r24, 0x02	; 2
     baa:	80 93 d3 01 	sts	0x01D3, r24
     bae:	10 92 cf 01 	sts	0x01CF, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     bb2:	80 91 e1 00 	lds	r24, 0x00E1
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     bb8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bbc:	80 91 e2 00 	lds	r24, 0x00E2
     bc0:	8e 7f       	andi	r24, 0xFE	; 254
     bc2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     bc6:	80 91 e2 00 	lds	r24, 0x00E2
     bca:	80 61       	ori	r24, 0x10	; 16
     bcc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     bd0:	42 e0       	ldi	r20, 0x02	; 2
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	6d de       	rcall	.-806    	; 0x8b2 <Endpoint_ConfigureEndpoint_Prv>
     bd8:	38 d2       	rcall	.+1136   	; 0x104a <USB_Event_Stub>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	0f 90       	pop	r0
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	0f 90       	pop	r0
     bf8:	1f 90       	pop	r1
     bfa:	18 95       	reti

00000bfc <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     bfc:	40 91 da 01 	lds	r20, 0x01DA
     c00:	50 91 db 01 	lds	r21, 0x01DB
     c04:	46 17       	cp	r20, r22
     c06:	57 07       	cpc	r21, r23
     c08:	48 f0       	brcs	.+18     	; 0xc1c <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     c0a:	61 15       	cp	r22, r1
     c0c:	71 05       	cpc	r23, r1
     c0e:	39 f4       	brne	.+14     	; 0xc1e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c10:	40 91 e8 00 	lds	r20, 0x00E8
     c14:	4e 77       	andi	r20, 0x7E	; 126
     c16:	40 93 e8 00 	sts	0x00E8, r20
     c1a:	01 c0       	rjmp	.+2      	; 0xc1e <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     c1c:	ba 01       	movw	r22, r20
     c1e:	fc 01       	movw	r30, r24
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	33 c0       	rjmp	.+102    	; 0xc8a <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c24:	80 91 d3 01 	lds	r24, 0x01D3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c28:	88 23       	and	r24, r24
     c2a:	09 f4       	brne	.+2      	; 0xc2e <Endpoint_Write_Control_Stream_LE+0x32>
     c2c:	42 c0       	rjmp	.+132    	; 0xcb2 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c2e:	85 30       	cpi	r24, 0x05	; 5
     c30:	09 f4       	brne	.+2      	; 0xc34 <Endpoint_Write_Control_Stream_LE+0x38>
     c32:	41 c0       	rjmp	.+130    	; 0xcb6 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c34:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     c38:	83 fd       	sbrc	r24, 3
     c3a:	39 c0       	rjmp	.+114    	; 0xcae <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     c40:	82 fd       	sbrc	r24, 2
     c42:	2f c0       	rjmp	.+94     	; 0xca2 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c44:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     c48:	80 ff       	sbrs	r24, 0
     c4a:	1f c0       	rjmp	.+62     	; 0xc8a <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     c4c:	90 91 f3 00 	lds	r25, 0x00F3
     c50:	80 91 f2 00 	lds	r24, 0x00F2
     c54:	39 2f       	mov	r19, r25
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	a9 01       	movw	r20, r18
     c5a:	48 2b       	or	r20, r24
     c5c:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c5e:	06 c0       	rjmp	.+12     	; 0xc6c <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     c60:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     c62:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     c66:	61 50       	subi	r22, 0x01	; 1
     c68:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     c6a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     c6c:	61 15       	cp	r22, r1
     c6e:	71 05       	cpc	r23, r1
     c70:	19 f0       	breq	.+6      	; 0xc78 <Endpoint_Write_Control_Stream_LE+0x7c>
     c72:	88 30       	cpi	r24, 0x08	; 8
     c74:	91 05       	cpc	r25, r1
     c76:	a0 f3       	brcs	.-24     	; 0xc60 <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	08 97       	sbiw	r24, 0x08	; 8
     c7c:	09 f0       	breq	.+2      	; 0xc80 <Endpoint_Write_Control_Stream_LE+0x84>
     c7e:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c80:	80 91 e8 00 	lds	r24, 0x00E8
     c84:	8e 77       	andi	r24, 0x7E	; 126
     c86:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     c8a:	61 15       	cp	r22, r1
     c8c:	71 05       	cpc	r23, r1
     c8e:	51 f6       	brne	.-108    	; 0xc24 <Endpoint_Write_Control_Stream_LE+0x28>
     c90:	41 11       	cpse	r20, r1
     c92:	c8 cf       	rjmp	.-112    	; 0xc24 <Endpoint_Write_Control_Stream_LE+0x28>
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c96:	80 91 d3 01 	lds	r24, 0x01D3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c9a:	88 23       	and	r24, r24
     c9c:	51 f0       	breq	.+20     	; 0xcb2 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c9e:	85 30       	cpi	r24, 0x05	; 5
     ca0:	51 f0       	breq	.+20     	; 0xcb6 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ca2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ca6:	82 ff       	sbrs	r24, 2
     ca8:	f6 cf       	rjmp	.-20     	; 0xc96 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     cb2:	82 e0       	ldi	r24, 0x02	; 2
     cb4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     cb6:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     cb8:	08 95       	ret

00000cba <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     cba:	40 91 da 01 	lds	r20, 0x01DA
     cbe:	50 91 db 01 	lds	r21, 0x01DB
     cc2:	46 17       	cp	r20, r22
     cc4:	57 07       	cpc	r21, r23
     cc6:	48 f0       	brcs	.+18     	; 0xcda <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     cc8:	61 15       	cp	r22, r1
     cca:	71 05       	cpc	r23, r1
     ccc:	39 f4       	brne	.+14     	; 0xcdc <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     cce:	40 91 e8 00 	lds	r20, 0x00E8
     cd2:	4e 77       	andi	r20, 0x7E	; 126
     cd4:	40 93 e8 00 	sts	0x00E8, r20
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     cda:	ba 01       	movw	r22, r20
     cdc:	fc 01       	movw	r30, r24
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	34 c0       	rjmp	.+104    	; 0xd4a <Endpoint_Write_Control_PStream_LE+0x90>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ce2:	80 91 d3 01 	lds	r24, 0x01D3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ce6:	88 23       	and	r24, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <Endpoint_Write_Control_PStream_LE+0x32>
     cea:	43 c0       	rjmp	.+134    	; 0xd72 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     cec:	85 30       	cpi	r24, 0x05	; 5
     cee:	09 f4       	brne	.+2      	; 0xcf2 <Endpoint_Write_Control_PStream_LE+0x38>
     cf0:	42 c0       	rjmp	.+132    	; 0xd76 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     cf2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     cf6:	83 fd       	sbrc	r24, 3
     cf8:	3a c0       	rjmp	.+116    	; 0xd6e <Endpoint_Write_Control_PStream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     cfe:	82 fd       	sbrc	r24, 2
     d00:	30 c0       	rjmp	.+96     	; 0xd62 <Endpoint_Write_Control_PStream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d02:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     d06:	80 ff       	sbrs	r24, 0
     d08:	20 c0       	rjmp	.+64     	; 0xd4a <Endpoint_Write_Control_PStream_LE+0x90>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     d0a:	90 91 f3 00 	lds	r25, 0x00F3
     d0e:	80 91 f2 00 	lds	r24, 0x00F2
     d12:	39 2f       	mov	r19, r25
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	a9 01       	movw	r20, r18
     d18:	48 2b       	or	r20, r24
     d1a:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <Endpoint_Write_Control_PStream_LE+0x72>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     d1e:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d20:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     d24:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     d26:	61 50       	subi	r22, 0x01	; 1
     d28:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     d2a:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     d2c:	61 15       	cp	r22, r1
     d2e:	71 05       	cpc	r23, r1
     d30:	19 f0       	breq	.+6      	; 0xd38 <Endpoint_Write_Control_PStream_LE+0x7e>
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	91 05       	cpc	r25, r1
     d36:	98 f3       	brcs	.-26     	; 0xd1e <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     d38:	41 e0       	ldi	r20, 0x01	; 1
     d3a:	08 97       	sbiw	r24, 0x08	; 8
     d3c:	09 f0       	breq	.+2      	; 0xd40 <Endpoint_Write_Control_PStream_LE+0x86>
     d3e:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d40:	80 91 e8 00 	lds	r24, 0x00E8
     d44:	8e 77       	andi	r24, 0x7E	; 126
     d46:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     d4a:	61 15       	cp	r22, r1
     d4c:	71 05       	cpc	r23, r1
     d4e:	49 f6       	brne	.-110    	; 0xce2 <Endpoint_Write_Control_PStream_LE+0x28>
     d50:	41 11       	cpse	r20, r1
     d52:	c7 cf       	rjmp	.-114    	; 0xce2 <Endpoint_Write_Control_PStream_LE+0x28>
     d54:	06 c0       	rjmp	.+12     	; 0xd62 <Endpoint_Write_Control_PStream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d56:	80 91 d3 01 	lds	r24, 0x01D3

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d5a:	88 23       	and	r24, r24
     d5c:	51 f0       	breq	.+20     	; 0xd72 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d5e:	85 30       	cpi	r24, 0x05	; 5
     d60:	51 f0       	breq	.+20     	; 0xd76 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d62:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     d66:	82 ff       	sbrs	r24, 2
     d68:	f6 cf       	rjmp	.-20     	; 0xd56 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d72:	82 e0       	ldi	r24, 0x02	; 2
     d74:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     d76:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     d78:	08 95       	ret

00000d7a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	ac 97       	sbiw	r28, 0x2c	; 44
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     d96:	e4 ed       	ldi	r30, 0xD4	; 212
     d98:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     d9a:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     d9e:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     da0:	21 e0       	ldi	r18, 0x01	; 1
     da2:	ec 3d       	cpi	r30, 0xDC	; 220
     da4:	f2 07       	cpc	r31, r18
     da6:	c9 f7       	brne	.-14     	; 0xd9a <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     da8:	44 dd       	rcall	.-1400   	; 0x832 <EVENT_USB_Device_ControlRequest>
     daa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dae:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     db0:	31 c1       	rjmp	.+610    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     db2:	80 91 d4 01 	lds	r24, 0x01D4
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     db6:	90 91 d5 01 	lds	r25, 0x01D5

		switch (USB_ControlRequest.bRequest)
     dba:	95 30       	cpi	r25, 0x05	; 5
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <USB_Device_ProcessControlRequest+0x46>
     dbe:	87 c0       	rjmp	.+270    	; 0xece <USB_Device_ProcessControlRequest+0x154>
     dc0:	38 f4       	brcc	.+14     	; 0xdd0 <USB_Device_ProcessControlRequest+0x56>
     dc2:	91 30       	cpi	r25, 0x01	; 1
     dc4:	b1 f1       	breq	.+108    	; 0xe32 <USB_Device_ProcessControlRequest+0xb8>
     dc6:	70 f0       	brcs	.+28     	; 0xde4 <USB_Device_ProcessControlRequest+0x6a>
     dc8:	93 30       	cpi	r25, 0x03	; 3
     dca:	09 f0       	breq	.+2      	; 0xdce <USB_Device_ProcessControlRequest+0x54>
     dcc:	23 c1       	rjmp	.+582    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     dce:	31 c0       	rjmp	.+98     	; 0xe32 <USB_Device_ProcessControlRequest+0xb8>
     dd0:	98 30       	cpi	r25, 0x08	; 8
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <USB_Device_ProcessControlRequest+0x5c>
     dd4:	f4 c0       	rjmp	.+488    	; 0xfbe <USB_Device_ProcessControlRequest+0x244>
     dd6:	99 30       	cpi	r25, 0x09	; 9
     dd8:	09 f4       	brne	.+2      	; 0xddc <USB_Device_ProcessControlRequest+0x62>
     dda:	00 c1       	rjmp	.+512    	; 0xfdc <USB_Device_ProcessControlRequest+0x262>
     ddc:	96 30       	cpi	r25, 0x06	; 6
     dde:	09 f0       	breq	.+2      	; 0xde2 <USB_Device_ProcessControlRequest+0x68>
     de0:	19 c1       	rjmp	.+562    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     de2:	9c c0       	rjmp	.+312    	; 0xf1c <USB_Device_ProcessControlRequest+0x1a2>
     de4:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     de6:	21 f0       	breq	.+8      	; 0xdf0 <USB_Device_ProcessControlRequest+0x76>
     de8:	82 38       	cpi	r24, 0x82	; 130
     dea:	09 f0       	breq	.+2      	; 0xdee <USB_Device_ProcessControlRequest+0x74>
     dec:	13 c1       	rjmp	.+550    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     dee:	08 c0       	rjmp	.+16     	; 0xe00 <USB_Device_ProcessControlRequest+0x86>
     df0:	80 91 d0 01 	lds	r24, 0x01D0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     df4:	90 91 d1 01 	lds	r25, 0x01D1
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     df8:	99 23       	and	r25, r25
     dfa:	89 f0       	breq	.+34     	; 0xe1e <USB_Device_ProcessControlRequest+0xa4>
     dfc:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     dfe:	0f c0       	rjmp	.+30     	; 0xe1e <USB_Device_ProcessControlRequest+0xa4>
     e00:	80 91 d8 01 	lds	r24, 0x01D8
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e04:	90 91 d9 01 	lds	r25, 0x01D9
     e08:	8f 70       	andi	r24, 0x0F	; 15
     e0a:	99 27       	eor	r25, r25
     e0c:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e10:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e14:	85 fb       	bst	r24, 5
     e16:	88 27       	eor	r24, r24
     e18:	80 f9       	bld	r24, 0
     e1a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e1e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e22:	97 7f       	andi	r25, 0xF7	; 247
     e24:	90 93 e8 00 	sts	0x00E8, r25
     e28:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e2c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     e30:	d1 c0       	rjmp	.+418    	; 0xfd4 <USB_Device_ProcessControlRequest+0x25a>
     e32:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e34:	19 f0       	breq	.+6      	; 0xe3c <USB_Device_ProcessControlRequest+0xc2>
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	09 f0       	breq	.+2      	; 0xe3c <USB_Device_ProcessControlRequest+0xc2>
     e3a:	ec c0       	rjmp	.+472    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     e3c:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e3e:	21 f0       	breq	.+8      	; 0xe48 <USB_Device_ProcessControlRequest+0xce>
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	09 f0       	breq	.+2      	; 0xe46 <USB_Device_ProcessControlRequest+0xcc>
     e44:	e7 c0       	rjmp	.+462    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     e46:	0b c0       	rjmp	.+22     	; 0xe5e <USB_Device_ProcessControlRequest+0xe4>
     e48:	80 91 d6 01 	lds	r24, 0x01D6
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	09 f0       	breq	.+2      	; 0xe52 <USB_Device_ProcessControlRequest+0xd8>
     e50:	e1 c0       	rjmp	.+450    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     e52:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     e54:	09 f0       	breq	.+2      	; 0xe58 <USB_Device_ProcessControlRequest+0xde>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	80 93 d1 01 	sts	0x01D1, r24
     e5c:	2f c0       	rjmp	.+94     	; 0xebc <USB_Device_ProcessControlRequest+0x142>
     e5e:	80 91 d6 01 	lds	r24, 0x01D6

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     e62:	81 11       	cpse	r24, r1
     e64:	2b c0       	rjmp	.+86     	; 0xebc <USB_Device_ProcessControlRequest+0x142>
     e66:	80 91 d8 01 	lds	r24, 0x01D8
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e6a:	90 91 d9 01 	lds	r25, 0x01D9
     e6e:	8f 70       	andi	r24, 0x0F	; 15
     e70:	99 27       	eor	r25, r25
     e72:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     e74:	09 f4       	brne	.+2      	; 0xe78 <USB_Device_ProcessControlRequest+0xfe>
     e76:	ce c0       	rjmp	.+412    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     e78:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e7c:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e80:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     e82:	1c c0       	rjmp	.+56     	; 0xebc <USB_Device_ProcessControlRequest+0x142>
     e84:	20 91 d5 01 	lds	r18, 0x01D5
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     e88:	23 30       	cpi	r18, 0x03	; 3
     e8a:	21 f4       	brne	.+8      	; 0xe94 <USB_Device_ProcessControlRequest+0x11a>
     e8c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	12 c0       	rjmp	.+36     	; 0xeb8 <USB_Device_ProcessControlRequest+0x13e>
     e94:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     e98:	90 61       	ori	r25, 0x10	; 16
     e9a:	90 93 eb 00 	sts	0x00EB, r25
     e9e:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <USB_Device_ProcessControlRequest+0x12c>
     ea4:	22 0f       	add	r18, r18
     ea6:	8a 95       	dec	r24
     ea8:	ea f7       	brpl	.-6      	; 0xea4 <USB_Device_ProcessControlRequest+0x12a>
     eaa:	20 93 ea 00 	sts	0x00EA, r18
     eae:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     eb2:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     eb6:	88 60       	ori	r24, 0x08	; 8
     eb8:	80 93 eb 00 	sts	0x00EB, r24
     ebc:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ec0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec4:	87 7f       	andi	r24, 0xF7	; 247
     ec6:	80 93 e8 00 	sts	0x00E8, r24
     eca:	29 dd       	rcall	.-1454   	; 0x91e <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ecc:	a3 c0       	rjmp	.+326    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     ece:	81 11       	cpse	r24, r1
     ed0:	a1 c0       	rjmp	.+322    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ed2:	00 91 d6 01 	lds	r16, 0x01D6
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     ed6:	10 91 d7 01 	lds	r17, 0x01D7
     eda:	0f 77       	andi	r16, 0x7F	; 127
     edc:	11 27       	eor	r17, r17
     ede:	e0 2e       	mov	r14, r16
     ee0:	ff b6       	in	r15, 0x3f	; 63
     ee2:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ee4:	80 91 e8 00 	lds	r24, 0x00E8
     ee8:	87 7f       	andi	r24, 0xF7	; 247
     eea:	80 93 e8 00 	sts	0x00E8, r24
     eee:	17 dd       	rcall	.-1490   	; 0x91e <Endpoint_ClearStatusStage>
     ef0:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ef4:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ef6:	fc cf       	rjmp	.-8      	; 0xef0 <USB_Device_ProcessControlRequest+0x176>
     ef8:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     efc:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     efe:	80 2b       	or	r24, r16
     f00:	80 93 e3 00 	sts	0x00E3, r24
     f04:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
     f06:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     f0a:	ee 20       	and	r14, r14
     f0c:	11 f0       	breq	.+4      	; 0xf12 <USB_Device_ProcessControlRequest+0x198>
     f0e:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <USB_Device_ProcessControlRequest+0x19a>
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	80 93 d3 01 	sts	0x01D3, r24
     f18:	ff be       	out	0x3f, r15	; 63
     f1a:	7c c0       	rjmp	.+248    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     f1c:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f1e:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     f20:	08 f0       	brcs	.+2      	; 0xf24 <USB_Device_ProcessControlRequest+0x1aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f22:	78 c0       	rjmp	.+240    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     f24:	80 91 d6 01 	lds	r24, 0x01D6
     f28:	90 91 d7 01 	lds	r25, 0x01D7
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     f2c:	8c 3d       	cpi	r24, 0xDC	; 220
     f2e:	23 e0       	ldi	r18, 0x03	; 3
     f30:	92 07       	cpc	r25, r18
     f32:	71 f5       	brne	.+92     	; 0xf90 <USB_Device_ProcessControlRequest+0x216>
     f34:	83 e0       	ldi	r24, 0x03	; 3
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f3e:	f8 94       	cli
     f40:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f42:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f44:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     f46:	3e e0       	ldi	r19, 0x0E	; 14
     f48:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f4a:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     f4c:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     f4e:	50 93 57 00 	sts	0x0057, r21
     f52:	e4 91       	lpm	r30, Z+
     f54:	20 ff       	sbrs	r18, 0
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <USB_Device_ProcessControlRequest+0x1e4>
     f58:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     f5a:	ef 70       	andi	r30, 0x0F	; 15
     f5c:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     f5e:	ef 70       	andi	r30, 0x0F	; 15
     f60:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     f62:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     f64:	ea 30       	cpi	r30, 0x0A	; 10
     f66:	10 f0       	brcs	.+4      	; 0xf6c <USB_Device_ProcessControlRequest+0x1f2>
     f68:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <USB_Device_ProcessControlRequest+0x1f4>
     f6c:	c0 96       	adiw	r24, 0x30	; 48
     f6e:	8d 93       	st	X+, r24
     f70:	9d 93       	st	X+, r25
     f72:	2f 5f       	subi	r18, 0xFF	; 255
     f74:	24 31       	cpi	r18, 0x14	; 20
     f76:	49 f7       	brne	.-46     	; 0xf4a <USB_Device_ProcessControlRequest+0x1d0>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f78:	4f bf       	out	0x3f, r20	; 63
     f7a:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f7e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f80:	80 93 e8 00 	sts	0x00E8, r24
     f84:	6a e2       	ldi	r22, 0x2A	; 42
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	37 de       	rcall	.-914    	; 0xbfc <Endpoint_Write_Control_Stream_LE>
     f8e:	11 c0       	rjmp	.+34     	; 0xfb2 <USB_Device_ProcessControlRequest+0x238>
     f90:	ae 01       	movw	r20, r28
     f92:	45 5d       	subi	r20, 0xD5	; 213
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	60 91 d8 01 	lds	r22, 0x01D8
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     f9a:	4e dc       	rcall	.-1892   	; 0x838 <CALLBACK_USB_GetDescriptor>
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	d1 f1       	breq	.+116    	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     fa0:	20 91 e8 00 	lds	r18, 0x00E8
     fa4:	27 7f       	andi	r18, 0xF7	; 247
     fa6:	20 93 e8 00 	sts	0x00E8, r18
     faa:	bc 01       	movw	r22, r24
     fac:	8b a5       	ldd	r24, Y+43	; 0x2b
     fae:	9c a5       	ldd	r25, Y+44	; 0x2c
     fb0:	84 de       	rcall	.-760    	; 0xcba <Endpoint_Write_Control_PStream_LE>
     fb2:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     fb6:	8b 77       	andi	r24, 0x7B	; 123
     fb8:	80 93 e8 00 	sts	0x00E8, r24
     fbc:	2b c0       	rjmp	.+86     	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fbe:	80 38       	cpi	r24, 0x80	; 128
     fc0:	49 f5       	brne	.+82     	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
     fc2:	80 91 e8 00 	lds	r24, 0x00E8
     fc6:	87 7f       	andi	r24, 0xF7	; 247
     fc8:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     fcc:	80 91 cf 01 	lds	r24, 0x01CF
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd0:	80 93 f1 00 	sts	0x00F1, r24
     fd4:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     fd8:	8e 77       	andi	r24, 0x7E	; 126
     fda:	75 cf       	rjmp	.-278    	; 0xec6 <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fdc:	81 11       	cpse	r24, r1
     fde:	1a c0       	rjmp	.+52     	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fe0:	90 91 d6 01 	lds	r25, 0x01D6
     fe4:	92 30       	cpi	r25, 0x02	; 2
     fe6:	b0 f4       	brcc	.+44     	; 0x1014 <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fe8:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	80 93 e8 00 	sts	0x00E8, r24
     ff2:	90 93 cf 01 	sts	0x01CF, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ff6:	93 dc       	rcall	.-1754   	; 0x91e <Endpoint_ClearStatusStage>
     ff8:	80 91 cf 01 	lds	r24, 0x01CF
     ffc:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <USB_Device_ProcessControlRequest+0x28e>
    1000:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    1004:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
    1006:	02 c0       	rjmp	.+4      	; 0x100c <USB_Device_ProcessControlRequest+0x292>
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	01 c0       	rjmp	.+2      	; 0x100e <USB_Device_ProcessControlRequest+0x294>
    100c:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    100e:	80 93 d3 01 	sts	0x01D3, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1012:	0c dc       	rcall	.-2024   	; 0x82c <EVENT_USB_Device_ConfigurationChanged>
    1014:	80 91 e8 00 	lds	r24, 0x00E8
    1018:	83 ff       	sbrs	r24, 3
    101a:	0a c0       	rjmp	.+20     	; 0x1030 <USB_Device_ProcessControlRequest+0x2b6>
    101c:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    1020:	80 62       	ori	r24, 0x20	; 32
    1022:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1026:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    102a:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    102c:	80 93 e8 00 	sts	0x00E8, r24
    1030:	ac 96       	adiw	r28, 0x2c	; 44
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	08 95       	ret

0000104a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    104a:	08 95       	ret

0000104c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    104c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    104e:	80 91 d3 01 	lds	r24, 0x01D3
    1052:	88 23       	and	r24, r24
    1054:	59 f0       	breq	.+22     	; 0x106c <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    1056:	c0 91 e9 00 	lds	r28, 0x00E9
    105a:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    105c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1060:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    1064:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
    1066:	89 de       	rcall	.-750    	; 0xd7a <USB_Device_ProcessControlRequest>
    1068:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    106c:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    106e:	08 95       	ret

00001070 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1070:	1f 93       	push	r17
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    1078:	0d 96       	adiw	r24, 0x0d	; 13
    107a:	fc 01       	movw	r30, r24
    107c:	8b e0       	ldi	r24, 0x0B	; 11
    107e:	df 01       	movw	r26, r30
    1080:	1d 92       	st	X+, r1
    1082:	8a 95       	dec	r24
    1084:	e9 f7       	brne	.-6      	; 0x1080 <CDC_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1086:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	18 13       	cpse	r17, r24
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    108e:	2a 81       	ldd	r18, Y+2	; 0x02
    1090:	3b 81       	ldd	r19, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    1092:	4c 81       	ldd	r20, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    1094:	80 e8       	ldi	r24, 0x80	; 128
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <CDC_Device_ConfigureEndpoints+0x36>
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	18 13       	cpse	r17, r24
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    109e:	2e 81       	ldd	r18, Y+6	; 0x06
    10a0:	3f 81       	ldd	r19, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    10a2:	48 85       	ldd	r20, Y+8	; 0x08
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
    10a4:	80 e0       	ldi	r24, 0x00	; 0
			Type         = EP_TYPE_BULK;
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	0d c0       	rjmp	.+26     	; 0x10c4 <CDC_Device_ConfigureEndpoints+0x54>
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    10aa:	89 85       	ldd	r24, Y+9	; 0x09
    10ac:	18 17       	cp	r17, r24
    10ae:	29 f0       	breq	.+10     	; 0x10ba <CDC_Device_ConfigureEndpoints+0x4a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    10b0:	1f 5f       	subi	r17, 0xFF	; 255
    10b2:	17 30       	cpi	r17, 0x07	; 7
    10b4:	49 f7       	brne	.-46     	; 0x1088 <CDC_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	25 c0       	rjmp	.+74     	; 0x1104 <CDC_Device_ConfigureEndpoints+0x94>
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    10ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    10bc:	3b 85       	ldd	r19, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    10be:	4c 85       	ldd	r20, Y+12	; 0x0c
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
    10c0:	80 e8       	ldi	r24, 0x80	; 128
			Type         = EP_TYPE_INTERRUPT;
    10c2:	93 e0       	ldi	r25, 0x03	; 3
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    10c4:	44 23       	and	r20, r20
    10c6:	11 f0       	breq	.+4      	; 0x10cc <CDC_Device_ConfigureEndpoints+0x5c>
    10c8:	44 e0       	ldi	r20, 0x04	; 4
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <CDC_Device_ConfigureEndpoints+0x5e>
    10cc:	40 e0       	ldi	r20, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
    10ce:	e8 e0       	ldi	r30, 0x08	; 8
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <CDC_Device_ConfigureEndpoints+0x6c>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    10d6:	5f 5f       	subi	r21, 0xFF	; 255
					CheckBytes <<= 1;
    10d8:	ee 0f       	add	r30, r30
    10da:	ff 1f       	adc	r31, r31
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    10dc:	e2 17       	cp	r30, r18
    10de:	f3 07       	cpc	r31, r19
    10e0:	d0 f3       	brcs	.-12     	; 0x10d6 <CDC_Device_ConfigureEndpoints+0x66>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    10e2:	42 60       	ori	r20, 0x02	; 2
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    10e4:	52 95       	swap	r21
    10e6:	50 7f       	andi	r21, 0xF0	; 240
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    10e8:	45 2b       	or	r20, r21
    10ea:	b0 e4       	ldi	r27, 0x40	; 64
    10ec:	9b 9f       	mul	r25, r27
    10ee:	90 01       	movw	r18, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	81 11       	cpse	r24, r1
    10f6:	01 c0       	rjmp	.+2      	; 0x10fa <CDC_Device_ConfigureEndpoints+0x8a>
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	62 2b       	or	r22, r18
    10fc:	81 2f       	mov	r24, r17
    10fe:	d9 db       	rcall	.-2126   	; 0x8b2 <Endpoint_ConfigureEndpoint_Prv>
    1100:	81 11       	cpse	r24, r1
    1102:	d6 cf       	rjmp	.-84     	; 0x10b0 <CDC_Device_ConfigureEndpoints+0x40>
    1104:	df 91       	pop	r29
			return false;
		}
	}

	return true;
}
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	08 95       	ret

0000110c <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    110c:	cf 93       	push	r28
    110e:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1110:	20 91 d3 01 	lds	r18, 0x01D3
    1114:	24 30       	cpi	r18, 0x04	; 4
    1116:	e9 f4       	brne	.+58     	; 0x1152 <CDC_Device_SendByte+0x46>
    1118:	fc 01       	movw	r30, r24
    111a:	41 89       	ldd	r20, Z+17	; 0x11
    111c:	52 89       	ldd	r21, Z+18	; 0x12
    111e:	63 89       	ldd	r22, Z+19	; 0x13
    1120:	74 89       	ldd	r23, Z+20	; 0x14
    1122:	45 2b       	or	r20, r21
    1124:	46 2b       	or	r20, r22
    1126:	47 2b       	or	r20, r23
    1128:	a1 f0       	breq	.+40     	; 0x1152 <CDC_Device_SendByte+0x46>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    112a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    112c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1130:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    1134:	85 ff       	sbrs	r24, 5
    1136:	04 c0       	rjmp	.+8      	; 0x1140 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1138:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	0a c0       	rjmp	.+20     	; 0x1154 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1140:	80 91 e8 00 	lds	r24, 0x00E8
    1144:	8e 77       	andi	r24, 0x7E	; 126
    1146:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    114a:	0a dc       	rcall	.-2028   	; 0x960 <Endpoint_WaitUntilReady>
    114c:	88 23       	and	r24, r24
    114e:	a1 f3       	breq	.-24     	; 0x1138 <CDC_Device_SendByte+0x2c>
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <CDC_Device_SendByte+0x48>
    1152:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1154:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    1156:	08 95       	ret

00001158 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    1158:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    115a:	68 2f       	mov	r22, r24
    115c:	84 85       	ldd	r24, Z+12	; 0x0c
    115e:	95 85       	ldd	r25, Z+13	; 0x0d
    1160:	d5 df       	rcall	.-86     	; 0x110c <CDC_Device_SendByte>
    1162:	88 23       	and	r24, r24
    1164:	19 f0       	breq	.+6      	; 0x116c <CDC_Device_putchar+0x14>
    1166:	2f ef       	ldi	r18, 0xFF	; 255
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <CDC_Device_putchar+0x18>
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	c9 01       	movw	r24, r18
}
    1172:	08 95       	ret

00001174 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1174:	20 91 d3 01 	lds	r18, 0x01D3
    1178:	24 30       	cpi	r18, 0x04	; 4
    117a:	49 f5       	brne	.+82     	; 0x11ce <CDC_Device_Flush+0x5a>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    117c:	fc 01       	movw	r30, r24
    117e:	41 89       	ldd	r20, Z+17	; 0x11
    1180:	52 89       	ldd	r21, Z+18	; 0x12
    1182:	63 89       	ldd	r22, Z+19	; 0x13
    1184:	74 89       	ldd	r23, Z+20	; 0x14
    1186:	45 2b       	or	r20, r21
    1188:	46 2b       	or	r20, r22
    118a:	47 2b       	or	r20, r23
    118c:	01 f1       	breq	.+64     	; 0x11ce <CDC_Device_Flush+0x5a>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    118e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1190:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1194:	30 91 f3 00 	lds	r19, 0x00F3
    1198:	20 91 f2 00 	lds	r18, 0x00F2
    119c:	93 2f       	mov	r25, r19
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	82 2b       	or	r24, r18

	if (!(Endpoint_BytesInEndpoint()))
    11a2:	89 2b       	or	r24, r25
    11a4:	11 f4       	brne	.+4      	; 0x11aa <CDC_Device_Flush+0x36>
	  return ENDPOINT_READYWAIT_NoError;
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11aa:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11ae:	80 91 e8 00 	lds	r24, 0x00E8
    11b2:	8e 77       	andi	r24, 0x7E	; 126
    11b4:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    11b8:	95 fd       	sbrc	r25, 5
    11ba:	f5 cf       	rjmp	.-22     	; 0x11a6 <CDC_Device_Flush+0x32>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    11bc:	d1 db       	rcall	.-2142   	; 0x960 <Endpoint_WaitUntilReady>
    11be:	81 11       	cpse	r24, r1
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <CDC_Device_Flush+0x5c>
    11c2:	90 91 e8 00 	lds	r25, 0x00E8
    11c6:	9e 77       	andi	r25, 0x7E	; 126
    11c8:	90 93 e8 00 	sts	0x00E8, r25
    11cc:	08 95       	ret
    11ce:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    11d0:	08 95       	ret

000011d2 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    11d2:	20 91 d3 01 	lds	r18, 0x01D3
    11d6:	24 30       	cpi	r18, 0x04	; 4
    11d8:	51 f4       	brne	.+20     	; 0x11ee <CDC_Device_USBTask+0x1c>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11da:	fc 01       	movw	r30, r24
    11dc:	41 89       	ldd	r20, Z+17	; 0x11
    11de:	52 89       	ldd	r21, Z+18	; 0x12
    11e0:	63 89       	ldd	r22, Z+19	; 0x13
    11e2:	74 89       	ldd	r23, Z+20	; 0x14
    11e4:	45 2b       	or	r20, r21
    11e6:	46 2b       	or	r20, r22
    11e8:	47 2b       	or	r20, r23
    11ea:	09 f0       	breq	.+2      	; 0x11ee <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    11ec:	c3 cf       	rjmp	.-122    	; 0x1174 <CDC_Device_Flush>
    11ee:	08 95       	ret

000011f0 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11f0:	20 91 d3 01 	lds	r18, 0x01D3
    11f4:	24 30       	cpi	r18, 0x04	; 4
    11f6:	19 f0       	breq	.+6      	; 0x11fe <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    11f8:	2f ef       	ldi	r18, 0xFF	; 255
    11fa:	3f ef       	ldi	r19, 0xFF	; 255
    11fc:	2d c0       	rjmp	.+90     	; 0x1258 <CDC_Device_ReceiveByte+0x68>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    11fe:	fc 01       	movw	r30, r24
    1200:	41 89       	ldd	r20, Z+17	; 0x11
    1202:	52 89       	ldd	r21, Z+18	; 0x12
    1204:	63 89       	ldd	r22, Z+19	; 0x13
    1206:	74 89       	ldd	r23, Z+20	; 0x14
    1208:	45 2b       	or	r20, r21
    120a:	46 2b       	or	r20, r22
    120c:	47 2b       	or	r20, r23
    120e:	a1 f3       	breq	.-24     	; 0x11f8 <CDC_Device_ReceiveByte+0x8>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    1210:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1212:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1216:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    121a:	82 ff       	sbrs	r24, 2
    121c:	ed cf       	rjmp	.-38     	; 0x11f8 <CDC_Device_ReceiveByte+0x8>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    121e:	30 91 f3 00 	lds	r19, 0x00F3
    1222:	20 91 f2 00 	lds	r18, 0x00F2
    1226:	93 2f       	mov	r25, r19
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	82 2b       	or	r24, r18
	{
		if (Endpoint_BytesInEndpoint())
    122c:	89 2b       	or	r24, r25
    122e:	21 f0       	breq	.+8      	; 0x1238 <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1230:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1238:	2f ef       	ldi	r18, 0xFF	; 255
    123a:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    123c:	50 91 f3 00 	lds	r21, 0x00F3
    1240:	40 91 f2 00 	lds	r20, 0x00F2
    1244:	95 2f       	mov	r25, r21
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	84 2b       	or	r24, r20
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    124a:	89 2b       	or	r24, r25
    124c:	29 f4       	brne	.+10     	; 0x1258 <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    124e:	80 91 e8 00 	lds	r24, 0x00E8
    1252:	8b 77       	andi	r24, 0x7B	; 123
    1254:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1258:	c9 01       	movw	r24, r18
    125a:	08 95       	ret

0000125c <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    125c:	fc 01       	movw	r30, r24
    125e:	84 85       	ldd	r24, Z+12	; 0x0c
    1260:	95 85       	ldd	r25, Z+13	; 0x0d
    1262:	c6 df       	rcall	.-116    	; 0x11f0 <CDC_Device_ReceiveByte>
    1264:	9c 01       	movw	r18, r24
    1266:	97 ff       	sbrs	r25, 7

	if (ReceivedByte < 0)
    1268:	02 c0       	rjmp	.+4      	; 0x126e <CDC_Device_getchar+0x12>
    126a:	2e ef       	ldi	r18, 0xFE	; 254
	  return _FDEV_EOF;
    126c:	3f ef       	ldi	r19, 0xFF	; 255
    126e:	c9 01       	movw	r24, r18

	return ReceivedByte;
}
    1270:	08 95       	ret

00001272 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    1272:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1274:	2e e0       	ldi	r18, 0x0E	; 14
    1276:	db 01       	movw	r26, r22
    1278:	1d 92       	st	X+, r1
    127a:	2a 95       	dec	r18
    127c:	e9 f7       	brne	.-6      	; 0x1278 <CDC_Device_CreateStream+0x6>
    127e:	23 e0       	ldi	r18, 0x03	; 3
    1280:	23 83       	std	Z+3, r18	; 0x03
    1282:	2c ea       	ldi	r18, 0xAC	; 172
    1284:	38 e0       	ldi	r19, 0x08	; 8
    1286:	31 87       	std	Z+9, r19	; 0x09
    1288:	20 87       	std	Z+8, r18	; 0x08
    128a:	2e e2       	ldi	r18, 0x2E	; 46
    128c:	39 e0       	ldi	r19, 0x09	; 9
    128e:	33 87       	std	Z+11, r19	; 0x0b
    1290:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1292:	95 87       	std	Z+13, r25	; 0x0d
    1294:	84 87       	std	Z+12, r24	; 0x0c
    1296:	08 95       	ret

00001298 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1298:	08 95       	ret

0000129a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    12a4:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    12a8:	83 ff       	sbrs	r24, 3
    12aa:	a9 c0       	rjmp	.+338    	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    12ac:	88 81       	ld	r24, Y
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	20 91 d8 01 	lds	r18, 0x01D8
    12b4:	30 91 d9 01 	lds	r19, 0x01D9
    12b8:	28 17       	cp	r18, r24
    12ba:	39 07       	cpc	r19, r25
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <CDC_Device_ProcessControlRequest+0x26>
    12be:	9f c0       	rjmp	.+318    	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
	  return;

	switch (USB_ControlRequest.bRequest)
    12c0:	80 91 d5 01 	lds	r24, 0x01D5
    12c4:	81 32       	cpi	r24, 0x21	; 33
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <CDC_Device_ProcessControlRequest+0x46>
    12c8:	20 f4       	brcc	.+8      	; 0x12d2 <CDC_Device_ProcessControlRequest+0x38>
    12ca:	80 32       	cpi	r24, 0x20	; 32
    12cc:	09 f0       	breq	.+2      	; 0x12d0 <CDC_Device_ProcessControlRequest+0x36>
    12ce:	97 c0       	rjmp	.+302    	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <CDC_Device_ProcessControlRequest+0xb6>
    12d2:	82 32       	cpi	r24, 0x22	; 34
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <CDC_Device_ProcessControlRequest+0x3e>
    12d6:	6b c0       	rjmp	.+214    	; 0x13ae <CDC_Device_ProcessControlRequest+0x114>
    12d8:	83 32       	cpi	r24, 0x23	; 35
    12da:	09 f0       	breq	.+2      	; 0x12de <CDC_Device_ProcessControlRequest+0x44>
    12dc:	90 c0       	rjmp	.+288    	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
    12de:	7d c0       	rjmp	.+250    	; 0x13da <CDC_Device_ProcessControlRequest+0x140>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    12e0:	80 91 d4 01 	lds	r24, 0x01D4
    12e4:	81 3a       	cpi	r24, 0xA1	; 161
    12e6:	09 f0       	breq	.+2      	; 0x12ea <CDC_Device_ProcessControlRequest+0x50>
    12e8:	8a c0       	rjmp	.+276    	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12ea:	80 91 e8 00 	lds	r24, 0x00E8
    12ee:	87 7f       	andi	r24, 0xF7	; 247
    12f0:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12f4:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    12f8:	80 ff       	sbrs	r24, 0
    12fa:	fc cf       	rjmp	.-8      	; 0x12f4 <CDC_Device_ProcessControlRequest+0x5a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    12fc:	49 89       	ldd	r20, Y+17	; 0x11
    12fe:	5a 89       	ldd	r21, Y+18	; 0x12
    1300:	6b 89       	ldd	r22, Y+19	; 0x13
    1302:	7c 89       	ldd	r23, Y+20	; 0x14
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1304:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    1308:	05 2f       	mov	r16, r21
    130a:	16 2f       	mov	r17, r22
    130c:	27 2f       	mov	r18, r23
    130e:	33 27       	eor	r19, r19
    1310:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 16);
    1314:	8b 01       	movw	r16, r22
    1316:	22 27       	eor	r18, r18
    1318:	33 27       	eor	r19, r19
    131a:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 24);
    131e:	47 2f       	mov	r20, r23
    1320:	55 27       	eor	r21, r21
    1322:	66 27       	eor	r22, r22
    1324:	77 27       	eor	r23, r23
    1326:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    132a:	8d 89       	ldd	r24, Y+21	; 0x15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    132c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1330:	8e 89       	ldd	r24, Y+22	; 0x16
    1332:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1336:	8f 89       	ldd	r24, Y+23	; 0x17
    1338:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    133c:	80 91 e8 00 	lds	r24, 0x00E8
    1340:	8e 77       	andi	r24, 0x7E	; 126
    1342:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    134e:	e7 ca       	rjmp	.-2610   	; 0x91e <Endpoint_ClearStatusStage>
    1350:	80 91 d4 01 	lds	r24, 0x01D4
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1354:	81 32       	cpi	r24, 0x21	; 33
    1356:	09 f0       	breq	.+2      	; 0x135a <CDC_Device_ProcessControlRequest+0xc0>
    1358:	52 c0       	rjmp	.+164    	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
    135a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    135e:	87 7f       	andi	r24, 0xF7	; 247
    1360:	80 93 e8 00 	sts	0x00E8, r24
    1364:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1368:	82 ff       	sbrs	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()));
    136a:	fc cf       	rjmp	.-8      	; 0x1364 <CDC_Device_ProcessControlRequest+0xca>
    136c:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    1370:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    1374:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1378:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    137c:	39 8b       	std	Y+17, r19	; 0x11

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    137e:	2a 8b       	std	Y+18, r18	; 0x12
    1380:	9b 8b       	std	Y+19, r25	; 0x13
    1382:	8c 8b       	std	Y+20, r24	; 0x14
    1384:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1388:	8d 8b       	std	Y+21, r24	; 0x15
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    138a:	80 91 f1 00 	lds	r24, 0x00F1
    138e:	8e 8b       	std	Y+22, r24	; 0x16
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1390:	80 91 f1 00 	lds	r24, 0x00F1
    1394:	8f 8b       	std	Y+23, r24	; 0x17
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1396:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    139a:	8b 77       	andi	r24, 0x7B	; 123
    139c:	80 93 e8 00 	sts	0x00E8, r24
    13a0:	be da       	rcall	.-2692   	; 0x91e <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    13a2:	ce 01       	movw	r24, r28
    13a4:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    13a6:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	75 cf       	rjmp	.-278    	; 0x1298 <CDC_Device_Event_Stub>
    13ae:	80 91 d4 01 	lds	r24, 0x01D4
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    13b2:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    13b4:	21 f5       	brne	.+72     	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
    13b6:	80 91 e8 00 	lds	r24, 0x00E8
    13ba:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    13bc:	80 93 e8 00 	sts	0x00E8, r24
    13c0:	ae da       	rcall	.-2724   	; 0x91e <Endpoint_ClearStatusStage>
    13c2:	80 91 d6 01 	lds	r24, 0x01D6
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    13c6:	90 91 d7 01 	lds	r25, 0x01D7

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    13ca:	9e 87       	std	Y+14, r25	; 0x0e
    13cc:	8d 87       	std	Y+13, r24	; 0x0d
    13ce:	ce 01       	movw	r24, r28
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    13d6:	0f 91       	pop	r16
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    13d8:	5f cf       	rjmp	.-322    	; 0x1298 <CDC_Device_Event_Stub>
    13da:	80 91 d4 01 	lds	r24, 0x01D4
    13de:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    13e0:	71 f4       	brne	.+28     	; 0x13fe <CDC_Device_ProcessControlRequest+0x164>
    13e2:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    13e6:	87 7f       	andi	r24, 0xF7	; 247
    13e8:	80 93 e8 00 	sts	0x00E8, r24
    13ec:	98 da       	rcall	.-2768   	; 0x91e <Endpoint_ClearStatusStage>
    13ee:	60 91 d6 01 	lds	r22, 0x01D6
    13f2:	ce 01       	movw	r24, r28
    13f4:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    13fa:	0f 91       	pop	r16
    13fc:	4d cf       	rjmp	.-358    	; 0x1298 <CDC_Device_Event_Stub>
    13fe:	df 91       	pop	r29
			}

			break;
	}
}
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	08 95       	ret

00001408 <main>:
int main(void)
{
	
	int i = 0;
	int pin = 0;
	initUSBSerial();
    1408:	ff d9       	rcall	.-3074   	; 0x808 <initUSBSerial>
    140a:	40 d8       	rcall	.-3968   	; 0x48c <_Z7initRTCv>
	initRTC();
    140c:	32 d8       	rcall	.-3996   	; 0x472 <_Z11analogSetupv>
    140e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <_Z9setRefVCCv>
 	
	analogSetup();	
    1412:	85 e2       	ldi	r24, 0x25	; 37
	setRefVCC();
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 ed 01 	call	0x3da	; 0x3da <_Z6setPins>
	pin = setPin(37);
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	88 e0       	ldi	r24, 0x08	; 8
    141e:	96 d9       	rcall	.-3284   	; 0x74c <_Z12setDirectioncc>
 	setDirection(8, 1);	
    1420:	e5 d9       	rcall	.-3126   	; 0x7ec <runUSB>
    1422:	0e 94 90 01 	call	0x320	; 0x320 <_Z9fermostatv>
    1426:	fc cf       	rjmp	.-8      	; 0x1420 <main+0x18>

00001428 <__usmulhisi3>:

	while(true)
	{
		runUSB();
    1428:	20 d0       	rcall	.+64     	; 0x146a <__umulhisi3>

0000142a <__usmulhisi3_tail>:
    142a:	b7 ff       	sbrs	r27, 7
	return 0;
}

void loop(void)
{
	fermostat();
    142c:	08 95       	ret
    142e:	82 1b       	sub	r24, r18
    1430:	93 0b       	sbc	r25, r19
    1432:	08 95       	ret

00001434 <__divmodsi4>:
    1434:	05 2e       	mov	r0, r21
    1436:	97 fb       	bst	r25, 7
    1438:	16 f4       	brtc	.+4      	; 0x143e <__divmodsi4+0xa>
    143a:	00 94       	com	r0
    143c:	06 d0       	rcall	.+12     	; 0x144a <__divmodsi4_neg1>
    143e:	57 fd       	sbrc	r21, 7
    1440:	0c d0       	rcall	.+24     	; 0x145a <__divmodsi4_neg2>
    1442:	1f d0       	rcall	.+62     	; 0x1482 <__udivmodsi4>
    1444:	07 fc       	sbrc	r0, 7
    1446:	09 d0       	rcall	.+18     	; 0x145a <__divmodsi4_neg2>
    1448:	7e f4       	brtc	.+30     	; 0x1468 <__divmodsi4_exit>

0000144a <__divmodsi4_neg1>:
    144a:	90 95       	com	r25
    144c:	80 95       	com	r24
    144e:	70 95       	com	r23
    1450:	61 95       	neg	r22
    1452:	7f 4f       	sbci	r23, 0xFF	; 255
    1454:	8f 4f       	sbci	r24, 0xFF	; 255
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	08 95       	ret

0000145a <__divmodsi4_neg2>:
    145a:	50 95       	com	r21
    145c:	40 95       	com	r20
    145e:	30 95       	com	r19
    1460:	21 95       	neg	r18
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	4f 4f       	sbci	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255

00001468 <__divmodsi4_exit>:
    1468:	08 95       	ret

0000146a <__umulhisi3>:
    146a:	a2 9f       	mul	r26, r18
    146c:	b0 01       	movw	r22, r0
    146e:	b3 9f       	mul	r27, r19
    1470:	c0 01       	movw	r24, r0
    1472:	a3 9f       	mul	r26, r19
    1474:	01 d0       	rcall	.+2      	; 0x1478 <__umulhisi3+0xe>
    1476:	b2 9f       	mul	r27, r18
    1478:	70 0d       	add	r23, r0
    147a:	81 1d       	adc	r24, r1
    147c:	11 24       	eor	r1, r1
    147e:	91 1d       	adc	r25, r1
    1480:	08 95       	ret

00001482 <__udivmodsi4>:
    1482:	a1 e2       	ldi	r26, 0x21	; 33
    1484:	1a 2e       	mov	r1, r26
    1486:	aa 1b       	sub	r26, r26
    1488:	bb 1b       	sub	r27, r27
    148a:	fd 01       	movw	r30, r26
    148c:	0d c0       	rjmp	.+26     	; 0x14a8 <__udivmodsi4_ep>

0000148e <__udivmodsi4_loop>:
    148e:	aa 1f       	adc	r26, r26
    1490:	bb 1f       	adc	r27, r27
    1492:	ee 1f       	adc	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	a2 17       	cp	r26, r18
    1498:	b3 07       	cpc	r27, r19
    149a:	e4 07       	cpc	r30, r20
    149c:	f5 07       	cpc	r31, r21
    149e:	20 f0       	brcs	.+8      	; 0x14a8 <__udivmodsi4_ep>
    14a0:	a2 1b       	sub	r26, r18
    14a2:	b3 0b       	sbc	r27, r19
    14a4:	e4 0b       	sbc	r30, r20
    14a6:	f5 0b       	sbc	r31, r21

000014a8 <__udivmodsi4_ep>:
    14a8:	66 1f       	adc	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	1a 94       	dec	r1
    14b2:	69 f7       	brne	.-38     	; 0x148e <__udivmodsi4_loop>
    14b4:	60 95       	com	r22
    14b6:	70 95       	com	r23
    14b8:	80 95       	com	r24
    14ba:	90 95       	com	r25
    14bc:	9b 01       	movw	r18, r22
    14be:	ac 01       	movw	r20, r24
    14c0:	bd 01       	movw	r22, r26
    14c2:	cf 01       	movw	r24, r30
    14c4:	08 95       	ret

000014c6 <fgetc>:
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	ec 01       	movw	r28, r24
    14cc:	3b 81       	ldd	r19, Y+3	; 0x03
    14ce:	30 ff       	sbrs	r19, 0
    14d0:	34 c0       	rjmp	.+104    	; 0x153a <fgetc+0x74>
    14d2:	36 ff       	sbrs	r19, 6
    14d4:	0a c0       	rjmp	.+20     	; 0x14ea <fgetc+0x24>
    14d6:	3f 7b       	andi	r19, 0xBF	; 191
    14d8:	3b 83       	std	Y+3, r19	; 0x03
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	9f 81       	ldd	r25, Y+7	; 0x07
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	9f 83       	std	Y+7, r25	; 0x07
    14e2:	8e 83       	std	Y+6, r24	; 0x06
    14e4:	2a 81       	ldd	r18, Y+2	; 0x02
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	2a c0       	rjmp	.+84     	; 0x153e <fgetc+0x78>
    14ea:	32 ff       	sbrs	r19, 2
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <fgetc+0x46>
    14ee:	e8 81       	ld	r30, Y
    14f0:	f9 81       	ldd	r31, Y+1	; 0x01
    14f2:	80 81       	ld	r24, Z
    14f4:	99 27       	eor	r25, r25
    14f6:	87 fd       	sbrc	r24, 7
    14f8:	90 95       	com	r25
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	19 f4       	brne	.+6      	; 0x1504 <fgetc+0x3e>
    14fe:	30 62       	ori	r19, 0x20	; 32
    1500:	3b 83       	std	Y+3, r19	; 0x03
    1502:	1b c0       	rjmp	.+54     	; 0x153a <fgetc+0x74>
    1504:	31 96       	adiw	r30, 0x01	; 1
    1506:	f9 83       	std	Y+1, r31	; 0x01
    1508:	e8 83       	st	Y, r30
    150a:	0e c0       	rjmp	.+28     	; 0x1528 <fgetc+0x62>
    150c:	ea 85       	ldd	r30, Y+10	; 0x0a
    150e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1510:	09 95       	icall
    1512:	97 ff       	sbrs	r25, 7
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <fgetc+0x62>
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	11 f4       	brne	.+4      	; 0x1520 <fgetc+0x5a>
    151c:	80 e1       	ldi	r24, 0x10	; 16
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <fgetc+0x5c>
    1520:	80 e2       	ldi	r24, 0x20	; 32
    1522:	82 2b       	or	r24, r18
    1524:	8b 83       	std	Y+3, r24	; 0x03
    1526:	09 c0       	rjmp	.+18     	; 0x153a <fgetc+0x74>
    1528:	2e 81       	ldd	r18, Y+6	; 0x06
    152a:	3f 81       	ldd	r19, Y+7	; 0x07
    152c:	2f 5f       	subi	r18, 0xFF	; 255
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	3f 83       	std	Y+7, r19	; 0x07
    1532:	2e 83       	std	Y+6, r18	; 0x06
    1534:	9c 01       	movw	r18, r24
    1536:	33 27       	eor	r19, r19
    1538:	02 c0       	rjmp	.+4      	; 0x153e <fgetc+0x78>
    153a:	2f ef       	ldi	r18, 0xFF	; 255
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	c9 01       	movw	r24, r18
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <fputc>:
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	8c 01       	movw	r16, r24
    1550:	eb 01       	movw	r28, r22
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	81 fd       	sbrc	r24, 1
    1556:	03 c0       	rjmp	.+6      	; 0x155e <fputc+0x18>
    1558:	0f ef       	ldi	r16, 0xFF	; 255
    155a:	1f ef       	ldi	r17, 0xFF	; 255
    155c:	1a c0       	rjmp	.+52     	; 0x1592 <fputc+0x4c>
    155e:	82 ff       	sbrs	r24, 2
    1560:	0d c0       	rjmp	.+26     	; 0x157c <fputc+0x36>
    1562:	2e 81       	ldd	r18, Y+6	; 0x06
    1564:	3f 81       	ldd	r19, Y+7	; 0x07
    1566:	8c 81       	ldd	r24, Y+4	; 0x04
    1568:	9d 81       	ldd	r25, Y+5	; 0x05
    156a:	28 17       	cp	r18, r24
    156c:	39 07       	cpc	r19, r25
    156e:	64 f4       	brge	.+24     	; 0x1588 <fputc+0x42>
    1570:	e8 81       	ld	r30, Y
    1572:	f9 81       	ldd	r31, Y+1	; 0x01
    1574:	01 93       	st	Z+, r16
    1576:	f9 83       	std	Y+1, r31	; 0x01
    1578:	e8 83       	st	Y, r30
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <fputc+0x42>
    157c:	e8 85       	ldd	r30, Y+8	; 0x08
    157e:	f9 85       	ldd	r31, Y+9	; 0x09
    1580:	80 2f       	mov	r24, r16
    1582:	09 95       	icall
    1584:	89 2b       	or	r24, r25
    1586:	41 f7       	brne	.-48     	; 0x1558 <fputc+0x12>
    1588:	8e 81       	ldd	r24, Y+6	; 0x06
    158a:	9f 81       	ldd	r25, Y+7	; 0x07
    158c:	01 96       	adiw	r24, 0x01	; 1
    158e:	9f 83       	std	Y+7, r25	; 0x07
    1590:	8e 83       	std	Y+6, r24	; 0x06
    1592:	c8 01       	movw	r24, r16
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <printf>:
    159e:	a2 e0       	ldi	r26, 0x02	; 2
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 ed       	ldi	r30, 0xD4	; 212
    15a4:	fa e0       	ldi	r31, 0x0A	; 10
    15a6:	61 c2       	rjmp	.+1218   	; 0x1a6a <__prologue_saves__+0x20>
    15a8:	fe 01       	movw	r30, r28
    15aa:	37 96       	adiw	r30, 0x07	; 7
    15ac:	61 91       	ld	r22, Z+
    15ae:	71 91       	ld	r23, Z+
    15b0:	fa 83       	std	Y+2, r31	; 0x02
    15b2:	e9 83       	std	Y+1, r30	; 0x01
    15b4:	af 01       	movw	r20, r30
    15b6:	80 91 de 01 	lds	r24, 0x01DE
    15ba:	90 91 df 01 	lds	r25, 0x01DF
    15be:	03 d0       	rcall	.+6      	; 0x15c6 <vfprintf>
    15c0:	22 96       	adiw	r28, 0x02	; 2
    15c2:	e2 e0       	ldi	r30, 0x02	; 2
    15c4:	6e c2       	rjmp	.+1244   	; 0x1aa2 <__epilogue_restores__+0x20>

000015c6 <vfprintf>:
    15c6:	ac e0       	ldi	r26, 0x0C	; 12
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e8 ee       	ldi	r30, 0xE8	; 232
    15cc:	fa e0       	ldi	r31, 0x0A	; 10
    15ce:	3d c2       	rjmp	.+1146   	; 0x1a4a <__prologue_saves__>
    15d0:	7c 01       	movw	r14, r24
    15d2:	6b 01       	movw	r12, r22
    15d4:	8a 01       	movw	r16, r20
    15d6:	fc 01       	movw	r30, r24
    15d8:	17 82       	std	Z+7, r1	; 0x07
    15da:	16 82       	std	Z+6, r1	; 0x06
    15dc:	83 81       	ldd	r24, Z+3	; 0x03
    15de:	81 ff       	sbrs	r24, 1
    15e0:	ba c1       	rjmp	.+884    	; 0x1956 <vfprintf+0x390>
    15e2:	88 24       	eor	r8, r8
    15e4:	83 94       	inc	r8
    15e6:	91 2c       	mov	r9, r1
    15e8:	8c 0e       	add	r8, r28
    15ea:	9d 1e       	adc	r9, r29
    15ec:	f7 01       	movw	r30, r14
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	f6 01       	movw	r30, r12
    15f2:	93 fd       	sbrc	r25, 3
    15f4:	85 91       	lpm	r24, Z+
    15f6:	93 ff       	sbrs	r25, 3
    15f8:	81 91       	ld	r24, Z+
    15fa:	6f 01       	movw	r12, r30
    15fc:	88 23       	and	r24, r24
    15fe:	09 f4       	brne	.+2      	; 0x1602 <vfprintf+0x3c>
    1600:	a6 c1       	rjmp	.+844    	; 0x194e <vfprintf+0x388>
    1602:	85 32       	cpi	r24, 0x25	; 37
    1604:	39 f4       	brne	.+14     	; 0x1614 <vfprintf+0x4e>
    1606:	93 fd       	sbrc	r25, 3
    1608:	85 91       	lpm	r24, Z+
    160a:	93 ff       	sbrs	r25, 3
    160c:	81 91       	ld	r24, Z+
    160e:	6f 01       	movw	r12, r30
    1610:	85 32       	cpi	r24, 0x25	; 37
    1612:	21 f4       	brne	.+8      	; 0x161c <vfprintf+0x56>
    1614:	b7 01       	movw	r22, r14
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	96 df       	rcall	.-212    	; 0x1546 <fputc>
    161a:	e8 cf       	rjmp	.-48     	; 0x15ec <vfprintf+0x26>
    161c:	71 2c       	mov	r7, r1
    161e:	31 2c       	mov	r3, r1
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	20 32       	cpi	r18, 0x20	; 32
    1624:	a8 f4       	brcc	.+42     	; 0x1650 <vfprintf+0x8a>
    1626:	8b 32       	cpi	r24, 0x2B	; 43
    1628:	61 f0       	breq	.+24     	; 0x1642 <vfprintf+0x7c>
    162a:	28 f4       	brcc	.+10     	; 0x1636 <vfprintf+0x70>
    162c:	80 32       	cpi	r24, 0x20	; 32
    162e:	51 f0       	breq	.+20     	; 0x1644 <vfprintf+0x7e>
    1630:	83 32       	cpi	r24, 0x23	; 35
    1632:	71 f4       	brne	.+28     	; 0x1650 <vfprintf+0x8a>
    1634:	0b c0       	rjmp	.+22     	; 0x164c <vfprintf+0x86>
    1636:	8d 32       	cpi	r24, 0x2D	; 45
    1638:	39 f0       	breq	.+14     	; 0x1648 <vfprintf+0x82>
    163a:	80 33       	cpi	r24, 0x30	; 48
    163c:	49 f4       	brne	.+18     	; 0x1650 <vfprintf+0x8a>
    163e:	21 60       	ori	r18, 0x01	; 1
    1640:	28 c0       	rjmp	.+80     	; 0x1692 <vfprintf+0xcc>
    1642:	22 60       	ori	r18, 0x02	; 2
    1644:	24 60       	ori	r18, 0x04	; 4
    1646:	25 c0       	rjmp	.+74     	; 0x1692 <vfprintf+0xcc>
    1648:	28 60       	ori	r18, 0x08	; 8
    164a:	23 c0       	rjmp	.+70     	; 0x1692 <vfprintf+0xcc>
    164c:	20 61       	ori	r18, 0x10	; 16
    164e:	21 c0       	rjmp	.+66     	; 0x1692 <vfprintf+0xcc>
    1650:	27 fd       	sbrc	r18, 7
    1652:	27 c0       	rjmp	.+78     	; 0x16a2 <vfprintf+0xdc>
    1654:	38 2f       	mov	r19, r24
    1656:	30 53       	subi	r19, 0x30	; 48
    1658:	3a 30       	cpi	r19, 0x0A	; 10
    165a:	78 f4       	brcc	.+30     	; 0x167a <vfprintf+0xb4>
    165c:	26 ff       	sbrs	r18, 6
    165e:	06 c0       	rjmp	.+12     	; 0x166c <vfprintf+0xa6>
    1660:	fa e0       	ldi	r31, 0x0A	; 10
    1662:	7f 9e       	mul	r7, r31
    1664:	30 0d       	add	r19, r0
    1666:	11 24       	eor	r1, r1
    1668:	73 2e       	mov	r7, r19
    166a:	13 c0       	rjmp	.+38     	; 0x1692 <vfprintf+0xcc>
    166c:	8a e0       	ldi	r24, 0x0A	; 10
    166e:	38 9e       	mul	r3, r24
    1670:	30 0d       	add	r19, r0
    1672:	11 24       	eor	r1, r1
    1674:	33 2e       	mov	r3, r19
    1676:	20 62       	ori	r18, 0x20	; 32
    1678:	0c c0       	rjmp	.+24     	; 0x1692 <vfprintf+0xcc>
    167a:	8e 32       	cpi	r24, 0x2E	; 46
    167c:	21 f4       	brne	.+8      	; 0x1686 <vfprintf+0xc0>
    167e:	26 fd       	sbrc	r18, 6
    1680:	66 c1       	rjmp	.+716    	; 0x194e <vfprintf+0x388>
    1682:	20 64       	ori	r18, 0x40	; 64
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0xcc>
    1686:	8c 36       	cpi	r24, 0x6C	; 108
    1688:	11 f4       	brne	.+4      	; 0x168e <vfprintf+0xc8>
    168a:	20 68       	ori	r18, 0x80	; 128
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <vfprintf+0xcc>
    168e:	88 36       	cpi	r24, 0x68	; 104
    1690:	41 f4       	brne	.+16     	; 0x16a2 <vfprintf+0xdc>
    1692:	f6 01       	movw	r30, r12
    1694:	93 fd       	sbrc	r25, 3
    1696:	85 91       	lpm	r24, Z+
    1698:	93 ff       	sbrs	r25, 3
    169a:	81 91       	ld	r24, Z+
    169c:	6f 01       	movw	r12, r30
    169e:	81 11       	cpse	r24, r1
    16a0:	c0 cf       	rjmp	.-128    	; 0x1622 <vfprintf+0x5c>
    16a2:	98 2f       	mov	r25, r24
    16a4:	95 54       	subi	r25, 0x45	; 69
    16a6:	93 30       	cpi	r25, 0x03	; 3
    16a8:	18 f0       	brcs	.+6      	; 0x16b0 <vfprintf+0xea>
    16aa:	90 52       	subi	r25, 0x20	; 32
    16ac:	93 30       	cpi	r25, 0x03	; 3
    16ae:	28 f4       	brcc	.+10     	; 0x16ba <vfprintf+0xf4>
    16b0:	0c 5f       	subi	r16, 0xFC	; 252
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	ff e3       	ldi	r31, 0x3F	; 63
    16b6:	f9 83       	std	Y+1, r31	; 0x01
    16b8:	0d c0       	rjmp	.+26     	; 0x16d4 <vfprintf+0x10e>
    16ba:	83 36       	cpi	r24, 0x63	; 99
    16bc:	31 f0       	breq	.+12     	; 0x16ca <vfprintf+0x104>
    16be:	83 37       	cpi	r24, 0x73	; 115
    16c0:	71 f0       	breq	.+28     	; 0x16de <vfprintf+0x118>
    16c2:	83 35       	cpi	r24, 0x53	; 83
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <vfprintf+0x102>
    16c6:	5a c0       	rjmp	.+180    	; 0x177c <vfprintf+0x1b6>
    16c8:	22 c0       	rjmp	.+68     	; 0x170e <vfprintf+0x148>
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 81       	ld	r24, Z
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	0e 5f       	subi	r16, 0xFE	; 254
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	66 24       	eor	r6, r6
    16d6:	63 94       	inc	r6
    16d8:	71 2c       	mov	r7, r1
    16da:	54 01       	movw	r10, r8
    16dc:	14 c0       	rjmp	.+40     	; 0x1706 <vfprintf+0x140>
    16de:	28 01       	movw	r4, r16
    16e0:	f2 e0       	ldi	r31, 0x02	; 2
    16e2:	4f 0e       	add	r4, r31
    16e4:	51 1c       	adc	r5, r1
    16e6:	f8 01       	movw	r30, r16
    16e8:	a0 80       	ld	r10, Z
    16ea:	b1 80       	ldd	r11, Z+1	; 0x01
    16ec:	26 ff       	sbrs	r18, 6
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <vfprintf+0x130>
    16f0:	67 2d       	mov	r22, r7
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <vfprintf+0x134>
    16f6:	6f ef       	ldi	r22, 0xFF	; 255
    16f8:	7f ef       	ldi	r23, 0xFF	; 255
    16fa:	c5 01       	movw	r24, r10
    16fc:	2c 87       	std	Y+12, r18	; 0x0c
    16fe:	3c d1       	rcall	.+632    	; 0x1978 <strnlen>
    1700:	3c 01       	movw	r6, r24
    1702:	82 01       	movw	r16, r4
    1704:	2c 85       	ldd	r18, Y+12	; 0x0c
    1706:	6f e7       	ldi	r22, 0x7F	; 127
    1708:	26 2e       	mov	r2, r22
    170a:	22 22       	and	r2, r18
    170c:	17 c0       	rjmp	.+46     	; 0x173c <vfprintf+0x176>
    170e:	28 01       	movw	r4, r16
    1710:	f2 e0       	ldi	r31, 0x02	; 2
    1712:	4f 0e       	add	r4, r31
    1714:	51 1c       	adc	r5, r1
    1716:	f8 01       	movw	r30, r16
    1718:	a0 80       	ld	r10, Z
    171a:	b1 80       	ldd	r11, Z+1	; 0x01
    171c:	26 ff       	sbrs	r18, 6
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x160>
    1720:	67 2d       	mov	r22, r7
    1722:	70 e0       	ldi	r23, 0x00	; 0
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x164>
    1726:	6f ef       	ldi	r22, 0xFF	; 255
    1728:	7f ef       	ldi	r23, 0xFF	; 255
    172a:	c5 01       	movw	r24, r10
    172c:	2c 87       	std	Y+12, r18	; 0x0c
    172e:	19 d1       	rcall	.+562    	; 0x1962 <strnlen_P>
    1730:	3c 01       	movw	r6, r24
    1732:	2c 85       	ldd	r18, Y+12	; 0x0c
    1734:	50 e8       	ldi	r21, 0x80	; 128
    1736:	25 2e       	mov	r2, r21
    1738:	22 2a       	or	r2, r18
    173a:	82 01       	movw	r16, r4
    173c:	23 fc       	sbrc	r2, 3
    173e:	1a c0       	rjmp	.+52     	; 0x1774 <vfprintf+0x1ae>
    1740:	05 c0       	rjmp	.+10     	; 0x174c <vfprintf+0x186>
    1742:	b7 01       	movw	r22, r14
    1744:	80 e2       	ldi	r24, 0x20	; 32
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	fe de       	rcall	.-516    	; 0x1546 <fputc>
    174a:	3a 94       	dec	r3
    174c:	83 2d       	mov	r24, r3
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	68 16       	cp	r6, r24
    1752:	79 06       	cpc	r7, r25
    1754:	b0 f3       	brcs	.-20     	; 0x1742 <vfprintf+0x17c>
    1756:	0e c0       	rjmp	.+28     	; 0x1774 <vfprintf+0x1ae>
    1758:	f5 01       	movw	r30, r10
    175a:	27 fc       	sbrc	r2, 7
    175c:	85 91       	lpm	r24, Z+
    175e:	27 fe       	sbrs	r2, 7
    1760:	81 91       	ld	r24, Z+
    1762:	5f 01       	movw	r10, r30
    1764:	b7 01       	movw	r22, r14
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	ee de       	rcall	.-548    	; 0x1546 <fputc>
    176a:	31 10       	cpse	r3, r1
    176c:	3a 94       	dec	r3
    176e:	f1 e0       	ldi	r31, 0x01	; 1
    1770:	6f 1a       	sub	r6, r31
    1772:	71 08       	sbc	r7, r1
    1774:	61 14       	cp	r6, r1
    1776:	71 04       	cpc	r7, r1
    1778:	79 f7       	brne	.-34     	; 0x1758 <vfprintf+0x192>
    177a:	e6 c0       	rjmp	.+460    	; 0x1948 <vfprintf+0x382>
    177c:	84 36       	cpi	r24, 0x64	; 100
    177e:	11 f0       	breq	.+4      	; 0x1784 <vfprintf+0x1be>
    1780:	89 36       	cpi	r24, 0x69	; 105
    1782:	39 f5       	brne	.+78     	; 0x17d2 <vfprintf+0x20c>
    1784:	f8 01       	movw	r30, r16
    1786:	27 ff       	sbrs	r18, 7
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <vfprintf+0x1d2>
    178a:	60 81       	ld	r22, Z
    178c:	71 81       	ldd	r23, Z+1	; 0x01
    178e:	82 81       	ldd	r24, Z+2	; 0x02
    1790:	93 81       	ldd	r25, Z+3	; 0x03
    1792:	0c 5f       	subi	r16, 0xFC	; 252
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <vfprintf+0x1e2>
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	88 27       	eor	r24, r24
    179e:	77 fd       	sbrc	r23, 7
    17a0:	80 95       	com	r24
    17a2:	98 2f       	mov	r25, r24
    17a4:	0e 5f       	subi	r16, 0xFE	; 254
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	4f e6       	ldi	r20, 0x6F	; 111
    17aa:	64 2e       	mov	r6, r20
    17ac:	62 22       	and	r6, r18
    17ae:	97 ff       	sbrs	r25, 7
    17b0:	09 c0       	rjmp	.+18     	; 0x17c4 <vfprintf+0x1fe>
    17b2:	90 95       	com	r25
    17b4:	80 95       	com	r24
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	8f 4f       	sbci	r24, 0xFF	; 255
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	f0 e8       	ldi	r31, 0x80	; 128
    17c2:	6f 2a       	or	r6, r31
    17c4:	2a e0       	ldi	r18, 0x0A	; 10
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a4 01       	movw	r20, r8
    17ca:	e1 d0       	rcall	.+450    	; 0x198e <__ultoa_invert>
    17cc:	a8 2e       	mov	r10, r24
    17ce:	a8 18       	sub	r10, r8
    17d0:	43 c0       	rjmp	.+134    	; 0x1858 <vfprintf+0x292>
    17d2:	85 37       	cpi	r24, 0x75	; 117
    17d4:	31 f4       	brne	.+12     	; 0x17e2 <vfprintf+0x21c>
    17d6:	3f ee       	ldi	r19, 0xEF	; 239
    17d8:	b3 2e       	mov	r11, r19
    17da:	b2 22       	and	r11, r18
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	24 c0       	rjmp	.+72     	; 0x182a <vfprintf+0x264>
    17e2:	99 ef       	ldi	r25, 0xF9	; 249
    17e4:	b9 2e       	mov	r11, r25
    17e6:	b2 22       	and	r11, r18
    17e8:	8f 36       	cpi	r24, 0x6F	; 111
    17ea:	b9 f0       	breq	.+46     	; 0x181a <vfprintf+0x254>
    17ec:	20 f4       	brcc	.+8      	; 0x17f6 <vfprintf+0x230>
    17ee:	88 35       	cpi	r24, 0x58	; 88
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <vfprintf+0x22e>
    17f2:	ad c0       	rjmp	.+346    	; 0x194e <vfprintf+0x388>
    17f4:	0d c0       	rjmp	.+26     	; 0x1810 <vfprintf+0x24a>
    17f6:	80 37       	cpi	r24, 0x70	; 112
    17f8:	21 f0       	breq	.+8      	; 0x1802 <vfprintf+0x23c>
    17fa:	88 37       	cpi	r24, 0x78	; 120
    17fc:	09 f0       	breq	.+2      	; 0x1800 <vfprintf+0x23a>
    17fe:	a7 c0       	rjmp	.+334    	; 0x194e <vfprintf+0x388>
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <vfprintf+0x240>
    1802:	20 e1       	ldi	r18, 0x10	; 16
    1804:	b2 2a       	or	r11, r18
    1806:	b4 fe       	sbrs	r11, 4
    1808:	0b c0       	rjmp	.+22     	; 0x1820 <vfprintf+0x25a>
    180a:	84 e0       	ldi	r24, 0x04	; 4
    180c:	b8 2a       	or	r11, r24
    180e:	08 c0       	rjmp	.+16     	; 0x1820 <vfprintf+0x25a>
    1810:	24 ff       	sbrs	r18, 4
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <vfprintf+0x260>
    1814:	e6 e0       	ldi	r30, 0x06	; 6
    1816:	be 2a       	or	r11, r30
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <vfprintf+0x260>
    181a:	28 e0       	ldi	r18, 0x08	; 8
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	05 c0       	rjmp	.+10     	; 0x182a <vfprintf+0x264>
    1820:	20 e1       	ldi	r18, 0x10	; 16
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	02 c0       	rjmp	.+4      	; 0x182a <vfprintf+0x264>
    1826:	20 e1       	ldi	r18, 0x10	; 16
    1828:	32 e0       	ldi	r19, 0x02	; 2
    182a:	f8 01       	movw	r30, r16
    182c:	b7 fe       	sbrs	r11, 7
    182e:	07 c0       	rjmp	.+14     	; 0x183e <vfprintf+0x278>
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	0c 5f       	subi	r16, 0xFC	; 252
    183a:	1f 4f       	sbci	r17, 0xFF	; 255
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x284>
    183e:	60 81       	ld	r22, Z
    1840:	71 81       	ldd	r23, Z+1	; 0x01
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	0e 5f       	subi	r16, 0xFE	; 254
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	a4 01       	movw	r20, r8
    184c:	a0 d0       	rcall	.+320    	; 0x198e <__ultoa_invert>
    184e:	a8 2e       	mov	r10, r24
    1850:	a8 18       	sub	r10, r8
    1852:	8f e7       	ldi	r24, 0x7F	; 127
    1854:	68 2e       	mov	r6, r24
    1856:	6b 20       	and	r6, r11
    1858:	66 fe       	sbrs	r6, 6
    185a:	0b c0       	rjmp	.+22     	; 0x1872 <vfprintf+0x2ac>
    185c:	36 2d       	mov	r19, r6
    185e:	3e 7f       	andi	r19, 0xFE	; 254
    1860:	a7 14       	cp	r10, r7
    1862:	50 f4       	brcc	.+20     	; 0x1878 <vfprintf+0x2b2>
    1864:	64 fe       	sbrs	r6, 4
    1866:	0a c0       	rjmp	.+20     	; 0x187c <vfprintf+0x2b6>
    1868:	62 fc       	sbrc	r6, 2
    186a:	08 c0       	rjmp	.+16     	; 0x187c <vfprintf+0x2b6>
    186c:	36 2d       	mov	r19, r6
    186e:	3e 7e       	andi	r19, 0xEE	; 238
    1870:	05 c0       	rjmp	.+10     	; 0x187c <vfprintf+0x2b6>
    1872:	ba 2c       	mov	r11, r10
    1874:	36 2d       	mov	r19, r6
    1876:	03 c0       	rjmp	.+6      	; 0x187e <vfprintf+0x2b8>
    1878:	ba 2c       	mov	r11, r10
    187a:	01 c0       	rjmp	.+2      	; 0x187e <vfprintf+0x2b8>
    187c:	b7 2c       	mov	r11, r7
    187e:	34 ff       	sbrs	r19, 4
    1880:	0d c0       	rjmp	.+26     	; 0x189c <vfprintf+0x2d6>
    1882:	fe 01       	movw	r30, r28
    1884:	ea 0d       	add	r30, r10
    1886:	f1 1d       	adc	r31, r1
    1888:	80 81       	ld	r24, Z
    188a:	80 33       	cpi	r24, 0x30	; 48
    188c:	11 f4       	brne	.+4      	; 0x1892 <vfprintf+0x2cc>
    188e:	39 7e       	andi	r19, 0xE9	; 233
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <vfprintf+0x2de>
    1892:	32 ff       	sbrs	r19, 2
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <vfprintf+0x2dc>
    1896:	b3 94       	inc	r11
    1898:	b3 94       	inc	r11
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <vfprintf+0x2de>
    189c:	83 2f       	mov	r24, r19
    189e:	86 78       	andi	r24, 0x86	; 134
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <vfprintf+0x2de>
    18a2:	b3 94       	inc	r11
    18a4:	33 fd       	sbrc	r19, 3
    18a6:	13 c0       	rjmp	.+38     	; 0x18ce <vfprintf+0x308>
    18a8:	30 ff       	sbrs	r19, 0
    18aa:	0e c0       	rjmp	.+28     	; 0x18c8 <vfprintf+0x302>
    18ac:	7a 2c       	mov	r7, r10
    18ae:	b3 14       	cp	r11, r3
    18b0:	58 f4       	brcc	.+22     	; 0x18c8 <vfprintf+0x302>
    18b2:	73 0c       	add	r7, r3
    18b4:	7b 18       	sub	r7, r11
    18b6:	b3 2c       	mov	r11, r3
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <vfprintf+0x302>
    18ba:	b7 01       	movw	r22, r14
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	3c 87       	std	Y+12, r19	; 0x0c
    18c2:	41 de       	rcall	.-894    	; 0x1546 <fputc>
    18c4:	b3 94       	inc	r11
    18c6:	3c 85       	ldd	r19, Y+12	; 0x0c
    18c8:	b3 14       	cp	r11, r3
    18ca:	b8 f3       	brcs	.-18     	; 0x18ba <vfprintf+0x2f4>
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <vfprintf+0x310>
    18ce:	b3 14       	cp	r11, r3
    18d0:	10 f4       	brcc	.+4      	; 0x18d6 <vfprintf+0x310>
    18d2:	3b 18       	sub	r3, r11
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <vfprintf+0x312>
    18d6:	31 2c       	mov	r3, r1
    18d8:	34 ff       	sbrs	r19, 4
    18da:	11 c0       	rjmp	.+34     	; 0x18fe <vfprintf+0x338>
    18dc:	b7 01       	movw	r22, r14
    18de:	80 e3       	ldi	r24, 0x30	; 48
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	3c 87       	std	Y+12, r19	; 0x0c
    18e4:	30 de       	rcall	.-928    	; 0x1546 <fputc>
    18e6:	3c 85       	ldd	r19, Y+12	; 0x0c
    18e8:	32 ff       	sbrs	r19, 2
    18ea:	1c c0       	rjmp	.+56     	; 0x1924 <vfprintf+0x35e>
    18ec:	31 ff       	sbrs	r19, 1
    18ee:	03 c0       	rjmp	.+6      	; 0x18f6 <vfprintf+0x330>
    18f0:	88 e5       	ldi	r24, 0x58	; 88
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <vfprintf+0x334>
    18f6:	88 e7       	ldi	r24, 0x78	; 120
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	b7 01       	movw	r22, r14
    18fc:	0c c0       	rjmp	.+24     	; 0x1916 <vfprintf+0x350>
    18fe:	83 2f       	mov	r24, r19
    1900:	86 78       	andi	r24, 0x86	; 134
    1902:	81 f0       	breq	.+32     	; 0x1924 <vfprintf+0x35e>
    1904:	31 fd       	sbrc	r19, 1
    1906:	02 c0       	rjmp	.+4      	; 0x190c <vfprintf+0x346>
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	01 c0       	rjmp	.+2      	; 0x190e <vfprintf+0x348>
    190c:	8b e2       	ldi	r24, 0x2B	; 43
    190e:	37 fd       	sbrc	r19, 7
    1910:	8d e2       	ldi	r24, 0x2D	; 45
    1912:	b7 01       	movw	r22, r14
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	17 de       	rcall	.-978    	; 0x1546 <fputc>
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <vfprintf+0x35e>
    191a:	b7 01       	movw	r22, r14
    191c:	80 e3       	ldi	r24, 0x30	; 48
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	12 de       	rcall	.-988    	; 0x1546 <fputc>
    1922:	7a 94       	dec	r7
    1924:	a7 14       	cp	r10, r7
    1926:	c8 f3       	brcs	.-14     	; 0x191a <vfprintf+0x354>
    1928:	aa 94       	dec	r10
    192a:	f4 01       	movw	r30, r8
    192c:	ea 0d       	add	r30, r10
    192e:	f1 1d       	adc	r31, r1
    1930:	b7 01       	movw	r22, r14
    1932:	80 81       	ld	r24, Z
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	07 de       	rcall	.-1010   	; 0x1546 <fputc>
    1938:	a1 10       	cpse	r10, r1
    193a:	f6 cf       	rjmp	.-20     	; 0x1928 <vfprintf+0x362>
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <vfprintf+0x382>
    193e:	b7 01       	movw	r22, r14
    1940:	80 e2       	ldi	r24, 0x20	; 32
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	00 de       	rcall	.-1024   	; 0x1546 <fputc>
    1946:	3a 94       	dec	r3
    1948:	31 10       	cpse	r3, r1
    194a:	f9 cf       	rjmp	.-14     	; 0x193e <vfprintf+0x378>
    194c:	4f ce       	rjmp	.-866    	; 0x15ec <vfprintf+0x26>
    194e:	f7 01       	movw	r30, r14
    1950:	26 81       	ldd	r18, Z+6	; 0x06
    1952:	37 81       	ldd	r19, Z+7	; 0x07
    1954:	02 c0       	rjmp	.+4      	; 0x195a <vfprintf+0x394>
    1956:	2f ef       	ldi	r18, 0xFF	; 255
    1958:	3f ef       	ldi	r19, 0xFF	; 255
    195a:	c9 01       	movw	r24, r18
    195c:	2c 96       	adiw	r28, 0x0c	; 12
    195e:	e2 e1       	ldi	r30, 0x12	; 18
    1960:	90 c0       	rjmp	.+288    	; 0x1a82 <__epilogue_restores__>

00001962 <strnlen_P>:
    1962:	fc 01       	movw	r30, r24
    1964:	05 90       	lpm	r0, Z+
    1966:	61 50       	subi	r22, 0x01	; 1
    1968:	70 40       	sbci	r23, 0x00	; 0
    196a:	01 10       	cpse	r0, r1
    196c:	d8 f7       	brcc	.-10     	; 0x1964 <strnlen_P+0x2>
    196e:	80 95       	com	r24
    1970:	90 95       	com	r25
    1972:	8e 0f       	add	r24, r30
    1974:	9f 1f       	adc	r25, r31
    1976:	08 95       	ret

00001978 <strnlen>:
    1978:	fc 01       	movw	r30, r24
    197a:	61 50       	subi	r22, 0x01	; 1
    197c:	70 40       	sbci	r23, 0x00	; 0
    197e:	01 90       	ld	r0, Z+
    1980:	01 10       	cpse	r0, r1
    1982:	d8 f7       	brcc	.-10     	; 0x197a <strnlen+0x2>
    1984:	80 95       	com	r24
    1986:	90 95       	com	r25
    1988:	8e 0f       	add	r24, r30
    198a:	9f 1f       	adc	r25, r31
    198c:	08 95       	ret

0000198e <__ultoa_invert>:
    198e:	fa 01       	movw	r30, r20
    1990:	aa 27       	eor	r26, r26
    1992:	28 30       	cpi	r18, 0x08	; 8
    1994:	51 f1       	breq	.+84     	; 0x19ea <__ultoa_invert+0x5c>
    1996:	20 31       	cpi	r18, 0x10	; 16
    1998:	81 f1       	breq	.+96     	; 0x19fa <__ultoa_invert+0x6c>
    199a:	e8 94       	clt
    199c:	6f 93       	push	r22
    199e:	6e 7f       	andi	r22, 0xFE	; 254
    19a0:	6e 5f       	subi	r22, 0xFE	; 254
    19a2:	7f 4f       	sbci	r23, 0xFF	; 255
    19a4:	8f 4f       	sbci	r24, 0xFF	; 255
    19a6:	9f 4f       	sbci	r25, 0xFF	; 255
    19a8:	af 4f       	sbci	r26, 0xFF	; 255
    19aa:	b1 e0       	ldi	r27, 0x01	; 1
    19ac:	3e d0       	rcall	.+124    	; 0x1a2a <__ultoa_invert+0x9c>
    19ae:	b4 e0       	ldi	r27, 0x04	; 4
    19b0:	3c d0       	rcall	.+120    	; 0x1a2a <__ultoa_invert+0x9c>
    19b2:	67 0f       	add	r22, r23
    19b4:	78 1f       	adc	r23, r24
    19b6:	89 1f       	adc	r24, r25
    19b8:	9a 1f       	adc	r25, r26
    19ba:	a1 1d       	adc	r26, r1
    19bc:	68 0f       	add	r22, r24
    19be:	79 1f       	adc	r23, r25
    19c0:	8a 1f       	adc	r24, r26
    19c2:	91 1d       	adc	r25, r1
    19c4:	a1 1d       	adc	r26, r1
    19c6:	6a 0f       	add	r22, r26
    19c8:	71 1d       	adc	r23, r1
    19ca:	81 1d       	adc	r24, r1
    19cc:	91 1d       	adc	r25, r1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	20 d0       	rcall	.+64     	; 0x1a12 <__ultoa_invert+0x84>
    19d2:	09 f4       	brne	.+2      	; 0x19d6 <__ultoa_invert+0x48>
    19d4:	68 94       	set
    19d6:	3f 91       	pop	r19
    19d8:	2a e0       	ldi	r18, 0x0A	; 10
    19da:	26 9f       	mul	r18, r22
    19dc:	11 24       	eor	r1, r1
    19de:	30 19       	sub	r19, r0
    19e0:	30 5d       	subi	r19, 0xD0	; 208
    19e2:	31 93       	st	Z+, r19
    19e4:	de f6       	brtc	.-74     	; 0x199c <__ultoa_invert+0xe>
    19e6:	cf 01       	movw	r24, r30
    19e8:	08 95       	ret
    19ea:	46 2f       	mov	r20, r22
    19ec:	47 70       	andi	r20, 0x07	; 7
    19ee:	40 5d       	subi	r20, 0xD0	; 208
    19f0:	41 93       	st	Z+, r20
    19f2:	b3 e0       	ldi	r27, 0x03	; 3
    19f4:	0f d0       	rcall	.+30     	; 0x1a14 <__ultoa_invert+0x86>
    19f6:	c9 f7       	brne	.-14     	; 0x19ea <__ultoa_invert+0x5c>
    19f8:	f6 cf       	rjmp	.-20     	; 0x19e6 <__ultoa_invert+0x58>
    19fa:	46 2f       	mov	r20, r22
    19fc:	4f 70       	andi	r20, 0x0F	; 15
    19fe:	40 5d       	subi	r20, 0xD0	; 208
    1a00:	4a 33       	cpi	r20, 0x3A	; 58
    1a02:	18 f0       	brcs	.+6      	; 0x1a0a <__ultoa_invert+0x7c>
    1a04:	49 5d       	subi	r20, 0xD9	; 217
    1a06:	31 fd       	sbrc	r19, 1
    1a08:	40 52       	subi	r20, 0x20	; 32
    1a0a:	41 93       	st	Z+, r20
    1a0c:	02 d0       	rcall	.+4      	; 0x1a12 <__ultoa_invert+0x84>
    1a0e:	a9 f7       	brne	.-22     	; 0x19fa <__ultoa_invert+0x6c>
    1a10:	ea cf       	rjmp	.-44     	; 0x19e6 <__ultoa_invert+0x58>
    1a12:	b4 e0       	ldi	r27, 0x04	; 4
    1a14:	a6 95       	lsr	r26
    1a16:	97 95       	ror	r25
    1a18:	87 95       	ror	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	ba 95       	dec	r27
    1a20:	c9 f7       	brne	.-14     	; 0x1a14 <__ultoa_invert+0x86>
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	61 05       	cpc	r22, r1
    1a26:	71 05       	cpc	r23, r1
    1a28:	08 95       	ret
    1a2a:	9b 01       	movw	r18, r22
    1a2c:	ac 01       	movw	r20, r24
    1a2e:	0a 2e       	mov	r0, r26
    1a30:	06 94       	lsr	r0
    1a32:	57 95       	ror	r21
    1a34:	47 95       	ror	r20
    1a36:	37 95       	ror	r19
    1a38:	27 95       	ror	r18
    1a3a:	ba 95       	dec	r27
    1a3c:	c9 f7       	brne	.-14     	; 0x1a30 <__ultoa_invert+0xa2>
    1a3e:	62 0f       	add	r22, r18
    1a40:	73 1f       	adc	r23, r19
    1a42:	84 1f       	adc	r24, r20
    1a44:	95 1f       	adc	r25, r21
    1a46:	a0 1d       	adc	r26, r0
    1a48:	08 95       	ret

00001a4a <__prologue_saves__>:
    1a4a:	2f 92       	push	r2
    1a4c:	3f 92       	push	r3
    1a4e:	4f 92       	push	r4
    1a50:	5f 92       	push	r5
    1a52:	6f 92       	push	r6
    1a54:	7f 92       	push	r7
    1a56:	8f 92       	push	r8
    1a58:	9f 92       	push	r9
    1a5a:	af 92       	push	r10
    1a5c:	bf 92       	push	r11
    1a5e:	cf 92       	push	r12
    1a60:	df 92       	push	r13
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	ca 1b       	sub	r28, r26
    1a74:	db 0b       	sbc	r29, r27
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
    1a80:	09 94       	ijmp

00001a82 <__epilogue_restores__>:
    1a82:	2a 88       	ldd	r2, Y+18	; 0x12
    1a84:	39 88       	ldd	r3, Y+17	; 0x11
    1a86:	48 88       	ldd	r4, Y+16	; 0x10
    1a88:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a90:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a92:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a94:	b9 84       	ldd	r11, Y+9	; 0x09
    1a96:	c8 84       	ldd	r12, Y+8	; 0x08
    1a98:	df 80       	ldd	r13, Y+7	; 0x07
    1a9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a9e:	0c 81       	ldd	r16, Y+4	; 0x04
    1aa0:	1b 81       	ldd	r17, Y+3	; 0x03
    1aa2:	aa 81       	ldd	r26, Y+2	; 0x02
    1aa4:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa6:	ce 0f       	add	r28, r30
    1aa8:	d1 1d       	adc	r29, r1
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	ed 01       	movw	r28, r26
    1ab6:	08 95       	ret

00001ab8 <_exit>:
    1ab8:	f8 94       	cli

00001aba <__stop_program>:
    1aba:	ff cf       	rjmp	.-2      	; 0x1aba <__stop_program>
