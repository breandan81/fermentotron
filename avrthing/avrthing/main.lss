
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c8  00800100  000018e2  00001976  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  008001c8  008001c8  00001a3e  2**0
                  ALLOC
  3 .stab         00002124  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c6a  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000047ce  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000508  00000000  00000000  000047df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009dd1  00000000  00000000  00004ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002af6  00000000  00000000  0000eab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003a60  00000000  00000000  000115ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010a8  00000000  00000000  00015010  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003a68  00000000  00000000  000160b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006cb0  00000000  00000000  00019b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000858  00000000  00000000  000207d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       4:	b6 c0       	rjmp	.+364    	; 0x172 <__bad_interrupt>
       6:	00 00       	nop
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       8:	b4 c0       	rjmp	.+360    	; 0x172 <__bad_interrupt>
       a:	00 00       	nop
       c:	b2 c0       	rjmp	.+356    	; 0x172 <__bad_interrupt>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       e:	00 00       	nop
      10:	b0 c0       	rjmp	.+352    	; 0x172 <__bad_interrupt>
      12:	00 00       	nop
      14:	ae c0       	rjmp	.+348    	; 0x172 <__bad_interrupt>
      16:	00 00       	nop
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      18:	ac c0       	rjmp	.+344    	; 0x172 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	aa c0       	rjmp	.+340    	; 0x172 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a8 c0       	rjmp	.+336    	; 0x172 <__bad_interrupt>
	while (UDCON & (1 << RMWKUP));
      22:	00 00       	nop
      24:	a6 c0       	rjmp	.+332    	; 0x172 <__bad_interrupt>
      26:	00 00       	nop
      28:	2e c4       	rjmp	.+2140   	; 0x886 <__vector_10>
}
      2a:	00 00       	nop
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
      2c:	a2 c0       	rjmp	.+324    	; 0x172 <__bad_interrupt>

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
      2e:	00 00       	nop
      30:	a0 c0       	rjmp	.+320    	; 0x172 <__bad_interrupt>
      32:	00 00       	nop
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
      34:	9e c0       	rjmp	.+316    	; 0x172 <__bad_interrupt>
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      36:	00 00       	nop
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
      38:	9c c0       	rjmp	.+312    	; 0x172 <__bad_interrupt>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
      3a:	00 00       	nop
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      3c:	9a c0       	rjmp	.+308    	; 0x172 <__bad_interrupt>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
      3e:	00 00       	nop
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
      40:	98 c0       	rjmp	.+304    	; 0x172 <__bad_interrupt>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
      42:	00 00       	nop
		{
			Endpoint_ClearOUT();

			if (BytesProcessed != NULL)
      44:	29 c1       	rjmp	.+594    	; 0x298 <__vector_17>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      46:	00 00       	nop
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
      48:	94 c0       	rjmp	.+296    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
      4a:	00 00       	nop
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
      4c:	92 c0       	rjmp	.+292    	; 0x172 <__bad_interrupt>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
      4e:	00 00       	nop
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
      50:	90 c0       	rjmp	.+288    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
      52:	00 00       	nop
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
      54:	8e c0       	rjmp	.+284    	; 0x172 <__bad_interrupt>
		if (!(Endpoint_IsReadWriteAllowed()))
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
      56:	00 00       	nop
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
      58:	8c c0       	rjmp	.+280    	; 0x172 <__bad_interrupt>
			#endif

			if (BytesProcessed != NULL)
      5a:	00 00       	nop
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
      5c:	8a c0       	rjmp	.+276    	; 0x172 <__bad_interrupt>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      5e:	00 00       	nop
			{
				*BytesProcessed += BytesInTransfer;
      60:	88 c0       	rjmp	.+272    	; 0x172 <__bad_interrupt>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
      62:	00 00       	nop
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      64:	86 c0       	rjmp	.+268    	; 0x172 <__bad_interrupt>
			#endif

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
      66:	00 00       	nop
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
      68:	84 c0       	rjmp	.+264    	; 0x172 <__bad_interrupt>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
      6a:	00 00       	nop
		}
		else
		{
			Endpoint_Discard_8();

			Length--;
      6c:	82 c0       	rjmp	.+260    	; 0x172 <__bad_interrupt>
			BytesInTransfer++;
      6e:	00 00       	nop
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
      70:	80 c0       	rjmp	.+256    	; 0x172 <__bad_interrupt>
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
      72:	00 00       	nop
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
      74:	7e c0       	rjmp	.+252    	; 0x172 <__bad_interrupt>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
      76:	00 00       	nop
			Length--;
      78:	7c c0       	rjmp	.+248    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      7a:	00 00       	nop
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
      7c:	7a c0       	rjmp	.+244    	; 0x172 <__bad_interrupt>
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
      7e:	00 00       	nop
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
      80:	78 c0       	rjmp	.+240    	; 0x172 <__bad_interrupt>
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
      82:	00 00       	nop
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
      84:	76 c0       	rjmp	.+236    	; 0x172 <__bad_interrupt>
			Length--;
      86:	00 00       	nop
      88:	74 c0       	rjmp	.+232    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      8a:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
      8c:	72 c0       	rjmp	.+228    	; 0x172 <__bad_interrupt>
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      8e:	00 00       	nop
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
      90:	70 c0       	rjmp	.+224    	; 0x172 <__bad_interrupt>
      92:	00 00       	nop
      94:	6e c0       	rjmp	.+220    	; 0x172 <__bad_interrupt>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
      96:	00 00       	nop
			{
				*BytesProcessed += BytesInTransfer;
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
      98:	6c c0       	rjmp	.+216    	; 0x172 <__bad_interrupt>
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
      9a:	00 00       	nop
      9c:	6a c0       	rjmp	.+212    	; 0x172 <__bad_interrupt>
      9e:	00 00       	nop

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
      a0:	68 c0       	rjmp	.+208    	; 0x172 <__bad_interrupt>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
      a2:	00 00       	nop
      a4:	66 c0       	rjmp	.+204    	; 0x172 <__bad_interrupt>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
      a6:	00 00       	nop

		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
      a8:	64 c0       	rjmp	.+200    	; 0x172 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
				ReportSize     -= 4;
     118:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

00000126 <DeviceDescriptor>:
				ReportData     += 4;
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
				ReportSize     -= 2;
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e2 ee       	ldi	r30, 0xE2	; 226
     14c:	f8 e1       	ldi	r31, 0x18	; 24
				ReportData     += 2;
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
				break;
     152:	0d 92       	st	X+, r0
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
     154:	a8 3c       	cpi	r26, 0xC8	; 200
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a8 ec       	ldi	r26, 0xC8	; 200
     15e:	b1 e0       	ldi	r27, 0x01	; 1
				ReportSize     -= 1;
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	ad 3e       	cpi	r26, 0xED	; 237
     166:	b1 07       	cpc	r27, r17
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	0e 94 1b 09 	call	0x1236	; 0x1236 <main>
     16e:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <_exit>

00000172 <__bad_interrupt>:
     172:	46 cf       	rjmp	.-372    	; 0x0 <__vectors>

00000174 <_Z6getPins>:
				ReportData     += 1;
     174:	46 97       	sbiw	r24, 0x16	; 22
     176:	81 31       	cpi	r24, 0x11	; 17
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     178:	91 05       	cpc	r25, r1
     17a:	40 f4       	brcc	.+16     	; 0x18c <_Z6getPins+0x18>
     17c:	fc 01       	movw	r30, r24
     17e:	ec 5b       	subi	r30, 0xBC	; 188
     180:	fe 4f       	sbci	r31, 0xFE	; 254
     182:	20 81       	ld	r18, Z
     184:	33 27       	eor	r19, r19
     186:	27 fd       	sbrc	r18, 7
     188:	30 95       	com	r19
     18a:	02 c0       	rjmp	.+4      	; 0x190 <_Z6getPins+0x1c>
     18c:	2f ef       	ldi	r18, 0xFF	; 255
     18e:	3f ef       	ldi	r19, 0xFF	; 255
     190:	c9 01       	movw	r24, r18
     192:	08 95       	ret

00000194 <_Z6setRefs>:
     194:	ec e7       	ldi	r30, 0x7C	; 124
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	90 81       	ld	r25, Z
     19a:	82 95       	swap	r24
     19c:	88 0f       	add	r24, r24
     19e:	88 0f       	add	r24, r24
     1a0:	80 7c       	andi	r24, 0xC0	; 192
     1a2:	9f 73       	andi	r25, 0x3F	; 63
     1a4:	89 2b       	or	r24, r25
     1a6:	80 83       	st	Z, r24
     1a8:	08 95       	ret

000001aa <_Z14setRefInternalv>:
     1aa:	83 e0       	ldi	r24, 0x03	; 3
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	f2 cf       	rjmp	.-28     	; 0x194 <_Z6setRefs>

000001b0 <_Z14setRefExternalv>:
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	ef cf       	rjmp	.-34     	; 0x194 <_Z6setRefs>

000001b6 <_Z9setRefVCCv>:
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	ec cf       	rjmp	.-40     	; 0x194 <_Z6setRefs>

000001bc <_Z6setPins>:
     1bc:	db df       	rcall	.-74     	; 0x174 <_Z6getPins>
     1be:	9c 01       	movw	r18, r24
     1c0:	97 fd       	sbrc	r25, 7
     1c2:	17 c0       	rjmp	.+46     	; 0x1f2 <_Z6setPins+0x36>
     1c4:	40 91 7c 00 	lds	r20, 0x007C
     1c8:	8f 70       	andi	r24, 0x0F	; 15
     1ca:	99 27       	eor	r25, r25
     1cc:	40 7c       	andi	r20, 0xC0	; 192
     1ce:	48 2b       	or	r20, r24
     1d0:	40 93 7c 00 	sts	0x007C, r20
     1d4:	c9 01       	movw	r24, r18
     1d6:	80 7f       	andi	r24, 0xF0	; 240
     1d8:	99 27       	eor	r25, r25
     1da:	89 2b       	or	r24, r25
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_Z6setPins+0x2a>
     1de:	80 91 7b 00 	lds	r24, 0x007B
     1e2:	80 62       	ori	r24, 0x20	; 32
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <_Z6setPins+0x30>
     1e6:	80 91 7b 00 	lds	r24, 0x007B
     1ea:	8f 7d       	andi	r24, 0xDF	; 223
     1ec:	80 93 7b 00 	sts	0x007B, r24
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <_Z6setPins+0x3a>
     1f2:	2f ef       	ldi	r18, 0xFF	; 255
     1f4:	3f ef       	ldi	r19, 0xFF	; 255
     1f6:	c9 01       	movw	r24, r18
     1f8:	08 95       	ret

000001fa <_Z9setThermov>:
     1fa:	d7 df       	rcall	.-82     	; 0x1aa <_Z14setRefInternalv>
     1fc:	ec e7       	ldi	r30, 0x7C	; 124
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	80 7c       	andi	r24, 0xC0	; 192
     204:	87 60       	ori	r24, 0x07	; 7
     206:	80 83       	st	Z, r24
     208:	eb e7       	ldi	r30, 0x7B	; 123
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 62       	ori	r24, 0x20	; 32
     210:	80 83       	st	Z, r24
     212:	87 e2       	ldi	r24, 0x27	; 39
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	08 95       	ret

00000218 <_Z7convertv>:
     218:	80 91 7a 00 	lds	r24, 0x007A
     21c:	80 68       	ori	r24, 0x80	; 128
     21e:	80 93 7a 00 	sts	0x007A, r24
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     222:	80 91 7a 00 	lds	r24, 0x007A
     226:	80 64       	ori	r24, 0x40	; 64
     228:	80 93 7a 00 	sts	0x007A, r24
     22c:	80 91 7a 00 	lds	r24, 0x007A
     230:	86 fd       	sbrc	r24, 6
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     232:	fc cf       	rjmp	.-8      	; 0x22c <_Z7convertv+0x14>
				break;
     234:	20 91 78 00 	lds	r18, 0x0078
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     238:	30 91 79 00 	lds	r19, 0x0079
     23c:	80 91 7a 00 	lds	r24, 0x007A
     240:	8f 77       	andi	r24, 0x7F	; 127
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     242:	80 93 7a 00 	sts	0x007A, r24
				break;
     246:	93 2f       	mov	r25, r19
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	ac 01       	movw	r20, r24
     24c:	42 2b       	or	r20, r18
     24e:	9a 01       	movw	r18, r20
     250:	c9 01       	movw	r24, r18
				break;
     252:	08 95       	ret

00000254 <_Z11analogSetupv>:
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     254:	ea e7       	ldi	r30, 0x7A	; 122
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	87 60       	ori	r24, 0x07	; 7
     25c:	80 83       	st	Z, r24
				break;
     25e:	a5 cf       	rjmp	.-182    	; 0x1aa <_Z14setRefInternalv>

00000260 <_Z10analogReads>:
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     260:	ad df       	rcall	.-166    	; 0x1bc <_Z6setPins>
     262:	97 ff       	sbrs	r25, 7
     264:	d9 cf       	rjmp	.-78     	; 0x218 <_Z7convertv>
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	9f ef       	ldi	r25, 0xFF	; 255
     26a:	08 95       	ret

0000026c <_Z8runTasksv>:
     26c:	c5 c1       	rjmp	.+906    	; 0x5f8 <runUSB>

0000026e <_Z7initRTCv>:
				break;
     26e:	e1 e8       	ldi	r30, 0x81	; 129
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	88 60       	ori	r24, 0x08	; 8
     276:	80 83       	st	Z, r24
     278:	80 e4       	ldi	r24, 0x40	; 64
				break;
     27a:	9f e1       	ldi	r25, 0x1F	; 31
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     27c:	90 93 89 00 	sts	0x0089, r25
     280:	80 93 88 00 	sts	0x0088, r24
     284:	80 81       	ld	r24, Z
     286:	81 60       	ori	r24, 0x01	; 1
     288:	80 83       	st	Z, r24
				break;
     28a:	ef e6       	ldi	r30, 0x6F	; 111
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
				break;
     290:	82 60       	ori	r24, 0x02	; 2
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     292:	80 83       	st	Z, r24
     294:	78 94       	sei
     296:	08 95       	ret

00000298 <__vector_17>:
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
				break;
     2a0:	11 24       	eor	r1, r1
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     2a2:	2f 93       	push	r18
     2a4:	3f 93       	push	r19
				break;
     2a6:	4f 93       	push	r20
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     2a8:	5f 93       	push	r21
     2aa:	6f 93       	push	r22
     2ac:	7f 93       	push	r23
				break;
     2ae:	8f 93       	push	r24
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     2b0:	9f 93       	push	r25
     2b2:	af 93       	push	r26
     2b4:	bf 93       	push	r27
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31

				if (ParserData->UsingReportIDs)
     2ba:	9e d1       	rcall	.+828    	; 0x5f8 <runUSB>
     2bc:	80 91 18 01 	lds	r24, 0x0118
     2c0:	90 91 19 01 	lds	r25, 0x0119
     2c4:	01 96       	adiw	r24, 0x01	; 1
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     2c6:	90 93 19 01 	sts	0x0119, r25
     2ca:	80 93 18 01 	sts	0x0118, r24
     2ce:	80 91 18 01 	lds	r24, 0x0118
     2d2:	90 91 19 01 	lds	r25, 0x0119
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2d6:	89 2b       	or	r24, r25

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     2d8:	c1 f4       	brne	.+48     	; 0x30a <__vector_17+0x72>
     2da:	80 91 d8 01 	lds	r24, 0x01D8
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     2de:	90 91 d9 01 	lds	r25, 0x01D9
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 d9 01 	sts	0x01D9, r25
     2e8:	80 93 d8 01 	sts	0x01D8, r24
     2ec:	80 91 d8 01 	lds	r24, 0x01D8
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     2f0:	90 91 d9 01 	lds	r25, 0x01D9
     2f4:	89 2b       	or	r24, r25
     2f6:	49 f4       	brne	.+18     	; 0x30a <__vector_17+0x72>
     2f8:	80 91 d6 01 	lds	r24, 0x01D6
     2fc:	90 91 d7 01 	lds	r25, 0x01D7
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	90 93 d7 01 	sts	0x01D7, r25
     306:	80 93 d6 01 	sts	0x01D6, r24
     30a:	ff 91       	pop	r31
     30c:	ef 91       	pop	r30
     30e:	bf 91       	pop	r27

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     310:	af 91       	pop	r26
     312:	9f 91       	pop	r25
     314:	8f 91       	pop	r24
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     316:	7f 91       	pop	r23
     318:	6f 91       	pop	r22
     31a:	5f 91       	pop	r21
     31c:	4f 91       	pop	r20
     31e:	3f 91       	pop	r19
     320:	2f 91       	pop	r18
     322:	0f 90       	pop	r0
     324:	0f be       	out	0x3f, r0	; 63
     326:	0f 90       	pop	r0
     328:	1f 90       	pop	r1
     32a:	18 95       	reti

0000032c <_Z6millisv>:
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 d0       	rcall	.+0      	; 0x336 <_Z6millisv+0xa>
     336:	00 d0       	rcall	.+0      	; 0x338 <_Z6millisv+0xc>
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	20 91 18 01 	lds	r18, 0x0118
					}
				}

				ParserData->UsingReportIDs = true;
     340:	30 91 19 01 	lds	r19, 0x0119
     344:	80 91 d8 01 	lds	r24, 0x01D8
     348:	90 91 d9 01 	lds	r25, 0x01D9

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     34c:	40 91 d6 01 	lds	r20, 0x01D6
     350:	50 91 d7 01 	lds	r21, 0x01D7
     354:	a0 e0       	ldi	r26, 0x00	; 0
     356:	b0 e0       	ldi	r27, 0x00	; 0
				break;
     358:	6f e0       	ldi	r22, 0x0F	; 15
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	aa 1f       	adc	r26, r26
     360:	bb 1f       	adc	r27, r27
     362:	6a 95       	dec	r22
     364:	d1 f7       	brne	.-12     	; 0x35a <_Z6millisv+0x2e>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     366:	36 95       	lsr	r19
     368:	27 95       	ror	r18
     36a:	82 0f       	add	r24, r18
     36c:	93 1f       	adc	r25, r19
     36e:	a1 1d       	adc	r26, r1
     370:	b1 1d       	adc	r27, r1
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	77 27       	eor	r23, r23
     378:	46 95       	lsr	r20
     37a:	77 95       	ror	r23
     37c:	66 27       	eor	r22, r22
     37e:	55 27       	eor	r21, r21
     380:	44 27       	eor	r20, r20
     382:	84 0f       	add	r24, r20
				break;
     384:	95 1f       	adc	r25, r21
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     386:	a6 1f       	adc	r26, r22
     388:	b7 1f       	adc	r27, r23
     38a:	89 83       	std	Y+1, r24	; 0x01
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     38c:	9a 83       	std	Y+2, r25	; 0x02
     38e:	ab 83       	std	Y+3, r26	; 0x03
     390:	bc 83       	std	Y+4, r27	; 0x04
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     392:	09 81       	ldd	r16, Y+1	; 0x01
     394:	1a 81       	ldd	r17, Y+2	; 0x02
     396:	2b 81       	ldd	r18, Y+3	; 0x03
     398:	3c 81       	ldd	r19, Y+4	; 0x04
     39a:	b8 01       	movw	r22, r16
     39c:	c9 01       	movw	r24, r18
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28

					while (CurrCollectionPath->Parent != NULL)
     3aa:	1f 91       	pop	r17
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3ac:	0f 91       	pop	r16
     3ae:	08 95       	ret

000003b0 <_Z7secondsv>:
     3b0:	cf 92       	push	r12
     3b2:	df 92       	push	r13
     3b4:	ef 92       	push	r14
     3b6:	ff 92       	push	r15
     3b8:	60 91 d8 01 	lds	r22, 0x01D8
     3bc:	70 91 d9 01 	lds	r23, 0x01D9
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     3c0:	20 91 18 01 	lds	r18, 0x0118
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     3c4:	30 91 19 01 	lds	r19, 0x0119
     3c8:	cb 01       	movw	r24, r22
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     3ca:	a0 e0       	ldi	r26, 0x00	; 0
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	77 27       	eor	r23, r23
				}

				CurrCollectionPath->Type       = ReportItemData;
     3d0:	66 27       	eor	r22, r22
     3d2:	62 0f       	add	r22, r18
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     3d4:	73 1f       	adc	r23, r19
     3d6:	81 1d       	adc	r24, r1
     3d8:	91 1d       	adc	r25, r1
     3da:	20 ed       	ldi	r18, 0xD0	; 208
     3dc:	37 e0       	ldi	r19, 0x07	; 7
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	50 e0       	ldi	r21, 0x00	; 0

				if (UsageListSize)
     3e2:	7b d7       	rcall	.+3830   	; 0x12da <__divmodsi4>
     3e4:	69 01       	movw	r12, r18
     3e6:	7a 01       	movw	r14, r20
     3e8:	60 91 d6 01 	lds	r22, 0x01D6
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     3ec:	70 91 d7 01 	lds	r23, 0x01D7
     3f0:	cb 01       	movw	r24, r22
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	77 27       	eor	r23, r23
     3f8:	66 27       	eor	r22, r22
     3fa:	28 ee       	ldi	r18, 0xE8	; 232
     3fc:	33 e0       	ldi	r19, 0x03	; 3
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	50 e0       	ldi	r21, 0x00	; 0

					for (uint8_t i = 0; i < UsageListSize; i++)
     402:	6b d7       	rcall	.+3798   	; 0x12da <__divmodsi4>
					  UsageList[i] = UsageList[i + 1];
     404:	d9 01       	movw	r26, r18
     406:	99 27       	eor	r25, r25
     408:	88 27       	eor	r24, r24
     40a:	c8 0e       	add	r12, r24

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     40c:	d9 1e       	adc	r13, r25
     40e:	ea 1e       	adc	r14, r26
     410:	fb 1e       	adc	r15, r27
     412:	b6 01       	movw	r22, r12
     414:	c7 01       	movw	r24, r14
     416:	ff 90       	pop	r15
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	08 95       	ret

00000420 <_Z11delayMillisj>:
     420:	8f 92       	push	r8
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     422:	9f 92       	push	r9
     424:	af 92       	push	r10
     426:	bf 92       	push	r11
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     42e:	ff 92       	push	r15
     430:	6c 01       	movw	r12, r24
     432:	7c df       	rcall	.-264    	; 0x32c <_Z6millisv>
     434:	4b 01       	movw	r8, r22
     436:	5c 01       	movw	r10, r24
     438:	e1 2c       	mov	r14, r1
     43a:	f1 2c       	mov	r15, r1
     43c:	77 df       	rcall	.-274    	; 0x32c <_Z6millisv>
     43e:	68 19       	sub	r22, r8
     440:	79 09       	sbc	r23, r9
     442:	8a 09       	sbc	r24, r10
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     444:	9b 09       	sbc	r25, r11
     446:	6c 15       	cp	r22, r12
     448:	7d 05       	cpc	r23, r13
     44a:	8e 05       	cpc	r24, r14
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     44c:	9f 05       	cpc	r25, r15
     44e:	b0 f3       	brcs	.-20     	; 0x43c <_Z11delayMillisj+0x1c>
     450:	ff 90       	pop	r15
				break;
     452:	ef 90       	pop	r14
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	bf 90       	pop	r11
     45a:	af 90       	pop	r10
     45c:	9f 90       	pop	r9
     45e:	8f 90       	pop	r8
     460:	08 95       	ret

00000462 <_Z7getPORTi>:
     462:	89 32       	cpi	r24, 0x29	; 41
     464:	91 05       	cpc	r25, r1
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     466:	8c f4       	brge	.+34     	; 0x48a <_Z7getPORTi+0x28>
     468:	fc 01       	movw	r30, r24
					NewReportItem.CollectionPath = CurrCollectionPath;
     46a:	ec 5a       	subi	r30, 0xAC	; 172
     46c:	fe 4f       	sbci	r31, 0xFE	; 254
     46e:	e0 81       	ld	r30, Z
     470:	f0 e0       	ldi	r31, 0x00	; 0
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	f5 95       	asr	r31
     476:	e7 95       	ror	r30
     478:	8a 95       	dec	r24

					if (UsageListSize)
     47a:	e1 f7       	brne	.-8      	; 0x474 <_Z7getPORTi+0x12>
     47c:	ee 0f       	add	r30, r30
     47e:	ff 1f       	adc	r31, r31
     480:	ea 5c       	subi	r30, 0xCA	; 202
     482:	fe 4f       	sbci	r31, 0xFE	; 254
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     484:	20 81       	ld	r18, Z
     486:	31 81       	ldd	r19, Z+1	; 0x01
     488:	02 c0       	rjmp	.+4      	; 0x48e <_Z7getPORTi+0x2c>
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	c9 01       	movw	r24, r18
     490:	08 95       	ret

00000492 <_Z6getPINi>:
     492:	89 32       	cpi	r24, 0x29	; 41
     494:	91 05       	cpc	r25, r1
     496:	8c f4       	brge	.+34     	; 0x4ba <_Z6getPINi+0x28>
     498:	fc 01       	movw	r30, r24

						for (uint8_t i = 0; i < UsageListSize; i++)
     49a:	ec 5a       	subi	r30, 0xAC	; 172
						  UsageList[i] = UsageList[i + 1];
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	e0 81       	ld	r30, Z
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	24 e0       	ldi	r18, 0x04	; 4

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     4a4:	f5 95       	asr	r31
     4a6:	e7 95       	ror	r30
     4a8:	2a 95       	dec	r18
     4aa:	e1 f7       	brne	.-8      	; 0x4a4 <_Z6getPINi+0x12>
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     4b0:	e8 5d       	subi	r30, 0xD8	; 216
     4b2:	fe 4f       	sbci	r31, 0xFE	; 254
     4b4:	20 81       	ld	r18, Z
     4b6:	31 81       	ldd	r19, Z+1	; 0x01
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <_Z6getPINi+0x2c>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	c9 01       	movw	r24, r18
     4c0:	08 95       	ret

000004c2 <_Z6getDDRi>:
     4c2:	89 32       	cpi	r24, 0x29	; 41
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     4c4:	91 05       	cpc	r25, r1
     4c6:	8c f4       	brge	.+34     	; 0x4ea <_Z6getDDRi+0x28>
     4c8:	fc 01       	movw	r30, r24
     4ca:	ec 5a       	subi	r30, 0xAC	; 172
     4cc:	fe 4f       	sbci	r31, 0xFE	; 254
     4ce:	e0 81       	ld	r30, Z
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	44 e0       	ldi	r20, 0x04	; 4
     4d4:	f5 95       	asr	r31
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     4d6:	e7 95       	ror	r30
     4d8:	4a 95       	dec	r20
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <_Z6getDDRi+0x12>
     4dc:	ee 0f       	add	r30, r30
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     4de:	ff 1f       	adc	r31, r31
     4e0:	e6 5e       	subi	r30, 0xE6	; 230
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     4e2:	fe 4f       	sbci	r31, 0xFE	; 254
     4e4:	20 81       	ld	r18, Z
     4e6:	31 81       	ldd	r19, Z+1	; 0x01
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <_Z6getDDRi+0x2c>
     4ea:	20 e0       	ldi	r18, 0x00	; 0

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	c9 01       	movw	r24, r18
     4f0:	08 95       	ret

000004f2 <_Z12digitalWritecc>:
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	89 32       	cpi	r24, 0x29	; 41
     4f8:	48 f5       	brcc	.+82     	; 0x54c <_Z12digitalWritecc+0x5a>
     4fa:	c8 2f       	mov	r28, r24
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
     4fe:	ce 01       	movw	r24, r28
     500:	66 23       	and	r22, r22
     502:	81 f0       	breq	.+32     	; 0x524 <_Z12digitalWritecc+0x32>
     504:	ae df       	rcall	.-164    	; 0x462 <_Z7getPORTi>
     506:	fc 01       	movw	r30, r24

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     508:	40 81       	ld	r20, Z
     50a:	cc 5a       	subi	r28, 0xAC	; 172
     50c:	de 4f       	sbci	r29, 0xFE	; 254
     50e:	58 81       	ld	r21, Y
     510:	5f 70       	andi	r21, 0x0F	; 15
     512:	21 e0       	ldi	r18, 0x01	; 1
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	05 2e       	mov	r0, r21

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     518:	01 c0       	rjmp	.+2      	; 0x51c <_Z12digitalWritecc+0x2a>
     51a:	22 0f       	add	r18, r18
     51c:	0a 94       	dec	r0
     51e:	ea f7       	brpl	.-6      	; 0x51a <_Z12digitalWritecc+0x28>
     520:	42 2b       	or	r20, r18
     522:	10 c0       	rjmp	.+32     	; 0x544 <_Z12digitalWritecc+0x52>
     524:	9e df       	rcall	.-196    	; 0x462 <_Z7getPORTi>
     526:	fc 01       	movw	r30, r24
     528:	40 81       	ld	r20, Z
     52a:	cc 5a       	subi	r28, 0xAC	; 172
     52c:	de 4f       	sbci	r29, 0xFE	; 254
     52e:	58 81       	ld	r21, Y
     530:	5f 70       	andi	r21, 0x0F	; 15
     532:	21 e0       	ldi	r18, 0x01	; 1
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	05 2e       	mov	r0, r21
     538:	01 c0       	rjmp	.+2      	; 0x53c <_Z12digitalWritecc+0x4a>
     53a:	22 0f       	add	r18, r18
     53c:	0a 94       	dec	r0
     53e:	ea f7       	brpl	.-6      	; 0x53a <_Z12digitalWritecc+0x48>
     540:	20 95       	com	r18
     542:	42 23       	and	r20, r18
     544:	40 83       	st	Z, r20
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	02 c0       	rjmp	.+4      	; 0x550 <_Z12digitalWritecc+0x5e>
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	3f ef       	ldi	r19, 0xFF	; 255
     550:	c9 01       	movw	r24, r18
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <_Z12setDirectioncc>:
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	89 32       	cpi	r24, 0x29	; 41
     55e:	48 f5       	brcc	.+82     	; 0x5b2 <_Z12setDirectioncc+0x5a>
     560:	c8 2f       	mov	r28, r24
     562:	d0 e0       	ldi	r29, 0x00	; 0
     564:	ce 01       	movw	r24, r28
     566:	66 23       	and	r22, r22
     568:	81 f0       	breq	.+32     	; 0x58a <_Z12setDirectioncc+0x32>
     56a:	ab df       	rcall	.-170    	; 0x4c2 <_Z6getDDRi>

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     56c:	fc 01       	movw	r30, r24
     56e:	40 81       	ld	r20, Z
     570:	cc 5a       	subi	r28, 0xAC	; 172
     572:	de 4f       	sbci	r29, 0xFE	; 254
					  return HID_PARSE_InsufficientReportItems;
     574:	58 81       	ld	r21, Y
     576:	5f 70       	andi	r21, 0x0F	; 15

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     578:	21 e0       	ldi	r18, 0x01	; 1
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	05 2e       	mov	r0, r21
     57e:	01 c0       	rjmp	.+2      	; 0x582 <_Z12setDirectioncc+0x2a>
     580:	22 0f       	add	r18, r18
     582:	0a 94       	dec	r0
     584:	ea f7       	brpl	.-6      	; 0x580 <_Z12setDirectioncc+0x28>
     586:	42 2b       	or	r20, r18
     588:	10 c0       	rjmp	.+32     	; 0x5aa <_Z12setDirectioncc+0x52>
     58a:	9b df       	rcall	.-202    	; 0x4c2 <_Z6getDDRi>
     58c:	fc 01       	movw	r30, r24
     58e:	40 81       	ld	r20, Z
     590:	cc 5a       	subi	r28, 0xAC	; 172
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     592:	de 4f       	sbci	r29, 0xFE	; 254
     594:	58 81       	ld	r21, Y
     596:	5f 70       	andi	r21, 0x0F	; 15
     598:	21 e0       	ldi	r18, 0x01	; 1
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	05 2e       	mov	r0, r21
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <_Z12setDirectioncc+0x4a>
     5a0:	22 0f       	add	r18, r18
     5a2:	0a 94       	dec	r0
     5a4:	ea f7       	brpl	.-6      	; 0x5a0 <_Z12setDirectioncc+0x48>
     5a6:	20 95       	com	r18
     5a8:	42 23       	and	r20, r18
     5aa:	40 83       	st	Z, r20
     5ac:	20 e0       	ldi	r18, 0x00	; 0
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <_Z12setDirectioncc+0x5e>
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	3f ef       	ldi	r19, 0xFF	; 255
     5b6:	c9 01       	movw	r24, r18
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <_Z11digitalReadc>:
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	89 32       	cpi	r24, 0x29	; 41
     5c4:	98 f4       	brcc	.+38     	; 0x5ec <_Z11digitalReadc+0x2e>
     5c6:	c8 2f       	mov	r28, r24
     5c8:	d0 e0       	ldi	r29, 0x00	; 0
     5ca:	ce 01       	movw	r24, r28
     5cc:	62 df       	rcall	.-316    	; 0x492 <_Z6getPINi>
     5ce:	fc 01       	movw	r30, r24
     5d0:	20 81       	ld	r18, Z
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	cc 5a       	subi	r28, 0xAC	; 172
     5d6:	de 4f       	sbci	r29, 0xFE	; 254
     5d8:	88 81       	ld	r24, Y
     5da:	8f 70       	andi	r24, 0x0F	; 15
     5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <_Z11digitalReadc+0x24>
     5de:	35 95       	asr	r19
     5e0:	27 95       	ror	r18
     5e2:	8a 95       	dec	r24
     5e4:	e2 f7       	brpl	.-8      	; 0x5de <_Z11digitalReadc+0x20>
     5e6:	21 70       	andi	r18, 0x01	; 1
     5e8:	33 27       	eor	r19, r19
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <_Z11digitalReadc+0x32>
     5ec:	2f ef       	ldi	r18, 0xFF	; 255
     5ee:	3f ef       	ldi	r19, 0xFF	; 255
     5f0:	c9 01       	movw	r24, r18
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <runUSB>:
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	02 d5       	rcall	.+2564   	; 0x1002 <CDC_Device_ReceiveByte>
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	f0 d4       	rcall	.+2528   	; 0xfe4 <CDC_Device_USBTask>
     604:	2c c4       	rjmp	.+2136   	; 0xe5e <USB_USBTask>

00000606 <SetupHardware>:
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	80 e8       	ldi	r24, 0x80	; 128
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	80 93 61 00 	sts	0x0061, r24
     612:	90 93 61 00 	sts	0x0061, r25
     616:	0f be       	out	0x3f, r0	; 63
     618:	1e c1       	rjmp	.+572    	; 0x856 <USB_Init>

0000061a <initUSBSerial>:
     61a:	f5 df       	rcall	.-22     	; 0x606 <SetupHardware>
     61c:	68 ec       	ldi	r22, 0xC8	; 200
     61e:	71 e0       	ldi	r23, 0x01	; 1
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	3d d5       	rcall	.+2682   	; 0x10a0 <CDC_Device_CreateBlockingStream>
     626:	88 ec       	ldi	r24, 0xC8	; 200
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	90 93 ea 01 	sts	0x01EA, r25
     62e:	80 93 e9 01 	sts	0x01E9, r24
					  ParserData->TotalReportItems++;
     632:	90 93 e8 01 	sts	0x01E8, r25
     636:	80 93 e7 01 	sts	0x01E7, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     63a:	08 95       	ret

0000063c <EVENT_USB_Device_Disconnect>:
     63c:	08 95       	ret

0000063e <EVENT_USB_Device_ConfigurationChanged>:
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	1f c4       	rjmp	.+2110   	; 0xe82 <CDC_Device_ConfigureEndpoints>

00000644 <EVENT_USB_Device_ControlRequest>:
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	91 e0       	ldi	r25, 0x01	; 1
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     648:	3f c5       	rjmp	.+2686   	; 0x10c8 <CDC_Device_ProcessControlRequest>

0000064a <CALLBACK_USB_GetDescriptor>:
     64a:	29 2f       	mov	r18, r25
     64c:	33 27       	eor	r19, r19
					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     64e:	22 30       	cpi	r18, 0x02	; 2
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     650:	31 05       	cpc	r19, r1
     652:	39 f0       	breq	.+14     	; 0x662 <CALLBACK_USB_GetDescriptor+0x18>
     654:	23 30       	cpi	r18, 0x03	; 3
     656:	31 05       	cpc	r19, r1
     658:	49 f0       	breq	.+18     	; 0x66c <CALLBACK_USB_GetDescriptor+0x22>
     65a:	21 30       	cpi	r18, 0x01	; 1
     65c:	31 05       	cpc	r19, r1
     65e:	21 f1       	breq	.+72     	; 0x6a8 <CALLBACK_USB_GetDescriptor+0x5e>
     660:	28 c0       	rjmp	.+80     	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x68>
     662:	ee e3       	ldi	r30, 0x3E	; 62
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	88 ee       	ldi	r24, 0xE8	; 232
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	27 c0       	rjmp	.+78     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x70>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     66c:	99 27       	eor	r25, r25
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	91 05       	cpc	r25, r1
     672:	61 f0       	breq	.+24     	; 0x68c <CALLBACK_USB_GetDescriptor+0x42>
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	91 05       	cpc	r25, r1
     678:	81 f0       	breq	.+32     	; 0x69a <CALLBACK_USB_GetDescriptor+0x50>
     67a:	89 2b       	or	r24, r25
     67c:	d1 f4       	brne	.+52     	; 0x6b2 <CALLBACK_USB_GetDescriptor+0x68>
     67e:	e4 ee       	ldi	r30, 0xE4	; 228
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	e4 91       	lpm	r30, Z+
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	84 ee       	ldi	r24, 0xE4	; 228
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	17 c0       	rjmp	.+46     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x70>
     68c:	ea ec       	ldi	r30, 0xCA	; 202
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	e4 91       	lpm	r30, Z+
     692:	f0 e0       	ldi	r31, 0x00	; 0
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     694:	8a ec       	ldi	r24, 0xCA	; 202
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	10 c0       	rjmp	.+32     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x70>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     69a:	ec ea       	ldi	r30, 0xAC	; 172
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	e4 91       	lpm	r30, Z+
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6a0:	f0 e0       	ldi	r31, 0x00	; 0
     6a2:	8c ea       	ldi	r24, 0xAC	; 172
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	09 c0       	rjmp	.+18     	; 0x6ba <CALLBACK_USB_GetDescriptor+0x70>
     6a8:	e2 e1       	ldi	r30, 0x12	; 18
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	86 e2       	ldi	r24, 0x26	; 38
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <CALLBACK_USB_GetDescriptor+0x70>
     6b2:	e0 e0       	ldi	r30, 0x00	; 0
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
	  return HID_PARSE_NoUnfilteredReportItems;
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6ba:	da 01       	movw	r26, r20
     6bc:	8d 93       	st	X+, r24

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6be:	9c 93       	st	X, r25
     6c0:	cf 01       	movw	r24, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6c2:	08 95       	ret

000006c4 <Endpoint_ConfigureEndpoint_Prv>:
     6c4:	98 2f       	mov	r25, r24
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6c6:	2c c0       	rjmp	.+88     	; 0x720 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     6c8:	90 93 e9 00 	sts	0x00E9, r25
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6cc:	98 17       	cp	r25, r24
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6ce:	39 f0       	breq	.+14     	; 0x6de <Endpoint_ConfigureEndpoint_Prv+0x1a>
     6d0:	70 91 ec 00 	lds	r23, 0x00EC
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6d4:	20 91 ed 00 	lds	r18, 0x00ED
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6d8:	50 91 f0 00 	lds	r21, 0x00F0
     6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <Endpoint_ConfigureEndpoint_Prv+0x20>

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     6de:	24 2f       	mov	r18, r20
     6e0:	76 2f       	mov	r23, r22
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	21 fd       	sbrc	r18, 1
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <Endpoint_ConfigureEndpoint_Prv+0x28>
     6e8:	9f 5f       	subi	r25, 0xFF	; 255
     6ea:	1a c0       	rjmp	.+52     	; 0x720 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     6ec:	30 91 eb 00 	lds	r19, 0x00EB
     6f0:	3e 7f       	andi	r19, 0xFE	; 254
     6f2:	30 93 eb 00 	sts	0x00EB, r19
     6f6:	30 91 ed 00 	lds	r19, 0x00ED
     6fa:	3d 7f       	andi	r19, 0xFD	; 253
     6fc:	30 93 ed 00 	sts	0x00ED, r19
     700:	30 91 eb 00 	lds	r19, 0x00EB
     704:	31 60       	ori	r19, 0x01	; 1
     706:	30 93 eb 00 	sts	0x00EB, r19
     70a:	70 93 ec 00 	sts	0x00EC, r23
     70e:	20 93 ed 00 	sts	0x00ED, r18
		UECFG1X &= ~(1 << ALLOC);

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;
     712:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     716:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     71a:	27 fd       	sbrc	r18, 7
     71c:	e5 cf       	rjmp	.-54     	; 0x6e8 <Endpoint_ConfigureEndpoint_Prv+0x24>
     71e:	06 c0       	rjmp	.+12     	; 0x72c <Endpoint_ConfigureEndpoint_Prv+0x68>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     720:	97 30       	cpi	r25, 0x07	; 7
     722:	90 f2       	brcs	.-92     	; 0x6c8 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     724:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     72c:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     72e:	08 95       	ret

00000730 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     730:	80 91 df 01 	lds	r24, 0x01DF
     734:	87 fd       	sbrc	r24, 7
     736:	05 c0       	rjmp	.+10     	; 0x742 <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     738:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     73c:	80 ff       	sbrs	r24, 0
     73e:	0e c0       	rjmp	.+28     	; 0x75c <Endpoint_ClearStatusStage+0x2c>
     740:	12 c0       	rjmp	.+36     	; 0x766 <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     742:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     746:	82 fd       	sbrc	r24, 2
     748:	05 c0       	rjmp	.+10     	; 0x754 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     74a:	80 91 de 01 	lds	r24, 0x01DE
     74e:	81 11       	cpse	r24, r1
     750:	f8 cf       	rjmp	.-16     	; 0x742 <Endpoint_ClearStatusStage+0x12>
     752:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     754:	80 91 e8 00 	lds	r24, 0x00E8
     758:	8b 77       	andi	r24, 0x7B	; 123
     75a:	08 c0       	rjmp	.+16     	; 0x76c <Endpoint_ClearStatusStage+0x3c>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     75c:	80 91 de 01 	lds	r24, 0x01DE
     760:	81 11       	cpse	r24, r1
     762:	ea cf       	rjmp	.-44     	; 0x738 <Endpoint_ClearStatusStage+0x8>
     764:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     766:	80 91 e8 00 	lds	r24, 0x00E8
     76a:	8e 77       	andi	r24, 0x7E	; 126
     76c:	80 93 e8 00 	sts	0x00E8, r24
     770:	08 95       	ret

00000772 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     772:	80 91 e4 00 	lds	r24, 0x00E4
     776:	90 91 e5 00 	lds	r25, 0x00E5
     77a:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     77c:	20 91 ec 00 	lds	r18, 0x00EC
     780:	20 fd       	sbrc	r18, 0
     782:	1f c0       	rjmp	.+62     	; 0x7c2 <Endpoint_WaitUntilReady+0x50>
     784:	23 c0       	rjmp	.+70     	; 0x7cc <Endpoint_WaitUntilReady+0x5a>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     786:	20 91 de 01 	lds	r18, 0x01DE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     78a:	22 23       	and	r18, r18
     78c:	91 f0       	breq	.+36     	; 0x7b2 <Endpoint_WaitUntilReady+0x40>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     78e:	25 30       	cpi	r18, 0x05	; 5
     790:	91 f0       	breq	.+36     	; 0x7b6 <Endpoint_WaitUntilReady+0x44>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     792:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     796:	25 fd       	sbrc	r18, 5
     798:	10 c0       	rjmp	.+32     	; 0x7ba <Endpoint_WaitUntilReady+0x48>
     79a:	20 91 e4 00 	lds	r18, 0x00E4
     79e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     7a2:	28 17       	cp	r18, r24
     7a4:	39 07       	cpc	r19, r25
     7a6:	51 f3       	breq	.-44     	; 0x77c <Endpoint_WaitUntilReady+0xa>
     7a8:	41 50       	subi	r20, 0x01	; 1
     7aa:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     7ac:	39 f7       	brne	.-50     	; 0x77c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     7ae:	84 e0       	ldi	r24, 0x04	; 4
     7b0:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7c2:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     7c6:	20 ff       	sbrs	r18, 0
     7c8:	de cf       	rjmp	.-68     	; 0x786 <Endpoint_WaitUntilReady+0x14>
     7ca:	f9 cf       	rjmp	.-14     	; 0x7be <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7cc:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     7d0:	22 ff       	sbrs	r18, 2
     7d2:	d9 cf       	rjmp	.-78     	; 0x786 <Endpoint_WaitUntilReady+0x14>
     7d4:	f4 cf       	rjmp	.-24     	; 0x7be <Endpoint_WaitUntilReady+0x4c>

000007d6 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     7de:	46 d0       	rcall	.+140    	; 0x86c <USB_INT_DisableAllInterrupts>
     7e0:	4d d0       	rcall	.+154    	; 0x87c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7e2:	c8 ed       	ldi	r28, 0xD8	; 216
     7e4:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     7e6:	88 81       	ld	r24, Y
     7e8:	8f 77       	andi	r24, 0x7F	; 127
     7ea:	88 83       	st	Y, r24
     7ec:	88 81       	ld	r24, Y
     7ee:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     7f0:	88 83       	st	Y, r24
     7f2:	88 81       	ld	r24, Y
     7f4:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     7f6:	88 83       	st	Y, r24
     7f8:	19 bc       	out	0x29, r1	; 41
     7fa:	10 92 de 01 	sts	0x01DE, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     7fe:	10 92 da 01 	sts	0x01DA, r1
	USB_Device_ConfigurationNumber  = 0;
     802:	10 92 dc 01 	sts	0x01DC, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     806:	10 92 db 01 	sts	0x01DB, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     80a:	00 ee       	ldi	r16, 0xE0	; 224
     80c:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     80e:	f8 01       	movw	r30, r16
     810:	80 81       	ld	r24, Z
     812:	8b 7f       	andi	r24, 0xFB	; 251
     814:	80 83       	st	Z, r24
     816:	88 81       	ld	r24, Y
     818:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     81a:	88 83       	st	Y, r24
     81c:	42 e0       	ldi	r20, 0x02	; 2
     81e:	60 e0       	ldi	r22, 0x00	; 0
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	50 df       	rcall	.-352    	; 0x6c4 <Endpoint_ConfigureEndpoint_Prv>
     824:	e1 ee       	ldi	r30, 0xE1	; 225
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     82a:	8e 7f       	andi	r24, 0xFE	; 254
     82c:	80 83       	st	Z, r24
     82e:	e2 ee       	ldi	r30, 0xE2	; 226
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     834:	81 60       	ori	r24, 0x01	; 1
     836:	80 83       	st	Z, r24
     838:	80 81       	ld	r24, Z
     83a:	88 60       	ori	r24, 0x08	; 8
     83c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     83e:	f8 01       	movw	r30, r16
     840:	80 81       	ld	r24, Z
     842:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     844:	80 83       	st	Z, r24
     846:	88 81       	ld	r24, Y
     848:	80 61       	ori	r24, 0x10	; 16
     84a:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
     856:	e7 ed       	ldi	r30, 0xD7	; 215
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	81 60       	ori	r24, 0x01	; 1
     85e:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 dd 01 	sts	0x01DD, r24

	USB_ResetInterface();
     86a:	b5 cf       	rjmp	.-150    	; 0x7d6 <USB_ResetInterface>

0000086c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     86c:	e8 ed       	ldi	r30, 0xD8	; 216
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	8e 7f       	andi	r24, 0xFE	; 254
     874:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     876:	10 92 e2 00 	sts	0x00E2, r1
     87a:	08 95       	ret

0000087c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     87c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     880:	10 92 e1 00 	sts	0x00E1, r1
     884:	08 95       	ret

00000886 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	2f 93       	push	r18
     892:	3f 93       	push	r19
     894:	4f 93       	push	r20
     896:	5f 93       	push	r21
     898:	6f 93       	push	r22
     89a:	7f 93       	push	r23
     89c:	8f 93       	push	r24
     89e:	9f 93       	push	r25
     8a0:	af 93       	push	r26
     8a2:	bf 93       	push	r27
     8a4:	ef 93       	push	r30
     8a6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8a8:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8ac:	82 ff       	sbrs	r24, 2
     8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8b0:	80 91 e2 00 	lds	r24, 0x00E2
     8b4:	82 ff       	sbrs	r24, 2
     8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8b8:	80 91 e1 00 	lds	r24, 0x00E1
     8bc:	8b 7f       	andi	r24, 0xFB	; 251
     8be:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8c2:	cc d2       	rcall	.+1432   	; 0xe5c <USB_Event_Stub>
     8c4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8c8:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8ca:	1d c0       	rjmp	.+58     	; 0x906 <__vector_10+0x80>
     8cc:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8d0:	80 ff       	sbrs	r24, 0
     8d2:	19 c0       	rjmp	.+50     	; 0x906 <__vector_10+0x80>
     8d4:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8d8:	8e 7f       	andi	r24, 0xFE	; 254
     8da:	80 93 da 00 	sts	0x00DA, r24
     8de:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8e2:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8e4:	0c c0       	rjmp	.+24     	; 0x8fe <__vector_10+0x78>
     8e6:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8e8:	89 bd       	out	0x29, r24	; 41
     8ea:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8ec:	89 bd       	out	0x29, r24	; 41
     8ee:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8f0:	00 fe       	sbrs	r0, 0
     8f2:	fd cf       	rjmp	.-6      	; 0x8ee <__vector_10+0x68>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8f6:	80 93 de 01 	sts	0x01DE, r24
     8fa:	b0 d2       	rcall	.+1376   	; 0xe5c <USB_Event_Stub>
			EVENT_USB_Device_Connect();
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__vector_10+0x80>
     8fe:	19 bc       	out	0x29, r1	; 41
     900:	10 92 de 01 	sts	0x01DE, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     904:	9b de       	rcall	.-714    	; 0x63c <EVENT_USB_Device_Disconnect>
     906:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     90a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     90c:	18 c0       	rjmp	.+48     	; 0x93e <__vector_10+0xb8>
     90e:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     912:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     914:	14 c0       	rjmp	.+40     	; 0x93e <__vector_10+0xb8>
     916:	80 91 e2 00 	lds	r24, 0x00E2
     91a:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     91c:	80 93 e2 00 	sts	0x00E2, r24
     920:	80 91 e2 00 	lds	r24, 0x00E2
     924:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     926:	80 93 e2 00 	sts	0x00E2, r24
     92a:	80 91 d8 00 	lds	r24, 0x00D8
     92e:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     930:	80 93 d8 00 	sts	0x00D8, r24
     934:	19 bc       	out	0x29, r1	; 41
     936:	85 e0       	ldi	r24, 0x05	; 5
     938:	80 93 de 01 	sts	0x01DE, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     93c:	8f d2       	rcall	.+1310   	; 0xe5c <USB_Event_Stub>
     93e:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     942:	84 ff       	sbrs	r24, 4
     944:	2d c0       	rjmp	.+90     	; 0x9a0 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     946:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     94a:	84 ff       	sbrs	r24, 4
     94c:	29 c0       	rjmp	.+82     	; 0x9a0 <__vector_10+0x11a>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     94e:	80 e1       	ldi	r24, 0x10	; 16
     950:	89 bd       	out	0x29, r24	; 41
     952:	82 e1       	ldi	r24, 0x12	; 18
     954:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     956:	09 b4       	in	r0, 0x29	; 41
     958:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     95a:	fd cf       	rjmp	.-6      	; 0x956 <__vector_10+0xd0>
     95c:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     960:	8f 7d       	andi	r24, 0xDF	; 223
     962:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     966:	80 91 e1 00 	lds	r24, 0x00E1
     96a:	8f 7e       	andi	r24, 0xEF	; 239
     96c:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     970:	80 91 e2 00 	lds	r24, 0x00E2
     974:	8f 7e       	andi	r24, 0xEF	; 239
     976:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     97a:	80 91 e2 00 	lds	r24, 0x00E2
     97e:	81 60       	ori	r24, 0x01	; 1
     980:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     984:	80 91 da 01 	lds	r24, 0x01DA
     988:	81 11       	cpse	r24, r1
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__vector_10+0x10e>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     98c:	80 91 e3 00 	lds	r24, 0x00E3
     990:	87 ff       	sbrs	r24, 7
     992:	02 c0       	rjmp	.+4      	; 0x998 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	01 c0       	rjmp	.+2      	; 0x99a <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 93 de 01 	sts	0x01DE, r24
     99e:	5e d2       	rcall	.+1212   	; 0xe5c <USB_Event_Stub>
     9a0:	80 91 e1 00 	lds	r24, 0x00E1
     9a4:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     9a6:	22 c0       	rjmp	.+68     	; 0x9ec <__vector_10+0x166>
     9a8:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     9ac:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     9ae:	1e c0       	rjmp	.+60     	; 0x9ec <__vector_10+0x166>
     9b0:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     9b4:	87 7f       	andi	r24, 0xF7	; 247
     9b6:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	80 93 de 01 	sts	0x01DE, r24
     9c0:	10 92 da 01 	sts	0x01DA, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9c4:	80 91 e1 00 	lds	r24, 0x00E1
     9c8:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     9ca:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9ce:	80 91 e2 00 	lds	r24, 0x00E2
     9d2:	8e 7f       	andi	r24, 0xFE	; 254
     9d4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9d8:	80 91 e2 00 	lds	r24, 0x00E2
     9dc:	80 61       	ori	r24, 0x10	; 16
     9de:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9e2:	42 e0       	ldi	r20, 0x02	; 2
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	6d de       	rcall	.-806    	; 0x6c4 <Endpoint_ConfigureEndpoint_Prv>
     9ea:	38 d2       	rcall	.+1136   	; 0xe5c <USB_Event_Stub>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     9ec:	ff 91       	pop	r31
     9ee:	ef 91       	pop	r30
     9f0:	bf 91       	pop	r27
     9f2:	af 91       	pop	r26
     9f4:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9f6:	8f 91       	pop	r24
     9f8:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9fa:	6f 91       	pop	r22
     9fc:	5f 91       	pop	r21
     9fe:	4f 91       	pop	r20
     a00:	3f 91       	pop	r19
     a02:	2f 91       	pop	r18
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a0e:	40 91 e5 01 	lds	r20, 0x01E5
     a12:	50 91 e6 01 	lds	r21, 0x01E6
     a16:	46 17       	cp	r20, r22
     a18:	57 07       	cpc	r21, r23
     a1a:	48 f0       	brcs	.+18     	; 0xa2e <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a1c:	61 15       	cp	r22, r1
     a1e:	71 05       	cpc	r23, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a22:	40 91 e8 00 	lds	r20, 0x00E8
     a26:	4e 77       	andi	r20, 0x7E	; 126
     a28:	40 93 e8 00 	sts	0x00E8, r20
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a2e:	ba 01       	movw	r22, r20
     a30:	fc 01       	movw	r30, r24
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	33 c0       	rjmp	.+102    	; 0xa9c <Endpoint_Write_Control_Stream_LE+0x8e>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a36:	80 91 de 01 	lds	r24, 0x01DE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a3a:	88 23       	and	r24, r24
     a3c:	09 f4       	brne	.+2      	; 0xa40 <Endpoint_Write_Control_Stream_LE+0x32>
     a3e:	42 c0       	rjmp	.+132    	; 0xac4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a40:	85 30       	cpi	r24, 0x05	; 5
     a42:	09 f4       	brne	.+2      	; 0xa46 <Endpoint_Write_Control_Stream_LE+0x38>
     a44:	41 c0       	rjmp	.+130    	; 0xac8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a46:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a4a:	83 fd       	sbrc	r24, 3
     a4c:	39 c0       	rjmp	.+114    	; 0xac0 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a4e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a52:	82 fd       	sbrc	r24, 2
     a54:	2f c0       	rjmp	.+94     	; 0xab4 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a56:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a5a:	80 ff       	sbrs	r24, 0
     a5c:	1f c0       	rjmp	.+62     	; 0xa9c <Endpoint_Write_Control_Stream_LE+0x8e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     a5e:	90 91 f3 00 	lds	r25, 0x00F3
     a62:	80 91 f2 00 	lds	r24, 0x00F2
     a66:	39 2f       	mov	r19, r25
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	a9 01       	movw	r20, r18
     a6c:	48 2b       	or	r20, r24
     a6e:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a70:	06 c0       	rjmp	.+12     	; 0xa7e <Endpoint_Write_Control_Stream_LE+0x70>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a72:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a74:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     a78:	61 50       	subi	r22, 0x01	; 1
     a7a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     a7c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	19 f0       	breq	.+6      	; 0xa8a <Endpoint_Write_Control_Stream_LE+0x7c>
     a84:	88 30       	cpi	r24, 0x08	; 8
     a86:	91 05       	cpc	r25, r1
     a88:	a0 f3       	brcs	.-24     	; 0xa72 <Endpoint_Write_Control_Stream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a8a:	41 e0       	ldi	r20, 0x01	; 1
     a8c:	08 97       	sbiw	r24, 0x08	; 8
     a8e:	09 f0       	breq	.+2      	; 0xa92 <Endpoint_Write_Control_Stream_LE+0x84>
     a90:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a92:	80 91 e8 00 	lds	r24, 0x00E8
     a96:	8e 77       	andi	r24, 0x7E	; 126
     a98:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a9c:	61 15       	cp	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	51 f6       	brne	.-108    	; 0xa36 <Endpoint_Write_Control_Stream_LE+0x28>
     aa2:	41 11       	cpse	r20, r1
     aa4:	c8 cf       	rjmp	.-112    	; 0xa36 <Endpoint_Write_Control_Stream_LE+0x28>
     aa6:	06 c0       	rjmp	.+12     	; 0xab4 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     aa8:	80 91 de 01 	lds	r24, 0x01DE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     aac:	88 23       	and	r24, r24
     aae:	51 f0       	breq	.+20     	; 0xac4 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ab0:	85 30       	cpi	r24, 0x05	; 5
     ab2:	51 f0       	breq	.+20     	; 0xac8 <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ab4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ab8:	82 ff       	sbrs	r24, 2
     aba:	f6 cf       	rjmp	.-20     	; 0xaa8 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     ac8:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     aca:	08 95       	ret

00000acc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     acc:	40 91 e5 01 	lds	r20, 0x01E5
     ad0:	50 91 e6 01 	lds	r21, 0x01E6
     ad4:	46 17       	cp	r20, r22
     ad6:	57 07       	cpc	r21, r23
     ad8:	48 f0       	brcs	.+18     	; 0xaec <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ada:	61 15       	cp	r22, r1
     adc:	71 05       	cpc	r23, r1
     ade:	39 f4       	brne	.+14     	; 0xaee <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ae0:	40 91 e8 00 	lds	r20, 0x00E8
     ae4:	4e 77       	andi	r20, 0x7E	; 126
     ae6:	40 93 e8 00 	sts	0x00E8, r20
     aea:	01 c0       	rjmp	.+2      	; 0xaee <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     aec:	ba 01       	movw	r22, r20
     aee:	fc 01       	movw	r30, r24
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	34 c0       	rjmp	.+104    	; 0xb5c <__stack+0x5d>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     af4:	80 91 de 01 	lds	r24, 0x01DE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     af8:	88 23       	and	r24, r24
     afa:	09 f4       	brne	.+2      	; 0xafe <Endpoint_Write_Control_PStream_LE+0x32>
     afc:	43 c0       	rjmp	.+134    	; 0xb84 <__stack+0x85>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     afe:	85 30       	cpi	r24, 0x05	; 5
     b00:	09 f4       	brne	.+2      	; 0xb04 <__stack+0x5>
     b02:	42 c0       	rjmp	.+132    	; 0xb88 <__stack+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b04:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b08:	83 fd       	sbrc	r24, 3
     b0a:	3a c0       	rjmp	.+116    	; 0xb80 <__stack+0x81>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b0c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b10:	82 fd       	sbrc	r24, 2
     b12:	30 c0       	rjmp	.+96     	; 0xb74 <__stack+0x75>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b14:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     b18:	80 ff       	sbrs	r24, 0
     b1a:	20 c0       	rjmp	.+64     	; 0xb5c <__stack+0x5d>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b1c:	90 91 f3 00 	lds	r25, 0x00F3
     b20:	80 91 f2 00 	lds	r24, 0x00F2
     b24:	39 2f       	mov	r19, r25
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	a9 01       	movw	r20, r18
     b2a:	48 2b       	or	r20, r24
     b2c:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b2e:	07 c0       	rjmp	.+14     	; 0xb3e <__stack+0x3f>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b30:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b32:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     b36:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     b38:	61 50       	subi	r22, 0x01	; 1
     b3a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     b3c:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b3e:	61 15       	cp	r22, r1
     b40:	71 05       	cpc	r23, r1
     b42:	19 f0       	breq	.+6      	; 0xb4a <__stack+0x4b>
     b44:	88 30       	cpi	r24, 0x08	; 8
     b46:	91 05       	cpc	r25, r1
     b48:	98 f3       	brcs	.-26     	; 0xb30 <__stack+0x31>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b4a:	41 e0       	ldi	r20, 0x01	; 1
     b4c:	08 97       	sbiw	r24, 0x08	; 8
     b4e:	09 f0       	breq	.+2      	; 0xb52 <__stack+0x53>
     b50:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b52:	80 91 e8 00 	lds	r24, 0x00E8
     b56:	8e 77       	andi	r24, 0x7E	; 126
     b58:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b5c:	61 15       	cp	r22, r1
     b5e:	71 05       	cpc	r23, r1
     b60:	49 f6       	brne	.-110    	; 0xaf4 <Endpoint_Write_Control_PStream_LE+0x28>
     b62:	41 11       	cpse	r20, r1
     b64:	c7 cf       	rjmp	.-114    	; 0xaf4 <Endpoint_Write_Control_PStream_LE+0x28>
     b66:	06 c0       	rjmp	.+12     	; 0xb74 <__stack+0x75>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b68:	80 91 de 01 	lds	r24, 0x01DE

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b6c:	88 23       	and	r24, r24
     b6e:	51 f0       	breq	.+20     	; 0xb84 <__stack+0x85>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b70:	85 30       	cpi	r24, 0x05	; 5
     b72:	51 f0       	breq	.+20     	; 0xb88 <__stack+0x89>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b74:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b78:	82 ff       	sbrs	r24, 2
     b7a:	f6 cf       	rjmp	.-20     	; 0xb68 <__stack+0x69>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b84:	82 e0       	ldi	r24, 0x02	; 2
     b86:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b88:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b8a:	08 95       	ret

00000b8c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	ac 97       	sbiw	r28, 0x2c	; 44
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     ba8:	ef ed       	ldi	r30, 0xDF	; 223
     baa:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bac:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     bb0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bb2:	21 e0       	ldi	r18, 0x01	; 1
     bb4:	e7 3e       	cpi	r30, 0xE7	; 231
     bb6:	f2 07       	cpc	r31, r18
     bb8:	c9 f7       	brne	.-14     	; 0xbac <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bba:	44 dd       	rcall	.-1400   	; 0x644 <EVENT_USB_Device_ControlRequest>
     bbc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc0:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     bc2:	31 c1       	rjmp	.+610    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     bc4:	80 91 df 01 	lds	r24, 0x01DF
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bc8:	90 91 e0 01 	lds	r25, 0x01E0

		switch (USB_ControlRequest.bRequest)
     bcc:	95 30       	cpi	r25, 0x05	; 5
     bce:	09 f4       	brne	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0x46>
     bd0:	87 c0       	rjmp	.+270    	; 0xce0 <USB_Device_ProcessControlRequest+0x154>
     bd2:	38 f4       	brcc	.+14     	; 0xbe2 <USB_Device_ProcessControlRequest+0x56>
     bd4:	91 30       	cpi	r25, 0x01	; 1
     bd6:	b1 f1       	breq	.+108    	; 0xc44 <USB_Device_ProcessControlRequest+0xb8>
     bd8:	70 f0       	brcs	.+28     	; 0xbf6 <USB_Device_ProcessControlRequest+0x6a>
     bda:	93 30       	cpi	r25, 0x03	; 3
     bdc:	09 f0       	breq	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0x54>
     bde:	23 c1       	rjmp	.+582    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     be0:	31 c0       	rjmp	.+98     	; 0xc44 <USB_Device_ProcessControlRequest+0xb8>
     be2:	98 30       	cpi	r25, 0x08	; 8
     be4:	09 f4       	brne	.+2      	; 0xbe8 <USB_Device_ProcessControlRequest+0x5c>
     be6:	f4 c0       	rjmp	.+488    	; 0xdd0 <USB_Device_ProcessControlRequest+0x244>
     be8:	99 30       	cpi	r25, 0x09	; 9
     bea:	09 f4       	brne	.+2      	; 0xbee <USB_Device_ProcessControlRequest+0x62>
     bec:	00 c1       	rjmp	.+512    	; 0xdee <USB_Device_ProcessControlRequest+0x262>
     bee:	96 30       	cpi	r25, 0x06	; 6
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <USB_Device_ProcessControlRequest+0x68>
     bf2:	19 c1       	rjmp	.+562    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     bf4:	9c c0       	rjmp	.+312    	; 0xd2e <USB_Device_ProcessControlRequest+0x1a2>
     bf6:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bf8:	21 f0       	breq	.+8      	; 0xc02 <USB_Device_ProcessControlRequest+0x76>
     bfa:	82 38       	cpi	r24, 0x82	; 130
     bfc:	09 f0       	breq	.+2      	; 0xc00 <USB_Device_ProcessControlRequest+0x74>
     bfe:	13 c1       	rjmp	.+550    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <USB_Device_ProcessControlRequest+0x86>
     c02:	80 91 db 01 	lds	r24, 0x01DB
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     c06:	90 91 dc 01 	lds	r25, 0x01DC
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c0a:	99 23       	and	r25, r25
     c0c:	89 f0       	breq	.+34     	; 0xc30 <USB_Device_ProcessControlRequest+0xa4>
     c0e:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c10:	0f c0       	rjmp	.+30     	; 0xc30 <USB_Device_ProcessControlRequest+0xa4>
     c12:	80 91 e3 01 	lds	r24, 0x01E3
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c16:	90 91 e4 01 	lds	r25, 0x01E4
     c1a:	8f 70       	andi	r24, 0x0F	; 15
     c1c:	99 27       	eor	r25, r25
     c1e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c22:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c26:	85 fb       	bst	r24, 5
     c28:	88 27       	eor	r24, r24
     c2a:	80 f9       	bld	r24, 0
     c2c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c30:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c34:	97 7f       	andi	r25, 0xF7	; 247
     c36:	90 93 e8 00 	sts	0x00E8, r25
     c3a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c3e:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c42:	d1 c0       	rjmp	.+418    	; 0xde6 <USB_Device_ProcessControlRequest+0x25a>
     c44:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c46:	19 f0       	breq	.+6      	; 0xc4e <USB_Device_ProcessControlRequest+0xc2>
     c48:	82 30       	cpi	r24, 0x02	; 2
     c4a:	09 f0       	breq	.+2      	; 0xc4e <USB_Device_ProcessControlRequest+0xc2>
     c4c:	ec c0       	rjmp	.+472    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     c4e:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c50:	21 f0       	breq	.+8      	; 0xc5a <USB_Device_ProcessControlRequest+0xce>
     c52:	82 30       	cpi	r24, 0x02	; 2
     c54:	09 f0       	breq	.+2      	; 0xc58 <USB_Device_ProcessControlRequest+0xcc>
     c56:	e7 c0       	rjmp	.+462    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     c58:	0b c0       	rjmp	.+22     	; 0xc70 <USB_Device_ProcessControlRequest+0xe4>
     c5a:	80 91 e1 01 	lds	r24, 0x01E1
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	09 f0       	breq	.+2      	; 0xc64 <USB_Device_ProcessControlRequest+0xd8>
     c62:	e1 c0       	rjmp	.+450    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     c64:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c66:	09 f0       	breq	.+2      	; 0xc6a <USB_Device_ProcessControlRequest+0xde>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	80 93 dc 01 	sts	0x01DC, r24
     c6e:	2f c0       	rjmp	.+94     	; 0xcce <USB_Device_ProcessControlRequest+0x142>
     c70:	80 91 e1 01 	lds	r24, 0x01E1

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c74:	81 11       	cpse	r24, r1
     c76:	2b c0       	rjmp	.+86     	; 0xcce <USB_Device_ProcessControlRequest+0x142>
     c78:	80 91 e3 01 	lds	r24, 0x01E3
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c7c:	90 91 e4 01 	lds	r25, 0x01E4
     c80:	8f 70       	andi	r24, 0x0F	; 15
     c82:	99 27       	eor	r25, r25
     c84:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c86:	09 f4       	brne	.+2      	; 0xc8a <USB_Device_ProcessControlRequest+0xfe>
     c88:	ce c0       	rjmp	.+412    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     c8a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c8e:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c92:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c94:	1c c0       	rjmp	.+56     	; 0xcce <USB_Device_ProcessControlRequest+0x142>
     c96:	20 91 e0 01 	lds	r18, 0x01E0
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c9a:	23 30       	cpi	r18, 0x03	; 3
     c9c:	21 f4       	brne	.+8      	; 0xca6 <USB_Device_ProcessControlRequest+0x11a>
     c9e:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ca2:	80 62       	ori	r24, 0x20	; 32
     ca4:	12 c0       	rjmp	.+36     	; 0xcca <USB_Device_ProcessControlRequest+0x13e>
     ca6:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     caa:	90 61       	ori	r25, 0x10	; 16
     cac:	90 93 eb 00 	sts	0x00EB, r25
     cb0:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <USB_Device_ProcessControlRequest+0x12c>
     cb6:	22 0f       	add	r18, r18
     cb8:	8a 95       	dec	r24
     cba:	ea f7       	brpl	.-6      	; 0xcb6 <USB_Device_ProcessControlRequest+0x12a>
     cbc:	20 93 ea 00 	sts	0x00EA, r18
     cc0:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     cc4:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cc8:	88 60       	ori	r24, 0x08	; 8
     cca:	80 93 eb 00 	sts	0x00EB, r24
     cce:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cd2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cd6:	87 7f       	andi	r24, 0xF7	; 247
     cd8:	80 93 e8 00 	sts	0x00E8, r24
     cdc:	29 dd       	rcall	.-1454   	; 0x730 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     cde:	a3 c0       	rjmp	.+326    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     ce0:	81 11       	cpse	r24, r1
     ce2:	a1 c0       	rjmp	.+322    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ce4:	00 91 e1 01 	lds	r16, 0x01E1
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     ce8:	10 91 e2 01 	lds	r17, 0x01E2
     cec:	0f 77       	andi	r16, 0x7F	; 127
     cee:	11 27       	eor	r17, r17
     cf0:	e0 2e       	mov	r14, r16
     cf2:	ff b6       	in	r15, 0x3f	; 63
     cf4:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cf6:	80 91 e8 00 	lds	r24, 0x00E8
     cfa:	87 7f       	andi	r24, 0xF7	; 247
     cfc:	80 93 e8 00 	sts	0x00E8, r24
     d00:	17 dd       	rcall	.-1490   	; 0x730 <Endpoint_ClearStatusStage>
     d02:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d06:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d08:	fc cf       	rjmp	.-8      	; 0xd02 <USB_Device_ProcessControlRequest+0x176>
     d0a:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     d0e:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     d10:	80 2b       	or	r24, r16
     d12:	80 93 e3 00 	sts	0x00E3, r24
     d16:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
     d18:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     d1c:	ee 20       	and	r14, r14
     d1e:	11 f0       	breq	.+4      	; 0xd24 <USB_Device_ProcessControlRequest+0x198>
     d20:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <USB_Device_ProcessControlRequest+0x19a>
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	80 93 de 01 	sts	0x01DE, r24
     d2a:	ff be       	out	0x3f, r15	; 63
     d2c:	7c c0       	rjmp	.+248    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     d2e:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d30:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     d32:	08 f0       	brcs	.+2      	; 0xd36 <USB_Device_ProcessControlRequest+0x1aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d34:	78 c0       	rjmp	.+240    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     d36:	80 91 e1 01 	lds	r24, 0x01E1
     d3a:	90 91 e2 01 	lds	r25, 0x01E2
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d3e:	8c 3d       	cpi	r24, 0xDC	; 220
     d40:	23 e0       	ldi	r18, 0x03	; 3
     d42:	92 07       	cpc	r25, r18
     d44:	71 f5       	brne	.+92     	; 0xda2 <USB_Device_ProcessControlRequest+0x216>
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	8a 83       	std	Y+2, r24	; 0x02
     d4a:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d50:	f8 94       	cli
     d52:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d54:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d56:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     d58:	3e e0       	ldi	r19, 0x0E	; 14
     d5a:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d5c:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d5e:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d60:	50 93 57 00 	sts	0x0057, r21
     d64:	e4 91       	lpm	r30, Z+
     d66:	20 ff       	sbrs	r18, 0
     d68:	03 c0       	rjmp	.+6      	; 0xd70 <USB_Device_ProcessControlRequest+0x1e4>
     d6a:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     d6c:	ef 70       	andi	r30, 0x0F	; 15
     d6e:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     d70:	ef 70       	andi	r30, 0x0F	; 15
     d72:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     d74:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     d76:	ea 30       	cpi	r30, 0x0A	; 10
     d78:	10 f0       	brcs	.+4      	; 0xd7e <USB_Device_ProcessControlRequest+0x1f2>
     d7a:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <USB_Device_ProcessControlRequest+0x1f4>
     d7e:	c0 96       	adiw	r24, 0x30	; 48
     d80:	8d 93       	st	X+, r24
     d82:	9d 93       	st	X+, r25
     d84:	2f 5f       	subi	r18, 0xFF	; 255
     d86:	24 31       	cpi	r18, 0x14	; 20
     d88:	49 f7       	brne	.-46     	; 0xd5c <USB_Device_ProcessControlRequest+0x1d0>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d8a:	4f bf       	out	0x3f, r20	; 63
     d8c:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d90:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d92:	80 93 e8 00 	sts	0x00E8, r24
     d96:	6a e2       	ldi	r22, 0x2A	; 42
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	37 de       	rcall	.-914    	; 0xa0e <Endpoint_Write_Control_Stream_LE>
     da0:	11 c0       	rjmp	.+34     	; 0xdc4 <USB_Device_ProcessControlRequest+0x238>
     da2:	ae 01       	movw	r20, r28
     da4:	45 5d       	subi	r20, 0xD5	; 213
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	60 91 e3 01 	lds	r22, 0x01E3
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     dac:	4e dc       	rcall	.-1892   	; 0x64a <CALLBACK_USB_GetDescriptor>
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	d1 f1       	breq	.+116    	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     db2:	20 91 e8 00 	lds	r18, 0x00E8
     db6:	27 7f       	andi	r18, 0xF7	; 247
     db8:	20 93 e8 00 	sts	0x00E8, r18
     dbc:	bc 01       	movw	r22, r24
     dbe:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc0:	9c a5       	ldd	r25, Y+44	; 0x2c
     dc2:	84 de       	rcall	.-760    	; 0xacc <Endpoint_Write_Control_PStream_LE>
     dc4:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     dc8:	8b 77       	andi	r24, 0x7B	; 123
     dca:	80 93 e8 00 	sts	0x00E8, r24
     dce:	2b c0       	rjmp	.+86     	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dd0:	80 38       	cpi	r24, 0x80	; 128
     dd2:	49 f5       	brne	.+82     	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
     dd4:	80 91 e8 00 	lds	r24, 0x00E8
     dd8:	87 7f       	andi	r24, 0xF7	; 247
     dda:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     dde:	80 91 da 01 	lds	r24, 0x01DA
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     de2:	80 93 f1 00 	sts	0x00F1, r24
     de6:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     dea:	8e 77       	andi	r24, 0x7E	; 126
     dec:	75 cf       	rjmp	.-278    	; 0xcd8 <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     dee:	81 11       	cpse	r24, r1
     df0:	1a c0       	rjmp	.+52     	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     df2:	90 91 e1 01 	lds	r25, 0x01E1
     df6:	92 30       	cpi	r25, 0x02	; 2
     df8:	b0 f4       	brcc	.+44     	; 0xe26 <USB_Device_ProcessControlRequest+0x29a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dfa:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     dfe:	87 7f       	andi	r24, 0xF7	; 247
     e00:	80 93 e8 00 	sts	0x00E8, r24
     e04:	90 93 da 01 	sts	0x01DA, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e08:	93 dc       	rcall	.-1754   	; 0x730 <Endpoint_ClearStatusStage>
     e0a:	80 91 da 01 	lds	r24, 0x01DA
     e0e:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e10:	04 c0       	rjmp	.+8      	; 0xe1a <USB_Device_ProcessControlRequest+0x28e>
     e12:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     e16:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <USB_Device_ProcessControlRequest+0x292>
     e1a:	84 e0       	ldi	r24, 0x04	; 4
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <USB_Device_ProcessControlRequest+0x294>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e20:	80 93 de 01 	sts	0x01DE, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e24:	0c dc       	rcall	.-2024   	; 0x63e <EVENT_USB_Device_ConfigurationChanged>
     e26:	80 91 e8 00 	lds	r24, 0x00E8
     e2a:	83 ff       	sbrs	r24, 3
     e2c:	0a c0       	rjmp	.+20     	; 0xe42 <USB_Device_ProcessControlRequest+0x2b6>
     e2e:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
     e32:	80 62       	ori	r24, 0x20	; 32
     e34:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e38:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e3c:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e3e:	80 93 e8 00 	sts	0x00E8, r24
     e42:	ac 96       	adiw	r28, 0x2c	; 44
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     e52:	1f 91       	pop	r17
     e54:	0f 91       	pop	r16
     e56:	ff 90       	pop	r15
     e58:	ef 90       	pop	r14
     e5a:	08 95       	ret

00000e5c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     e5c:	08 95       	ret

00000e5e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e5e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     e60:	80 91 de 01 	lds	r24, 0x01DE
     e64:	88 23       	and	r24, r24
     e66:	59 f0       	breq	.+22     	; 0xe7e <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     e68:	c0 91 e9 00 	lds	r28, 0x00E9
     e6c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e6e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e72:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     e76:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
     e78:	89 de       	rcall	.-750    	; 0xb8c <USB_Device_ProcessControlRequest>
     e7a:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     e7e:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     e80:	08 95       	ret

00000e82 <CDC_Device_ConfigureEndpoints>:
     e82:	1f 93       	push	r17
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e8a:	0d 96       	adiw	r24, 0x0d	; 13
     e8c:	fc 01       	movw	r30, r24
     e8e:	8b e0       	ldi	r24, 0x0B	; 11
     e90:	df 01       	movw	r26, r30
     e92:	1d 92       	st	X+, r1
     e94:	8a 95       	dec	r24
     e96:	e9 f7       	brne	.-6      	; 0xe92 <CDC_Device_ConfigureEndpoints+0x10>

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     e98:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	18 13       	cpse	r17, r24
     e9e:	05 c0       	rjmp	.+10     	; 0xeaa <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
     ea0:	2a 81       	ldd	r18, Y+2	; 0x02
     ea2:	3b 81       	ldd	r19, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
     ea4:	4c 81       	ldd	r20, Y+4	; 0x04
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <CDC_Device_ConfigureEndpoints+0x36>
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	18 13       	cpse	r17, r24
     eae:	06 c0       	rjmp	.+12     	; 0xebc <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
     eb0:	2e 81       	ldd	r18, Y+6	; 0x06
     eb2:	3f 81       	ldd	r19, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
     eb4:	48 85       	ldd	r20, Y+8	; 0x08
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
			Direction    = ENDPOINT_DIR_OUT;
     eb6:	80 e0       	ldi	r24, 0x00	; 0
			Type         = EP_TYPE_BULK;
     eb8:	92 e0       	ldi	r25, 0x02	; 2
     eba:	0d c0       	rjmp	.+26     	; 0xed6 <CDC_Device_ConfigureEndpoints+0x54>
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
     ebc:	89 85       	ldd	r24, Y+9	; 0x09
     ebe:	18 17       	cp	r17, r24
     ec0:	29 f0       	breq	.+10     	; 0xecc <CDC_Device_ConfigureEndpoints+0x4a>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
     ec2:	1f 5f       	subi	r17, 0xFF	; 255
     ec4:	17 30       	cpi	r17, 0x07	; 7
     ec6:	49 f7       	brne	.-46     	; 0xe9a <CDC_Device_ConfigureEndpoints+0x18>
		{
			return false;
		}
	}

	return true;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	25 c0       	rjmp	.+74     	; 0xf16 <CDC_Device_ConfigureEndpoints+0x94>
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
     ecc:	2a 85       	ldd	r18, Y+10	; 0x0a
     ece:	3b 85       	ldd	r19, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
     ed0:	4c 85       	ldd	r20, Y+12	; 0x0c
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
			Direction    = ENDPOINT_DIR_IN;
     ed2:	80 e8       	ldi	r24, 0x80	; 128
			Type         = EP_TYPE_INTERRUPT;
     ed4:	93 e0       	ldi	r25, 0x03	; 3
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
     ed6:	44 23       	and	r20, r20
     ed8:	11 f0       	breq	.+4      	; 0xede <CDC_Device_ConfigureEndpoints+0x5c>
     eda:	44 e0       	ldi	r20, 0x04	; 4
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <CDC_Device_ConfigureEndpoints+0x5e>
     ede:	40 e0       	ldi	r20, 0x00	; 0
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     ee0:	e8 e0       	ldi	r30, 0x08	; 8
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	03 c0       	rjmp	.+6      	; 0xeee <CDC_Device_ConfigureEndpoints+0x6c>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     ee8:	5f 5f       	subi	r21, 0xFF	; 255
					CheckBytes <<= 1;
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     eee:	e2 17       	cp	r30, r18
     ef0:	f3 07       	cpc	r31, r19
     ef2:	d0 f3       	brcs	.-12     	; 0xee8 <CDC_Device_ConfigureEndpoints+0x66>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     ef4:	42 60       	ori	r20, 0x02	; 2
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     ef6:	52 95       	swap	r21
     ef8:	50 7f       	andi	r21, 0xF0	; 240
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     efa:	45 2b       	or	r20, r21
     efc:	b0 e4       	ldi	r27, 0x40	; 64
     efe:	9b 9f       	mul	r25, r27
     f00:	90 01       	movw	r18, r0
     f02:	11 24       	eor	r1, r1
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	81 11       	cpse	r24, r1
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <CDC_Device_ConfigureEndpoints+0x8a>
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	62 2b       	or	r22, r18
     f0e:	81 2f       	mov	r24, r17
     f10:	d9 db       	rcall	.-2126   	; 0x6c4 <Endpoint_ConfigureEndpoint_Prv>
     f12:	81 11       	cpse	r24, r1
     f14:	d6 cf       	rjmp	.-84     	; 0xec2 <CDC_Device_ConfigureEndpoints+0x40>
     f16:	df 91       	pop	r29
			return false;
		}
	}

	return true;
}
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	08 95       	ret

00000f1e <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     f1e:	cf 93       	push	r28
     f20:	c6 2f       	mov	r28, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f22:	20 91 de 01 	lds	r18, 0x01DE
     f26:	24 30       	cpi	r18, 0x04	; 4
     f28:	e9 f4       	brne	.+58     	; 0xf64 <CDC_Device_SendByte+0x46>
     f2a:	fc 01       	movw	r30, r24
     f2c:	41 89       	ldd	r20, Z+17	; 0x11
     f2e:	52 89       	ldd	r21, Z+18	; 0x12
     f30:	63 89       	ldd	r22, Z+19	; 0x13
     f32:	74 89       	ldd	r23, Z+20	; 0x14
     f34:	45 2b       	or	r20, r21
     f36:	46 2b       	or	r20, r22
     f38:	47 2b       	or	r20, r23
     f3a:	a1 f0       	breq	.+40     	; 0xf64 <CDC_Device_SendByte+0x46>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     f3c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f3e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f42:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     f46:	85 ff       	sbrs	r24, 5
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f4a:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0a c0       	rjmp	.+20     	; 0xf66 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f52:	80 91 e8 00 	lds	r24, 0x00E8
     f56:	8e 77       	andi	r24, 0x7E	; 126
     f58:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f5c:	0a dc       	rcall	.-2028   	; 0x772 <Endpoint_WaitUntilReady>
     f5e:	88 23       	and	r24, r24
     f60:	a1 f3       	breq	.-24     	; 0xf4a <CDC_Device_SendByte+0x2c>
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <CDC_Device_SendByte+0x48>
     f64:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f66:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f68:	08 95       	ret

00000f6a <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
     f6a:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
     f6c:	68 2f       	mov	r22, r24
     f6e:	84 85       	ldd	r24, Z+12	; 0x0c
     f70:	95 85       	ldd	r25, Z+13	; 0x0d
     f72:	d5 df       	rcall	.-86     	; 0xf1e <CDC_Device_SendByte>
     f74:	88 23       	and	r24, r24
     f76:	19 f0       	breq	.+6      	; 0xf7e <CDC_Device_putchar+0x14>
     f78:	2f ef       	ldi	r18, 0xFF	; 255
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <CDC_Device_putchar+0x18>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	c9 01       	movw	r24, r18
}
     f84:	08 95       	ret

00000f86 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f86:	20 91 de 01 	lds	r18, 0x01DE
     f8a:	24 30       	cpi	r18, 0x04	; 4
     f8c:	49 f5       	brne	.+82     	; 0xfe0 <CDC_Device_Flush+0x5a>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f8e:	fc 01       	movw	r30, r24
     f90:	41 89       	ldd	r20, Z+17	; 0x11
     f92:	52 89       	ldd	r21, Z+18	; 0x12
     f94:	63 89       	ldd	r22, Z+19	; 0x13
     f96:	74 89       	ldd	r23, Z+20	; 0x14
     f98:	45 2b       	or	r20, r21
     f9a:	46 2b       	or	r20, r22
     f9c:	47 2b       	or	r20, r23
     f9e:	01 f1       	breq	.+64     	; 0xfe0 <CDC_Device_Flush+0x5a>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     fa0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     fa2:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     fa6:	30 91 f3 00 	lds	r19, 0x00F3
     faa:	20 91 f2 00 	lds	r18, 0x00F2
     fae:	93 2f       	mov	r25, r19
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	82 2b       	or	r24, r18

	if (!(Endpoint_BytesInEndpoint()))
     fb4:	89 2b       	or	r24, r25
     fb6:	11 f4       	brne	.+4      	; 0xfbc <CDC_Device_Flush+0x36>
	  return ENDPOINT_READYWAIT_NoError;
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fbc:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fc0:	80 91 e8 00 	lds	r24, 0x00E8
     fc4:	8e 77       	andi	r24, 0x7E	; 126
     fc6:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     fca:	95 fd       	sbrc	r25, 5
     fcc:	f5 cf       	rjmp	.-22     	; 0xfb8 <CDC_Device_Flush+0x32>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     fce:	d1 db       	rcall	.-2142   	; 0x772 <Endpoint_WaitUntilReady>
     fd0:	81 11       	cpse	r24, r1
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <CDC_Device_Flush+0x5c>
     fd4:	90 91 e8 00 	lds	r25, 0x00E8
     fd8:	9e 77       	andi	r25, 0x7E	; 126
     fda:	90 93 e8 00 	sts	0x00E8, r25
     fde:	08 95       	ret
     fe0:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     fe2:	08 95       	ret

00000fe4 <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     fe4:	20 91 de 01 	lds	r18, 0x01DE
     fe8:	24 30       	cpi	r18, 0x04	; 4
     fea:	51 f4       	brne	.+20     	; 0x1000 <CDC_Device_USBTask+0x1c>
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fec:	fc 01       	movw	r30, r24
     fee:	41 89       	ldd	r20, Z+17	; 0x11
     ff0:	52 89       	ldd	r21, Z+18	; 0x12
     ff2:	63 89       	ldd	r22, Z+19	; 0x13
     ff4:	74 89       	ldd	r23, Z+20	; 0x14
     ff6:	45 2b       	or	r20, r21
     ff8:	46 2b       	or	r20, r22
     ffa:	47 2b       	or	r20, r23
     ffc:	09 f0       	breq	.+2      	; 0x1000 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     ffe:	c3 cf       	rjmp	.-122    	; 0xf86 <CDC_Device_Flush>
    1000:	08 95       	ret

00001002 <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1002:	20 91 de 01 	lds	r18, 0x01DE
    1006:	24 30       	cpi	r18, 0x04	; 4
    1008:	19 f0       	breq	.+6      	; 0x1010 <CDC_Device_ReceiveByte+0xe>
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;
    100a:	2f ef       	ldi	r18, 0xFF	; 255
    100c:	3f ef       	ldi	r19, 0xFF	; 255
    100e:	2d c0       	rjmp	.+90     	; 0x106a <CDC_Device_ReceiveByte+0x68>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1010:	fc 01       	movw	r30, r24
    1012:	41 89       	ldd	r20, Z+17	; 0x11
    1014:	52 89       	ldd	r21, Z+18	; 0x12
    1016:	63 89       	ldd	r22, Z+19	; 0x13
    1018:	74 89       	ldd	r23, Z+20	; 0x14
    101a:	45 2b       	or	r20, r21
    101c:	46 2b       	or	r20, r22
    101e:	47 2b       	or	r20, r23
    1020:	a1 f3       	breq	.-24     	; 0x100a <CDC_Device_ReceiveByte+0x8>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    1022:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1024:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1028:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    102c:	82 ff       	sbrs	r24, 2
    102e:	ed cf       	rjmp	.-38     	; 0x100a <CDC_Device_ReceiveByte+0x8>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1030:	30 91 f3 00 	lds	r19, 0x00F3
    1034:	20 91 f2 00 	lds	r18, 0x00F2
    1038:	93 2f       	mov	r25, r19
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	82 2b       	or	r24, r18
	{
		if (Endpoint_BytesInEndpoint())
    103e:	89 2b       	or	r24, r25
    1040:	21 f0       	breq	.+8      	; 0x104a <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1042:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    104a:	2f ef       	ldi	r18, 0xFF	; 255
    104c:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    104e:	50 91 f3 00 	lds	r21, 0x00F3
    1052:	40 91 f2 00 	lds	r20, 0x00F2
    1056:	95 2f       	mov	r25, r21
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	84 2b       	or	r24, r20
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    105c:	89 2b       	or	r24, r25
    105e:	29 f4       	brne	.+10     	; 0x106a <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1060:	80 91 e8 00 	lds	r24, 0x00E8
    1064:	8b 77       	andi	r24, 0x7B	; 123
    1066:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    106a:	c9 01       	movw	r24, r18
    106c:	08 95       	ret

0000106e <CDC_Device_getchar_Blocking>:

	return ReceivedByte;
}

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
    1074:	08 c0       	rjmp	.+16     	; 0x1086 <CDC_Device_getchar_Blocking+0x18>
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    1076:	80 91 de 01 	lds	r24, 0x01DE
    107a:	88 23       	and	r24, r24
    107c:	59 f0       	breq	.+22     	; 0x1094 <CDC_Device_getchar_Blocking+0x26>
		  return _FDEV_EOF;

		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    107e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1080:	9d 85       	ldd	r25, Y+13	; 0x0d
    1082:	b0 df       	rcall	.-160    	; 0xfe4 <CDC_Device_USBTask>
    1084:	ec de       	rcall	.-552    	; 0xe5e <USB_USBTask>
		USB_USBTask();
    1086:	8c 85       	ldd	r24, Y+12	; 0x0c
    1088:	9d 85       	ldd	r25, Y+13	; 0x0d

static int CDC_Device_getchar_Blocking(FILE* Stream)
{
	int16_t ReceivedByte;

	while ((ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream))) < 0)
    108a:	bb df       	rcall	.-138    	; 0x1002 <CDC_Device_ReceiveByte>
    108c:	9c 01       	movw	r18, r24
    108e:	97 fd       	sbrc	r25, 7
    1090:	f2 cf       	rjmp	.-28     	; 0x1076 <CDC_Device_getchar_Blocking+0x8>
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <CDC_Device_getchar_Blocking+0x2a>
    1094:	2e ef       	ldi	r18, 0xFE	; 254
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	c9 01       	movw	r24, r18
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return _FDEV_EOF;
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
		CDC_Device_USBTask((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
		USB_USBTask();
	}

	return ReceivedByte;
}
    109e:	08 95       	ret

000010a0 <CDC_Device_CreateBlockingStream>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
    10a0:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
    10a2:	2e e0       	ldi	r18, 0x0E	; 14
    10a4:	db 01       	movw	r26, r22
    10a6:	1d 92       	st	X+, r1
    10a8:	2a 95       	dec	r18
    10aa:	e9 f7       	brne	.-6      	; 0x10a6 <CDC_Device_CreateBlockingStream+0x6>
    10ac:	23 e0       	ldi	r18, 0x03	; 3
    10ae:	23 83       	std	Z+3, r18	; 0x03
    10b0:	25 eb       	ldi	r18, 0xB5	; 181
    10b2:	37 e0       	ldi	r19, 0x07	; 7
    10b4:	31 87       	std	Z+9, r19	; 0x09
    10b6:	20 87       	std	Z+8, r18	; 0x08
    10b8:	27 e3       	ldi	r18, 0x37	; 55
    10ba:	38 e0       	ldi	r19, 0x08	; 8
    10bc:	33 87       	std	Z+11, r19	; 0x0b
    10be:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    10c0:	95 87       	std	Z+13, r25	; 0x0d
    10c2:	84 87       	std	Z+12, r24	; 0x0c
    10c4:	08 95       	ret

000010c6 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    10c6:	08 95       	ret

000010c8 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10d2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    10d6:	83 ff       	sbrs	r24, 3
    10d8:	a9 c0       	rjmp	.+338    	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    10da:	88 81       	ld	r24, Y
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	20 91 e3 01 	lds	r18, 0x01E3
    10e2:	30 91 e4 01 	lds	r19, 0x01E4
    10e6:	28 17       	cp	r18, r24
    10e8:	39 07       	cpc	r19, r25
    10ea:	09 f0       	breq	.+2      	; 0x10ee <CDC_Device_ProcessControlRequest+0x26>
    10ec:	9f c0       	rjmp	.+318    	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
	  return;

	switch (USB_ControlRequest.bRequest)
    10ee:	80 91 e0 01 	lds	r24, 0x01E0
    10f2:	81 32       	cpi	r24, 0x21	; 33
    10f4:	61 f0       	breq	.+24     	; 0x110e <CDC_Device_ProcessControlRequest+0x46>
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <CDC_Device_ProcessControlRequest+0x38>
    10f8:	80 32       	cpi	r24, 0x20	; 32
    10fa:	09 f0       	breq	.+2      	; 0x10fe <CDC_Device_ProcessControlRequest+0x36>
    10fc:	97 c0       	rjmp	.+302    	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <CDC_Device_ProcessControlRequest+0xb6>
    1100:	82 32       	cpi	r24, 0x22	; 34
    1102:	09 f4       	brne	.+2      	; 0x1106 <CDC_Device_ProcessControlRequest+0x3e>
    1104:	6b c0       	rjmp	.+214    	; 0x11dc <CDC_Device_ProcessControlRequest+0x114>
    1106:	83 32       	cpi	r24, 0x23	; 35
    1108:	09 f0       	breq	.+2      	; 0x110c <CDC_Device_ProcessControlRequest+0x44>
    110a:	90 c0       	rjmp	.+288    	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
    110c:	7d c0       	rjmp	.+250    	; 0x1208 <CDC_Device_ProcessControlRequest+0x140>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    110e:	80 91 df 01 	lds	r24, 0x01DF
    1112:	81 3a       	cpi	r24, 0xA1	; 161
    1114:	09 f0       	breq	.+2      	; 0x1118 <CDC_Device_ProcessControlRequest+0x50>
    1116:	8a c0       	rjmp	.+276    	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1118:	80 91 e8 00 	lds	r24, 0x00E8
    111c:	87 7f       	andi	r24, 0xF7	; 247
    111e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1122:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1126:	80 ff       	sbrs	r24, 0
    1128:	fc cf       	rjmp	.-8      	; 0x1122 <CDC_Device_ProcessControlRequest+0x5a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    112a:	49 89       	ldd	r20, Y+17	; 0x11
    112c:	5a 89       	ldd	r21, Y+18	; 0x12
    112e:	6b 89       	ldd	r22, Y+19	; 0x13
    1130:	7c 89       	ldd	r23, Y+20	; 0x14
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1132:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    1136:	05 2f       	mov	r16, r21
    1138:	16 2f       	mov	r17, r22
    113a:	27 2f       	mov	r18, r23
    113c:	33 27       	eor	r19, r19
    113e:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 16);
    1142:	8b 01       	movw	r16, r22
    1144:	22 27       	eor	r18, r18
    1146:	33 27       	eor	r19, r19
    1148:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 24);
    114c:	47 2f       	mov	r20, r23
    114e:	55 27       	eor	r21, r21
    1150:	66 27       	eor	r22, r22
    1152:	77 27       	eor	r23, r23
    1154:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1158:	8d 89       	ldd	r24, Y+21	; 0x15
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    115a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    115e:	8e 89       	ldd	r24, Y+22	; 0x16
    1160:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1164:	8f 89       	ldd	r24, Y+23	; 0x17
    1166:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    116a:	80 91 e8 00 	lds	r24, 0x00E8
    116e:	8e 77       	andi	r24, 0x7E	; 126
    1170:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    117c:	d9 ca       	rjmp	.-2638   	; 0x730 <Endpoint_ClearStatusStage>
    117e:	80 91 df 01 	lds	r24, 0x01DF
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1182:	81 32       	cpi	r24, 0x21	; 33
    1184:	09 f0       	breq	.+2      	; 0x1188 <CDC_Device_ProcessControlRequest+0xc0>
    1186:	52 c0       	rjmp	.+164    	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
    1188:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    118c:	87 7f       	andi	r24, 0xF7	; 247
    118e:	80 93 e8 00 	sts	0x00E8, r24
    1192:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1196:	82 ff       	sbrs	r24, 2
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()));
    1198:	fc cf       	rjmp	.-8      	; 0x1192 <CDC_Device_ProcessControlRequest+0xca>
    119a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    119e:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    11a2:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    11a6:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    11aa:	39 8b       	std	Y+17, r19	; 0x11

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    11ac:	2a 8b       	std	Y+18, r18	; 0x12
    11ae:	9b 8b       	std	Y+19, r25	; 0x13
    11b0:	8c 8b       	std	Y+20, r24	; 0x14
    11b2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    11b6:	8d 8b       	std	Y+21, r24	; 0x15
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    11b8:	80 91 f1 00 	lds	r24, 0x00F1
    11bc:	8e 8b       	std	Y+22, r24	; 0x16
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    11be:	80 91 f1 00 	lds	r24, 0x00F1
    11c2:	8f 8b       	std	Y+23, r24	; 0x17
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    11c4:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    11c8:	8b 77       	andi	r24, 0x7B	; 123
    11ca:	80 93 e8 00 	sts	0x00E8, r24
    11ce:	b0 da       	rcall	.-2720   	; 0x730 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    11d0:	ce 01       	movw	r24, r28
    11d2:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    11d4:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	75 cf       	rjmp	.-278    	; 0x10c6 <CDC_Device_Event_Stub>
    11dc:	80 91 df 01 	lds	r24, 0x01DF
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    11e0:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    11e2:	21 f5       	brne	.+72     	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
    11e4:	80 91 e8 00 	lds	r24, 0x00E8
    11e8:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11ea:	80 93 e8 00 	sts	0x00E8, r24
    11ee:	a0 da       	rcall	.-2752   	; 0x730 <Endpoint_ClearStatusStage>
    11f0:	80 91 e1 01 	lds	r24, 0x01E1
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    11f4:	90 91 e2 01 	lds	r25, 0x01E2

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    11f8:	9e 87       	std	Y+14, r25	; 0x0e
    11fa:	8d 87       	std	Y+13, r24	; 0x0d
    11fc:	ce 01       	movw	r24, r28
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1204:	0f 91       	pop	r16
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    1206:	5f cf       	rjmp	.-322    	; 0x10c6 <CDC_Device_Event_Stub>
    1208:	80 91 df 01 	lds	r24, 0x01DF
    120c:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    120e:	71 f4       	brne	.+28     	; 0x122c <CDC_Device_ProcessControlRequest+0x164>
    1210:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1214:	87 7f       	andi	r24, 0xF7	; 247
    1216:	80 93 e8 00 	sts	0x00E8, r24
    121a:	8a da       	rcall	.-2796   	; 0x730 <Endpoint_ClearStatusStage>
    121c:	60 91 e1 01 	lds	r22, 0x01E1
    1220:	ce 01       	movw	r24, r28
    1222:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1224:	cf 91       	pop	r28
    1226:	1f 91       	pop	r17

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1228:	0f 91       	pop	r16
    122a:	4d cf       	rjmp	.-358    	; 0x10c6 <CDC_Device_Event_Stub>
    122c:	df 91       	pop	r29
			}

			break;
	}
}
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <main>:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1236:	f1 d9       	rcall	.-3102   	; 0x61a <initUSBSerial>
    1238:	1a d8       	rcall	.-4044   	; 0x26e <_Z7initRTCv>
			}

			break;
	}
}
    123a:	0c d8       	rcall	.-4072   	; 0x254 <_Z11analogSetupv>
    123c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_Z9setRefVCCv>
    1240:	85 e2       	ldi	r24, 0x25	; 37
    1242:	90 e0       	ldi	r25, 0x00	; 0
	int pin = 0;
	initUSBSerial();
	initRTC();
 	
	analogSetup();	
	setRefVCC();
    1244:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z6setPins>
	pin = setPin(37);
    1248:	98 2e       	mov	r9, r24
    124a:	89 2e       	mov	r8, r25
    124c:	c0 e0       	ldi	r28, 0x00	; 0
    124e:	d0 e0       	ldi	r29, 0x00	; 0
    1250:	80 e4       	ldi	r24, 0x40	; 64
#include <avr/pgmspace.h>
#include "pins/awesomedip.h"
int main(void)
{
	
	int i = 0;
    1252:	78 2e       	mov	r7, r24
    1254:	c1 2c       	mov	r12, r1
	pin = setPin(37);

	while(true)
	{
		short temp = convert();
		printf("pin %d = %d or %d deg C read %d times ADCSRB = %x ADMUX = %x 1<<6 = %x \n\r", pin, temp, (short)((((long)temp*500l)/1024l)-273), i, ADCSRB, ADMUX, 1<<6);
    1256:	94 e0       	ldi	r25, 0x04	; 4
    1258:	d9 2e       	mov	r13, r25
    125a:	e1 2c       	mov	r14, r1
    125c:	f1 2c       	mov	r15, r1
    125e:	0d e7       	ldi	r16, 0x7D	; 125
    1260:	11 e0       	ldi	r17, 0x01	; 1
    1262:	0e 94 0c 01 	call	0x218	; 0x218 <_Z7convertv>
    1266:	b8 2e       	mov	r11, r24
	setRefVCC();
	pin = setPin(37);

	while(true)
	{
		short temp = convert();
    1268:	a9 2e       	mov	r10, r25
    126a:	90 91 7c 00 	lds	r25, 0x007C
    126e:	80 91 7b 00 	lds	r24, 0x007B
		printf("pin %d = %d or %d deg C read %d times ADCSRB = %x ADMUX = %x 1<<6 = %x \n\r", pin, temp, (short)((((long)temp*500l)/1024l)-273), i, ADCSRB, ADMUX, 1<<6);
    1272:	1f 92       	push	r1
    1274:	7f 92       	push	r7
    1276:	1f 92       	push	r1
    1278:	9f 93       	push	r25
    127a:	1f 92       	push	r1
    127c:	8f 93       	push	r24
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	24 ef       	ldi	r18, 0xF4	; 244
    1284:	31 e0       	ldi	r19, 0x01	; 1
    1286:	ab 2d       	mov	r26, r11
    1288:	ba 2d       	mov	r27, r10
    128a:	21 d0       	rcall	.+66     	; 0x12ce <__usmulhisi3>
    128c:	a7 01       	movw	r20, r14
    128e:	96 01       	movw	r18, r12
    1290:	24 d0       	rcall	.+72     	; 0x12da <__divmodsi4>
    1292:	21 51       	subi	r18, 0x11	; 17
    1294:	31 40       	sbci	r19, 0x01	; 1
    1296:	3f 93       	push	r19
    1298:	2f 93       	push	r18
    129a:	af 92       	push	r10
    129c:	bf 92       	push	r11
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	1f 93       	push	r17
    12a4:	0f 93       	push	r16
    12a6:	62 d0       	rcall	.+196    	; 0x136c <printf>
    12a8:	61 e0       	ldi	r22, 0x01	; 1
    12aa:	88 e0       	ldi	r24, 0x08	; 8
    12ac:	55 d9       	rcall	.-3414   	; 0x558 <_Z12setDirectioncc>
    12ae:	61 e0       	ldi	r22, 0x01	; 1
    12b0:	88 e0       	ldi	r24, 0x08	; 8
    12b2:	1f d9       	rcall	.-3522   	; 0x4f2 <_Z12digitalWritecc>
		setDirection(8, 1);
    12b4:	84 e6       	ldi	r24, 0x64	; 100
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	b3 d8       	rcall	.-3738   	; 0x420 <_Z11delayMillisj>
    12ba:	21 96       	adiw	r28, 0x01	; 1
		digitalWrite(8,1);
    12bc:	8d b7       	in	r24, 0x3d	; 61
    12be:	9e b7       	in	r25, 0x3e	; 62
    12c0:	40 96       	adiw	r24, 0x10	; 16
    12c2:	0f b6       	in	r0, 0x3f	; 63
		delayMillis(100);
    12c4:	f8 94       	cli
    12c6:	9e bf       	out	0x3e, r25	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	8d bf       	out	0x3d, r24	; 61
		i++;
    12cc:	ca cf       	rjmp	.-108    	; 0x1262 <main+0x2c>

000012ce <__usmulhisi3>:
    12ce:	20 d0       	rcall	.+64     	; 0x1310 <__umulhisi3>

000012d0 <__usmulhisi3_tail>:
    12d0:	b7 ff       	sbrs	r27, 7
    12d2:	08 95       	ret
    12d4:	82 1b       	sub	r24, r18
    12d6:	93 0b       	sbc	r25, r19
    12d8:	08 95       	ret

000012da <__divmodsi4>:
    12da:	05 2e       	mov	r0, r21
    12dc:	97 fb       	bst	r25, 7
    12de:	16 f4       	brtc	.+4      	; 0x12e4 <__divmodsi4+0xa>
    12e0:	00 94       	com	r0
    12e2:	06 d0       	rcall	.+12     	; 0x12f0 <__divmodsi4_neg1>
    12e4:	57 fd       	sbrc	r21, 7
    12e6:	0c d0       	rcall	.+24     	; 0x1300 <__divmodsi4_neg2>
    12e8:	1f d0       	rcall	.+62     	; 0x1328 <__udivmodsi4>
    12ea:	07 fc       	sbrc	r0, 7
    12ec:	09 d0       	rcall	.+18     	; 0x1300 <__divmodsi4_neg2>
    12ee:	7e f4       	brtc	.+30     	; 0x130e <__divmodsi4_exit>

000012f0 <__divmodsi4_neg1>:
    12f0:	90 95       	com	r25
    12f2:	80 95       	com	r24
    12f4:	70 95       	com	r23
    12f6:	61 95       	neg	r22
    12f8:	7f 4f       	sbci	r23, 0xFF	; 255
    12fa:	8f 4f       	sbci	r24, 0xFF	; 255
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	08 95       	ret

00001300 <__divmodsi4_neg2>:
    1300:	50 95       	com	r21
    1302:	40 95       	com	r20
    1304:	30 95       	com	r19
    1306:	21 95       	neg	r18
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	4f 4f       	sbci	r20, 0xFF	; 255
    130c:	5f 4f       	sbci	r21, 0xFF	; 255

0000130e <__divmodsi4_exit>:
    130e:	08 95       	ret

00001310 <__umulhisi3>:
    1310:	a2 9f       	mul	r26, r18
    1312:	b0 01       	movw	r22, r0
    1314:	b3 9f       	mul	r27, r19
    1316:	c0 01       	movw	r24, r0
    1318:	a3 9f       	mul	r26, r19
    131a:	01 d0       	rcall	.+2      	; 0x131e <__umulhisi3+0xe>
    131c:	b2 9f       	mul	r27, r18
    131e:	70 0d       	add	r23, r0
    1320:	81 1d       	adc	r24, r1
    1322:	11 24       	eor	r1, r1
    1324:	91 1d       	adc	r25, r1
    1326:	08 95       	ret

00001328 <__udivmodsi4>:
    1328:	a1 e2       	ldi	r26, 0x21	; 33
    132a:	1a 2e       	mov	r1, r26
    132c:	aa 1b       	sub	r26, r26
    132e:	bb 1b       	sub	r27, r27
    1330:	fd 01       	movw	r30, r26
    1332:	0d c0       	rjmp	.+26     	; 0x134e <__udivmodsi4_ep>

00001334 <__udivmodsi4_loop>:
    1334:	aa 1f       	adc	r26, r26
    1336:	bb 1f       	adc	r27, r27
    1338:	ee 1f       	adc	r30, r30
    133a:	ff 1f       	adc	r31, r31
    133c:	a2 17       	cp	r26, r18
    133e:	b3 07       	cpc	r27, r19
    1340:	e4 07       	cpc	r30, r20
    1342:	f5 07       	cpc	r31, r21
    1344:	20 f0       	brcs	.+8      	; 0x134e <__udivmodsi4_ep>
    1346:	a2 1b       	sub	r26, r18
    1348:	b3 0b       	sbc	r27, r19
    134a:	e4 0b       	sbc	r30, r20
    134c:	f5 0b       	sbc	r31, r21

0000134e <__udivmodsi4_ep>:
    134e:	66 1f       	adc	r22, r22
    1350:	77 1f       	adc	r23, r23
    1352:	88 1f       	adc	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	1a 94       	dec	r1
    1358:	69 f7       	brne	.-38     	; 0x1334 <__udivmodsi4_loop>
    135a:	60 95       	com	r22
    135c:	70 95       	com	r23
    135e:	80 95       	com	r24
    1360:	90 95       	com	r25
    1362:	9b 01       	movw	r18, r22
    1364:	ac 01       	movw	r20, r24
    1366:	bd 01       	movw	r22, r26
    1368:	cf 01       	movw	r24, r30
    136a:	08 95       	ret

0000136c <printf>:
    136c:	a2 e0       	ldi	r26, 0x02	; 2
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	eb eb       	ldi	r30, 0xBB	; 187
    1372:	f9 e0       	ldi	r31, 0x09	; 9
    1374:	8d c2       	rjmp	.+1306   	; 0x1890 <__prologue_saves__+0x20>
    1376:	fe 01       	movw	r30, r28
    1378:	37 96       	adiw	r30, 0x07	; 7
    137a:	61 91       	ld	r22, Z+
    137c:	71 91       	ld	r23, Z+
    137e:	fa 83       	std	Y+2, r31	; 0x02
    1380:	e9 83       	std	Y+1, r30	; 0x01
    1382:	af 01       	movw	r20, r30
    1384:	80 91 e9 01 	lds	r24, 0x01E9
    1388:	90 91 ea 01 	lds	r25, 0x01EA
    138c:	03 d0       	rcall	.+6      	; 0x1394 <vfprintf>
    138e:	22 96       	adiw	r28, 0x02	; 2
    1390:	e2 e0       	ldi	r30, 0x02	; 2
    1392:	9a c2       	rjmp	.+1332   	; 0x18c8 <__epilogue_restores__+0x20>

00001394 <vfprintf>:
    1394:	ac e0       	ldi	r26, 0x0C	; 12
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef ec       	ldi	r30, 0xCF	; 207
    139a:	f9 e0       	ldi	r31, 0x09	; 9
    139c:	69 c2       	rjmp	.+1234   	; 0x1870 <__prologue_saves__>
    139e:	7c 01       	movw	r14, r24
    13a0:	6b 01       	movw	r12, r22
    13a2:	8a 01       	movw	r16, r20
    13a4:	fc 01       	movw	r30, r24
    13a6:	17 82       	std	Z+7, r1	; 0x07
    13a8:	16 82       	std	Z+6, r1	; 0x06
    13aa:	83 81       	ldd	r24, Z+3	; 0x03
    13ac:	81 ff       	sbrs	r24, 1
    13ae:	ba c1       	rjmp	.+884    	; 0x1724 <vfprintf+0x390>
    13b0:	88 24       	eor	r8, r8
    13b2:	83 94       	inc	r8
    13b4:	91 2c       	mov	r9, r1
    13b6:	8c 0e       	add	r8, r28
    13b8:	9d 1e       	adc	r9, r29
    13ba:	f7 01       	movw	r30, r14
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	f6 01       	movw	r30, r12
    13c0:	93 fd       	sbrc	r25, 3
    13c2:	85 91       	lpm	r24, Z+
    13c4:	93 ff       	sbrs	r25, 3
    13c6:	81 91       	ld	r24, Z+
    13c8:	6f 01       	movw	r12, r30
    13ca:	88 23       	and	r24, r24
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <vfprintf+0x3c>
    13ce:	a6 c1       	rjmp	.+844    	; 0x171c <vfprintf+0x388>
    13d0:	85 32       	cpi	r24, 0x25	; 37
    13d2:	39 f4       	brne	.+14     	; 0x13e2 <vfprintf+0x4e>
    13d4:	93 fd       	sbrc	r25, 3
    13d6:	85 91       	lpm	r24, Z+
    13d8:	93 ff       	sbrs	r25, 3
    13da:	81 91       	ld	r24, Z+
    13dc:	6f 01       	movw	r12, r30
    13de:	85 32       	cpi	r24, 0x25	; 37
    13e0:	21 f4       	brne	.+8      	; 0x13ea <vfprintf+0x56>
    13e2:	b7 01       	movw	r22, r14
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	ba d1       	rcall	.+884    	; 0x175c <fputc>
    13e8:	e8 cf       	rjmp	.-48     	; 0x13ba <vfprintf+0x26>
    13ea:	71 2c       	mov	r7, r1
    13ec:	31 2c       	mov	r3, r1
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	20 32       	cpi	r18, 0x20	; 32
    13f2:	a8 f4       	brcc	.+42     	; 0x141e <vfprintf+0x8a>
    13f4:	8b 32       	cpi	r24, 0x2B	; 43
    13f6:	61 f0       	breq	.+24     	; 0x1410 <vfprintf+0x7c>
    13f8:	28 f4       	brcc	.+10     	; 0x1404 <vfprintf+0x70>
    13fa:	80 32       	cpi	r24, 0x20	; 32
    13fc:	51 f0       	breq	.+20     	; 0x1412 <vfprintf+0x7e>
    13fe:	83 32       	cpi	r24, 0x23	; 35
    1400:	71 f4       	brne	.+28     	; 0x141e <vfprintf+0x8a>
    1402:	0b c0       	rjmp	.+22     	; 0x141a <vfprintf+0x86>
    1404:	8d 32       	cpi	r24, 0x2D	; 45
    1406:	39 f0       	breq	.+14     	; 0x1416 <vfprintf+0x82>
    1408:	80 33       	cpi	r24, 0x30	; 48
    140a:	49 f4       	brne	.+18     	; 0x141e <vfprintf+0x8a>
    140c:	21 60       	ori	r18, 0x01	; 1
    140e:	28 c0       	rjmp	.+80     	; 0x1460 <vfprintf+0xcc>
    1410:	22 60       	ori	r18, 0x02	; 2
    1412:	24 60       	ori	r18, 0x04	; 4
    1414:	25 c0       	rjmp	.+74     	; 0x1460 <vfprintf+0xcc>
    1416:	28 60       	ori	r18, 0x08	; 8
    1418:	23 c0       	rjmp	.+70     	; 0x1460 <vfprintf+0xcc>
    141a:	20 61       	ori	r18, 0x10	; 16
    141c:	21 c0       	rjmp	.+66     	; 0x1460 <vfprintf+0xcc>
    141e:	27 fd       	sbrc	r18, 7
    1420:	27 c0       	rjmp	.+78     	; 0x1470 <vfprintf+0xdc>
    1422:	38 2f       	mov	r19, r24
    1424:	30 53       	subi	r19, 0x30	; 48
    1426:	3a 30       	cpi	r19, 0x0A	; 10
    1428:	78 f4       	brcc	.+30     	; 0x1448 <vfprintf+0xb4>
    142a:	26 ff       	sbrs	r18, 6
    142c:	06 c0       	rjmp	.+12     	; 0x143a <vfprintf+0xa6>
    142e:	fa e0       	ldi	r31, 0x0A	; 10
    1430:	7f 9e       	mul	r7, r31
    1432:	30 0d       	add	r19, r0
    1434:	11 24       	eor	r1, r1
    1436:	73 2e       	mov	r7, r19
    1438:	13 c0       	rjmp	.+38     	; 0x1460 <vfprintf+0xcc>
    143a:	8a e0       	ldi	r24, 0x0A	; 10
    143c:	38 9e       	mul	r3, r24
    143e:	30 0d       	add	r19, r0
    1440:	11 24       	eor	r1, r1
    1442:	33 2e       	mov	r3, r19
    1444:	20 62       	ori	r18, 0x20	; 32
    1446:	0c c0       	rjmp	.+24     	; 0x1460 <vfprintf+0xcc>
    1448:	8e 32       	cpi	r24, 0x2E	; 46
    144a:	21 f4       	brne	.+8      	; 0x1454 <vfprintf+0xc0>
    144c:	26 fd       	sbrc	r18, 6
    144e:	66 c1       	rjmp	.+716    	; 0x171c <vfprintf+0x388>
    1450:	20 64       	ori	r18, 0x40	; 64
    1452:	06 c0       	rjmp	.+12     	; 0x1460 <vfprintf+0xcc>
    1454:	8c 36       	cpi	r24, 0x6C	; 108
    1456:	11 f4       	brne	.+4      	; 0x145c <vfprintf+0xc8>
    1458:	20 68       	ori	r18, 0x80	; 128
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <vfprintf+0xcc>
    145c:	88 36       	cpi	r24, 0x68	; 104
    145e:	41 f4       	brne	.+16     	; 0x1470 <vfprintf+0xdc>
    1460:	f6 01       	movw	r30, r12
    1462:	93 fd       	sbrc	r25, 3
    1464:	85 91       	lpm	r24, Z+
    1466:	93 ff       	sbrs	r25, 3
    1468:	81 91       	ld	r24, Z+
    146a:	6f 01       	movw	r12, r30
    146c:	81 11       	cpse	r24, r1
    146e:	c0 cf       	rjmp	.-128    	; 0x13f0 <vfprintf+0x5c>
    1470:	98 2f       	mov	r25, r24
    1472:	95 54       	subi	r25, 0x45	; 69
    1474:	93 30       	cpi	r25, 0x03	; 3
    1476:	18 f0       	brcs	.+6      	; 0x147e <vfprintf+0xea>
    1478:	90 52       	subi	r25, 0x20	; 32
    147a:	93 30       	cpi	r25, 0x03	; 3
    147c:	28 f4       	brcc	.+10     	; 0x1488 <vfprintf+0xf4>
    147e:	0c 5f       	subi	r16, 0xFC	; 252
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	ff e3       	ldi	r31, 0x3F	; 63
    1484:	f9 83       	std	Y+1, r31	; 0x01
    1486:	0d c0       	rjmp	.+26     	; 0x14a2 <vfprintf+0x10e>
    1488:	83 36       	cpi	r24, 0x63	; 99
    148a:	31 f0       	breq	.+12     	; 0x1498 <vfprintf+0x104>
    148c:	83 37       	cpi	r24, 0x73	; 115
    148e:	71 f0       	breq	.+28     	; 0x14ac <vfprintf+0x118>
    1490:	83 35       	cpi	r24, 0x53	; 83
    1492:	09 f0       	breq	.+2      	; 0x1496 <vfprintf+0x102>
    1494:	5a c0       	rjmp	.+180    	; 0x154a <vfprintf+0x1b6>
    1496:	22 c0       	rjmp	.+68     	; 0x14dc <vfprintf+0x148>
    1498:	f8 01       	movw	r30, r16
    149a:	80 81       	ld	r24, Z
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	0e 5f       	subi	r16, 0xFE	; 254
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	66 24       	eor	r6, r6
    14a4:	63 94       	inc	r6
    14a6:	71 2c       	mov	r7, r1
    14a8:	54 01       	movw	r10, r8
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <vfprintf+0x140>
    14ac:	28 01       	movw	r4, r16
    14ae:	f2 e0       	ldi	r31, 0x02	; 2
    14b0:	4f 0e       	add	r4, r31
    14b2:	51 1c       	adc	r5, r1
    14b4:	f8 01       	movw	r30, r16
    14b6:	a0 80       	ld	r10, Z
    14b8:	b1 80       	ldd	r11, Z+1	; 0x01
    14ba:	26 ff       	sbrs	r18, 6
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <vfprintf+0x130>
    14be:	67 2d       	mov	r22, r7
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <vfprintf+0x134>
    14c4:	6f ef       	ldi	r22, 0xFF	; 255
    14c6:	7f ef       	ldi	r23, 0xFF	; 255
    14c8:	c5 01       	movw	r24, r10
    14ca:	2c 87       	std	Y+12, r18	; 0x0c
    14cc:	3c d1       	rcall	.+632    	; 0x1746 <strnlen>
    14ce:	3c 01       	movw	r6, r24
    14d0:	82 01       	movw	r16, r4
    14d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d4:	6f e7       	ldi	r22, 0x7F	; 127
    14d6:	26 2e       	mov	r2, r22
    14d8:	22 22       	and	r2, r18
    14da:	17 c0       	rjmp	.+46     	; 0x150a <vfprintf+0x176>
    14dc:	28 01       	movw	r4, r16
    14de:	f2 e0       	ldi	r31, 0x02	; 2
    14e0:	4f 0e       	add	r4, r31
    14e2:	51 1c       	adc	r5, r1
    14e4:	f8 01       	movw	r30, r16
    14e6:	a0 80       	ld	r10, Z
    14e8:	b1 80       	ldd	r11, Z+1	; 0x01
    14ea:	26 ff       	sbrs	r18, 6
    14ec:	03 c0       	rjmp	.+6      	; 0x14f4 <vfprintf+0x160>
    14ee:	67 2d       	mov	r22, r7
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x164>
    14f4:	6f ef       	ldi	r22, 0xFF	; 255
    14f6:	7f ef       	ldi	r23, 0xFF	; 255
    14f8:	c5 01       	movw	r24, r10
    14fa:	2c 87       	std	Y+12, r18	; 0x0c
    14fc:	19 d1       	rcall	.+562    	; 0x1730 <strnlen_P>
    14fe:	3c 01       	movw	r6, r24
    1500:	2c 85       	ldd	r18, Y+12	; 0x0c
    1502:	50 e8       	ldi	r21, 0x80	; 128
    1504:	25 2e       	mov	r2, r21
    1506:	22 2a       	or	r2, r18
    1508:	82 01       	movw	r16, r4
    150a:	23 fc       	sbrc	r2, 3
    150c:	1a c0       	rjmp	.+52     	; 0x1542 <vfprintf+0x1ae>
    150e:	05 c0       	rjmp	.+10     	; 0x151a <vfprintf+0x186>
    1510:	b7 01       	movw	r22, r14
    1512:	80 e2       	ldi	r24, 0x20	; 32
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	22 d1       	rcall	.+580    	; 0x175c <fputc>
    1518:	3a 94       	dec	r3
    151a:	83 2d       	mov	r24, r3
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	68 16       	cp	r6, r24
    1520:	79 06       	cpc	r7, r25
    1522:	b0 f3       	brcs	.-20     	; 0x1510 <vfprintf+0x17c>
    1524:	0e c0       	rjmp	.+28     	; 0x1542 <vfprintf+0x1ae>
    1526:	f5 01       	movw	r30, r10
    1528:	27 fc       	sbrc	r2, 7
    152a:	85 91       	lpm	r24, Z+
    152c:	27 fe       	sbrs	r2, 7
    152e:	81 91       	ld	r24, Z+
    1530:	5f 01       	movw	r10, r30
    1532:	b7 01       	movw	r22, r14
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	12 d1       	rcall	.+548    	; 0x175c <fputc>
    1538:	31 10       	cpse	r3, r1
    153a:	3a 94       	dec	r3
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	6f 1a       	sub	r6, r31
    1540:	71 08       	sbc	r7, r1
    1542:	61 14       	cp	r6, r1
    1544:	71 04       	cpc	r7, r1
    1546:	79 f7       	brne	.-34     	; 0x1526 <vfprintf+0x192>
    1548:	e6 c0       	rjmp	.+460    	; 0x1716 <vfprintf+0x382>
    154a:	84 36       	cpi	r24, 0x64	; 100
    154c:	11 f0       	breq	.+4      	; 0x1552 <vfprintf+0x1be>
    154e:	89 36       	cpi	r24, 0x69	; 105
    1550:	39 f5       	brne	.+78     	; 0x15a0 <vfprintf+0x20c>
    1552:	f8 01       	movw	r30, r16
    1554:	27 ff       	sbrs	r18, 7
    1556:	07 c0       	rjmp	.+14     	; 0x1566 <vfprintf+0x1d2>
    1558:	60 81       	ld	r22, Z
    155a:	71 81       	ldd	r23, Z+1	; 0x01
    155c:	82 81       	ldd	r24, Z+2	; 0x02
    155e:	93 81       	ldd	r25, Z+3	; 0x03
    1560:	0c 5f       	subi	r16, 0xFC	; 252
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	08 c0       	rjmp	.+16     	; 0x1576 <vfprintf+0x1e2>
    1566:	60 81       	ld	r22, Z
    1568:	71 81       	ldd	r23, Z+1	; 0x01
    156a:	88 27       	eor	r24, r24
    156c:	77 fd       	sbrc	r23, 7
    156e:	80 95       	com	r24
    1570:	98 2f       	mov	r25, r24
    1572:	0e 5f       	subi	r16, 0xFE	; 254
    1574:	1f 4f       	sbci	r17, 0xFF	; 255
    1576:	4f e6       	ldi	r20, 0x6F	; 111
    1578:	64 2e       	mov	r6, r20
    157a:	62 22       	and	r6, r18
    157c:	97 ff       	sbrs	r25, 7
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <vfprintf+0x1fe>
    1580:	90 95       	com	r25
    1582:	80 95       	com	r24
    1584:	70 95       	com	r23
    1586:	61 95       	neg	r22
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	f0 e8       	ldi	r31, 0x80	; 128
    1590:	6f 2a       	or	r6, r31
    1592:	2a e0       	ldi	r18, 0x0A	; 10
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	a4 01       	movw	r20, r8
    1598:	0d d1       	rcall	.+538    	; 0x17b4 <__ultoa_invert>
    159a:	a8 2e       	mov	r10, r24
    159c:	a8 18       	sub	r10, r8
    159e:	43 c0       	rjmp	.+134    	; 0x1626 <vfprintf+0x292>
    15a0:	85 37       	cpi	r24, 0x75	; 117
    15a2:	31 f4       	brne	.+12     	; 0x15b0 <vfprintf+0x21c>
    15a4:	3f ee       	ldi	r19, 0xEF	; 239
    15a6:	b3 2e       	mov	r11, r19
    15a8:	b2 22       	and	r11, r18
    15aa:	2a e0       	ldi	r18, 0x0A	; 10
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	24 c0       	rjmp	.+72     	; 0x15f8 <vfprintf+0x264>
    15b0:	99 ef       	ldi	r25, 0xF9	; 249
    15b2:	b9 2e       	mov	r11, r25
    15b4:	b2 22       	and	r11, r18
    15b6:	8f 36       	cpi	r24, 0x6F	; 111
    15b8:	b9 f0       	breq	.+46     	; 0x15e8 <vfprintf+0x254>
    15ba:	20 f4       	brcc	.+8      	; 0x15c4 <vfprintf+0x230>
    15bc:	88 35       	cpi	r24, 0x58	; 88
    15be:	09 f0       	breq	.+2      	; 0x15c2 <vfprintf+0x22e>
    15c0:	ad c0       	rjmp	.+346    	; 0x171c <vfprintf+0x388>
    15c2:	0d c0       	rjmp	.+26     	; 0x15de <vfprintf+0x24a>
    15c4:	80 37       	cpi	r24, 0x70	; 112
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <vfprintf+0x23c>
    15c8:	88 37       	cpi	r24, 0x78	; 120
    15ca:	09 f0       	breq	.+2      	; 0x15ce <vfprintf+0x23a>
    15cc:	a7 c0       	rjmp	.+334    	; 0x171c <vfprintf+0x388>
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x240>
    15d0:	20 e1       	ldi	r18, 0x10	; 16
    15d2:	b2 2a       	or	r11, r18
    15d4:	b4 fe       	sbrs	r11, 4
    15d6:	0b c0       	rjmp	.+22     	; 0x15ee <vfprintf+0x25a>
    15d8:	84 e0       	ldi	r24, 0x04	; 4
    15da:	b8 2a       	or	r11, r24
    15dc:	08 c0       	rjmp	.+16     	; 0x15ee <vfprintf+0x25a>
    15de:	24 ff       	sbrs	r18, 4
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <vfprintf+0x260>
    15e2:	e6 e0       	ldi	r30, 0x06	; 6
    15e4:	be 2a       	or	r11, r30
    15e6:	06 c0       	rjmp	.+12     	; 0x15f4 <vfprintf+0x260>
    15e8:	28 e0       	ldi	r18, 0x08	; 8
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	05 c0       	rjmp	.+10     	; 0x15f8 <vfprintf+0x264>
    15ee:	20 e1       	ldi	r18, 0x10	; 16
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <vfprintf+0x264>
    15f4:	20 e1       	ldi	r18, 0x10	; 16
    15f6:	32 e0       	ldi	r19, 0x02	; 2
    15f8:	f8 01       	movw	r30, r16
    15fa:	b7 fe       	sbrs	r11, 7
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <vfprintf+0x278>
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	0c 5f       	subi	r16, 0xFC	; 252
    1608:	1f 4f       	sbci	r17, 0xFF	; 255
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <vfprintf+0x284>
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 5f       	subi	r16, 0xFE	; 254
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	a4 01       	movw	r20, r8
    161a:	cc d0       	rcall	.+408    	; 0x17b4 <__ultoa_invert>
    161c:	a8 2e       	mov	r10, r24
    161e:	a8 18       	sub	r10, r8
    1620:	8f e7       	ldi	r24, 0x7F	; 127
    1622:	68 2e       	mov	r6, r24
    1624:	6b 20       	and	r6, r11
    1626:	66 fe       	sbrs	r6, 6
    1628:	0b c0       	rjmp	.+22     	; 0x1640 <vfprintf+0x2ac>
    162a:	36 2d       	mov	r19, r6
    162c:	3e 7f       	andi	r19, 0xFE	; 254
    162e:	a7 14       	cp	r10, r7
    1630:	50 f4       	brcc	.+20     	; 0x1646 <vfprintf+0x2b2>
    1632:	64 fe       	sbrs	r6, 4
    1634:	0a c0       	rjmp	.+20     	; 0x164a <vfprintf+0x2b6>
    1636:	62 fc       	sbrc	r6, 2
    1638:	08 c0       	rjmp	.+16     	; 0x164a <vfprintf+0x2b6>
    163a:	36 2d       	mov	r19, r6
    163c:	3e 7e       	andi	r19, 0xEE	; 238
    163e:	05 c0       	rjmp	.+10     	; 0x164a <vfprintf+0x2b6>
    1640:	ba 2c       	mov	r11, r10
    1642:	36 2d       	mov	r19, r6
    1644:	03 c0       	rjmp	.+6      	; 0x164c <vfprintf+0x2b8>
    1646:	ba 2c       	mov	r11, r10
    1648:	01 c0       	rjmp	.+2      	; 0x164c <vfprintf+0x2b8>
    164a:	b7 2c       	mov	r11, r7
    164c:	34 ff       	sbrs	r19, 4
    164e:	0d c0       	rjmp	.+26     	; 0x166a <vfprintf+0x2d6>
    1650:	fe 01       	movw	r30, r28
    1652:	ea 0d       	add	r30, r10
    1654:	f1 1d       	adc	r31, r1
    1656:	80 81       	ld	r24, Z
    1658:	80 33       	cpi	r24, 0x30	; 48
    165a:	11 f4       	brne	.+4      	; 0x1660 <vfprintf+0x2cc>
    165c:	39 7e       	andi	r19, 0xE9	; 233
    165e:	09 c0       	rjmp	.+18     	; 0x1672 <vfprintf+0x2de>
    1660:	32 ff       	sbrs	r19, 2
    1662:	06 c0       	rjmp	.+12     	; 0x1670 <vfprintf+0x2dc>
    1664:	b3 94       	inc	r11
    1666:	b3 94       	inc	r11
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <vfprintf+0x2de>
    166a:	83 2f       	mov	r24, r19
    166c:	86 78       	andi	r24, 0x86	; 134
    166e:	09 f0       	breq	.+2      	; 0x1672 <vfprintf+0x2de>
    1670:	b3 94       	inc	r11
    1672:	33 fd       	sbrc	r19, 3
    1674:	13 c0       	rjmp	.+38     	; 0x169c <vfprintf+0x308>
    1676:	30 ff       	sbrs	r19, 0
    1678:	0e c0       	rjmp	.+28     	; 0x1696 <vfprintf+0x302>
    167a:	7a 2c       	mov	r7, r10
    167c:	b3 14       	cp	r11, r3
    167e:	58 f4       	brcc	.+22     	; 0x1696 <vfprintf+0x302>
    1680:	73 0c       	add	r7, r3
    1682:	7b 18       	sub	r7, r11
    1684:	b3 2c       	mov	r11, r3
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <vfprintf+0x302>
    1688:	b7 01       	movw	r22, r14
    168a:	80 e2       	ldi	r24, 0x20	; 32
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	3c 87       	std	Y+12, r19	; 0x0c
    1690:	65 d0       	rcall	.+202    	; 0x175c <fputc>
    1692:	b3 94       	inc	r11
    1694:	3c 85       	ldd	r19, Y+12	; 0x0c
    1696:	b3 14       	cp	r11, r3
    1698:	b8 f3       	brcs	.-18     	; 0x1688 <vfprintf+0x2f4>
    169a:	04 c0       	rjmp	.+8      	; 0x16a4 <vfprintf+0x310>
    169c:	b3 14       	cp	r11, r3
    169e:	10 f4       	brcc	.+4      	; 0x16a4 <vfprintf+0x310>
    16a0:	3b 18       	sub	r3, r11
    16a2:	01 c0       	rjmp	.+2      	; 0x16a6 <vfprintf+0x312>
    16a4:	31 2c       	mov	r3, r1
    16a6:	34 ff       	sbrs	r19, 4
    16a8:	11 c0       	rjmp	.+34     	; 0x16cc <vfprintf+0x338>
    16aa:	b7 01       	movw	r22, r14
    16ac:	80 e3       	ldi	r24, 0x30	; 48
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	3c 87       	std	Y+12, r19	; 0x0c
    16b2:	54 d0       	rcall	.+168    	; 0x175c <fputc>
    16b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    16b6:	32 ff       	sbrs	r19, 2
    16b8:	1c c0       	rjmp	.+56     	; 0x16f2 <vfprintf+0x35e>
    16ba:	31 ff       	sbrs	r19, 1
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <vfprintf+0x330>
    16be:	88 e5       	ldi	r24, 0x58	; 88
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vfprintf+0x334>
    16c4:	88 e7       	ldi	r24, 0x78	; 120
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	b7 01       	movw	r22, r14
    16ca:	0c c0       	rjmp	.+24     	; 0x16e4 <vfprintf+0x350>
    16cc:	83 2f       	mov	r24, r19
    16ce:	86 78       	andi	r24, 0x86	; 134
    16d0:	81 f0       	breq	.+32     	; 0x16f2 <vfprintf+0x35e>
    16d2:	31 fd       	sbrc	r19, 1
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x346>
    16d6:	80 e2       	ldi	r24, 0x20	; 32
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x348>
    16da:	8b e2       	ldi	r24, 0x2B	; 43
    16dc:	37 fd       	sbrc	r19, 7
    16de:	8d e2       	ldi	r24, 0x2D	; 45
    16e0:	b7 01       	movw	r22, r14
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	3b d0       	rcall	.+118    	; 0x175c <fputc>
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <vfprintf+0x35e>
    16e8:	b7 01       	movw	r22, r14
    16ea:	80 e3       	ldi	r24, 0x30	; 48
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	36 d0       	rcall	.+108    	; 0x175c <fputc>
    16f0:	7a 94       	dec	r7
    16f2:	a7 14       	cp	r10, r7
    16f4:	c8 f3       	brcs	.-14     	; 0x16e8 <vfprintf+0x354>
    16f6:	aa 94       	dec	r10
    16f8:	f4 01       	movw	r30, r8
    16fa:	ea 0d       	add	r30, r10
    16fc:	f1 1d       	adc	r31, r1
    16fe:	b7 01       	movw	r22, r14
    1700:	80 81       	ld	r24, Z
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	2b d0       	rcall	.+86     	; 0x175c <fputc>
    1706:	a1 10       	cpse	r10, r1
    1708:	f6 cf       	rjmp	.-20     	; 0x16f6 <vfprintf+0x362>
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <vfprintf+0x382>
    170c:	b7 01       	movw	r22, r14
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	24 d0       	rcall	.+72     	; 0x175c <fputc>
    1714:	3a 94       	dec	r3
    1716:	31 10       	cpse	r3, r1
    1718:	f9 cf       	rjmp	.-14     	; 0x170c <vfprintf+0x378>
    171a:	4f ce       	rjmp	.-866    	; 0x13ba <vfprintf+0x26>
    171c:	f7 01       	movw	r30, r14
    171e:	26 81       	ldd	r18, Z+6	; 0x06
    1720:	37 81       	ldd	r19, Z+7	; 0x07
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <vfprintf+0x394>
    1724:	2f ef       	ldi	r18, 0xFF	; 255
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	c9 01       	movw	r24, r18
    172a:	2c 96       	adiw	r28, 0x0c	; 12
    172c:	e2 e1       	ldi	r30, 0x12	; 18
    172e:	bc c0       	rjmp	.+376    	; 0x18a8 <__epilogue_restores__>

00001730 <strnlen_P>:
    1730:	fc 01       	movw	r30, r24
    1732:	05 90       	lpm	r0, Z+
    1734:	61 50       	subi	r22, 0x01	; 1
    1736:	70 40       	sbci	r23, 0x00	; 0
    1738:	01 10       	cpse	r0, r1
    173a:	d8 f7       	brcc	.-10     	; 0x1732 <strnlen_P+0x2>
    173c:	80 95       	com	r24
    173e:	90 95       	com	r25
    1740:	8e 0f       	add	r24, r30
    1742:	9f 1f       	adc	r25, r31
    1744:	08 95       	ret

00001746 <strnlen>:
    1746:	fc 01       	movw	r30, r24
    1748:	61 50       	subi	r22, 0x01	; 1
    174a:	70 40       	sbci	r23, 0x00	; 0
    174c:	01 90       	ld	r0, Z+
    174e:	01 10       	cpse	r0, r1
    1750:	d8 f7       	brcc	.-10     	; 0x1748 <strnlen+0x2>
    1752:	80 95       	com	r24
    1754:	90 95       	com	r25
    1756:	8e 0f       	add	r24, r30
    1758:	9f 1f       	adc	r25, r31
    175a:	08 95       	ret

0000175c <fputc>:
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	8c 01       	movw	r16, r24
    1766:	eb 01       	movw	r28, r22
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	81 fd       	sbrc	r24, 1
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <fputc+0x18>
    176e:	0f ef       	ldi	r16, 0xFF	; 255
    1770:	1f ef       	ldi	r17, 0xFF	; 255
    1772:	1a c0       	rjmp	.+52     	; 0x17a8 <fputc+0x4c>
    1774:	82 ff       	sbrs	r24, 2
    1776:	0d c0       	rjmp	.+26     	; 0x1792 <fputc+0x36>
    1778:	2e 81       	ldd	r18, Y+6	; 0x06
    177a:	3f 81       	ldd	r19, Y+7	; 0x07
    177c:	8c 81       	ldd	r24, Y+4	; 0x04
    177e:	9d 81       	ldd	r25, Y+5	; 0x05
    1780:	28 17       	cp	r18, r24
    1782:	39 07       	cpc	r19, r25
    1784:	64 f4       	brge	.+24     	; 0x179e <fputc+0x42>
    1786:	e8 81       	ld	r30, Y
    1788:	f9 81       	ldd	r31, Y+1	; 0x01
    178a:	01 93       	st	Z+, r16
    178c:	f9 83       	std	Y+1, r31	; 0x01
    178e:	e8 83       	st	Y, r30
    1790:	06 c0       	rjmp	.+12     	; 0x179e <fputc+0x42>
    1792:	e8 85       	ldd	r30, Y+8	; 0x08
    1794:	f9 85       	ldd	r31, Y+9	; 0x09
    1796:	80 2f       	mov	r24, r16
    1798:	09 95       	icall
    179a:	89 2b       	or	r24, r25
    179c:	41 f7       	brne	.-48     	; 0x176e <fputc+0x12>
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	9f 83       	std	Y+7, r25	; 0x07
    17a6:	8e 83       	std	Y+6, r24	; 0x06
    17a8:	c8 01       	movw	r24, r16
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <__ultoa_invert>:
    17b4:	fa 01       	movw	r30, r20
    17b6:	aa 27       	eor	r26, r26
    17b8:	28 30       	cpi	r18, 0x08	; 8
    17ba:	51 f1       	breq	.+84     	; 0x1810 <__ultoa_invert+0x5c>
    17bc:	20 31       	cpi	r18, 0x10	; 16
    17be:	81 f1       	breq	.+96     	; 0x1820 <__ultoa_invert+0x6c>
    17c0:	e8 94       	clt
    17c2:	6f 93       	push	r22
    17c4:	6e 7f       	andi	r22, 0xFE	; 254
    17c6:	6e 5f       	subi	r22, 0xFE	; 254
    17c8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ca:	8f 4f       	sbci	r24, 0xFF	; 255
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	af 4f       	sbci	r26, 0xFF	; 255
    17d0:	b1 e0       	ldi	r27, 0x01	; 1
    17d2:	3e d0       	rcall	.+124    	; 0x1850 <__ultoa_invert+0x9c>
    17d4:	b4 e0       	ldi	r27, 0x04	; 4
    17d6:	3c d0       	rcall	.+120    	; 0x1850 <__ultoa_invert+0x9c>
    17d8:	67 0f       	add	r22, r23
    17da:	78 1f       	adc	r23, r24
    17dc:	89 1f       	adc	r24, r25
    17de:	9a 1f       	adc	r25, r26
    17e0:	a1 1d       	adc	r26, r1
    17e2:	68 0f       	add	r22, r24
    17e4:	79 1f       	adc	r23, r25
    17e6:	8a 1f       	adc	r24, r26
    17e8:	91 1d       	adc	r25, r1
    17ea:	a1 1d       	adc	r26, r1
    17ec:	6a 0f       	add	r22, r26
    17ee:	71 1d       	adc	r23, r1
    17f0:	81 1d       	adc	r24, r1
    17f2:	91 1d       	adc	r25, r1
    17f4:	a1 1d       	adc	r26, r1
    17f6:	20 d0       	rcall	.+64     	; 0x1838 <__ultoa_invert+0x84>
    17f8:	09 f4       	brne	.+2      	; 0x17fc <__ultoa_invert+0x48>
    17fa:	68 94       	set
    17fc:	3f 91       	pop	r19
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	26 9f       	mul	r18, r22
    1802:	11 24       	eor	r1, r1
    1804:	30 19       	sub	r19, r0
    1806:	30 5d       	subi	r19, 0xD0	; 208
    1808:	31 93       	st	Z+, r19
    180a:	de f6       	brtc	.-74     	; 0x17c2 <__ultoa_invert+0xe>
    180c:	cf 01       	movw	r24, r30
    180e:	08 95       	ret
    1810:	46 2f       	mov	r20, r22
    1812:	47 70       	andi	r20, 0x07	; 7
    1814:	40 5d       	subi	r20, 0xD0	; 208
    1816:	41 93       	st	Z+, r20
    1818:	b3 e0       	ldi	r27, 0x03	; 3
    181a:	0f d0       	rcall	.+30     	; 0x183a <__ultoa_invert+0x86>
    181c:	c9 f7       	brne	.-14     	; 0x1810 <__ultoa_invert+0x5c>
    181e:	f6 cf       	rjmp	.-20     	; 0x180c <__ultoa_invert+0x58>
    1820:	46 2f       	mov	r20, r22
    1822:	4f 70       	andi	r20, 0x0F	; 15
    1824:	40 5d       	subi	r20, 0xD0	; 208
    1826:	4a 33       	cpi	r20, 0x3A	; 58
    1828:	18 f0       	brcs	.+6      	; 0x1830 <__ultoa_invert+0x7c>
    182a:	49 5d       	subi	r20, 0xD9	; 217
    182c:	31 fd       	sbrc	r19, 1
    182e:	40 52       	subi	r20, 0x20	; 32
    1830:	41 93       	st	Z+, r20
    1832:	02 d0       	rcall	.+4      	; 0x1838 <__ultoa_invert+0x84>
    1834:	a9 f7       	brne	.-22     	; 0x1820 <__ultoa_invert+0x6c>
    1836:	ea cf       	rjmp	.-44     	; 0x180c <__ultoa_invert+0x58>
    1838:	b4 e0       	ldi	r27, 0x04	; 4
    183a:	a6 95       	lsr	r26
    183c:	97 95       	ror	r25
    183e:	87 95       	ror	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__ultoa_invert+0x86>
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 05       	cpc	r22, r1
    184c:	71 05       	cpc	r23, r1
    184e:	08 95       	ret
    1850:	9b 01       	movw	r18, r22
    1852:	ac 01       	movw	r20, r24
    1854:	0a 2e       	mov	r0, r26
    1856:	06 94       	lsr	r0
    1858:	57 95       	ror	r21
    185a:	47 95       	ror	r20
    185c:	37 95       	ror	r19
    185e:	27 95       	ror	r18
    1860:	ba 95       	dec	r27
    1862:	c9 f7       	brne	.-14     	; 0x1856 <__ultoa_invert+0xa2>
    1864:	62 0f       	add	r22, r18
    1866:	73 1f       	adc	r23, r19
    1868:	84 1f       	adc	r24, r20
    186a:	95 1f       	adc	r25, r21
    186c:	a0 1d       	adc	r26, r0
    186e:	08 95       	ret

00001870 <__prologue_saves__>:
    1870:	2f 92       	push	r2
    1872:	3f 92       	push	r3
    1874:	4f 92       	push	r4
    1876:	5f 92       	push	r5
    1878:	6f 92       	push	r6
    187a:	7f 92       	push	r7
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	ca 1b       	sub	r28, r26
    189a:	db 0b       	sbc	r29, r27
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	09 94       	ijmp

000018a8 <__epilogue_restores__>:
    18a8:	2a 88       	ldd	r2, Y+18	; 0x12
    18aa:	39 88       	ldd	r3, Y+17	; 0x11
    18ac:	48 88       	ldd	r4, Y+16	; 0x10
    18ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    18b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    18b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    18b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    18b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    18b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    18ba:	b9 84       	ldd	r11, Y+9	; 0x09
    18bc:	c8 84       	ldd	r12, Y+8	; 0x08
    18be:	df 80       	ldd	r13, Y+7	; 0x07
    18c0:	ee 80       	ldd	r14, Y+6	; 0x06
    18c2:	fd 80       	ldd	r15, Y+5	; 0x05
    18c4:	0c 81       	ldd	r16, Y+4	; 0x04
    18c6:	1b 81       	ldd	r17, Y+3	; 0x03
    18c8:	aa 81       	ldd	r26, Y+2	; 0x02
    18ca:	b9 81       	ldd	r27, Y+1	; 0x01
    18cc:	ce 0f       	add	r28, r30
    18ce:	d1 1d       	adc	r29, r1
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	ed 01       	movw	r28, r26
    18dc:	08 95       	ret

000018de <_exit>:
    18de:	f8 94       	cli

000018e0 <__stop_program>:
    18e0:	ff cf       	rjmp	.-2      	; 0x18e0 <__stop_program>
