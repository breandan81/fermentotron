   1               		.file	"ConfigDescriptor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.USB_GetNextDescriptor,"ax",@progbits
  11               	USB_GetNextDescriptor:
  12               	.LFB86:
  13               		.file 1 "../LUFA/Drivers/USB/Core/ConfigDescriptor.h"
   1:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /*
   2:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****              LUFA Library
   3:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
   5:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****            www.lufa-lib.org
   7:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** */
   8:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
   9:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /*
  10:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  12:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   without fee, provided that the above copyright notice appear in
  15:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   all copies and that both that the copyright notice and this
  16:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   documentation, and that the name of the author not be used in
  18:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   advertising or publicity pertaining to distribution of the
  19:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   software without specific, written prior permission.
  20:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  21:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   The author disclaim all warranties with regard to this
  22:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   software, including all implied warranties of merchantability
  23:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   special, indirect or consequential damages or any damages
  25:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   arising out of or in connection with the use or performance of
  28:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****   this software.
  29:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** */
  30:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  31:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /** \file
  32:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \brief USB Configuration Descriptor definitions.
  33:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \copydetails Group_ConfigDescriptorParser
  34:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *
  35:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  */
  38:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  39:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** /** \ingroup Group_Descriptors
  40:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \defgroup Group_ConfigDescriptorParser Configuration Descriptor Parser
  41:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  \brief USB Configuration Descriptor definitions.
  42:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *
  43:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  This section of the library gives a friendly API which can be used in host applications to easi
  44:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  parse an attached device's configuration descriptor so that endpoint, interface and other descr
  45:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  data can be extracted and used as needed.
  46:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *
  47:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  *  @{
  48:../LUFA/Drivers/USB/Core/ConfigDescriptor.h ****  */
  49:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  50:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** #ifndef __CONFIGDESCRIPTOR_H__
  51:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** #define __CONFIGDESCRIPTOR_H__
  52:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  53:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Includes: */
  54:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "../../../Common/Common.h"
  55:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "USBMode.h"
  56:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "HostStandardReq.h"
  57:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#include "StdDescriptors.h"
  58:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  59:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Enable C linkage for C++ Compilers: */
  60:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#if defined(__cplusplus)
  61:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			extern "C" {
  62:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#endif
  63:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  64:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Preprocessor Checks: */
  65:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  66:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  67:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		#endif
  68:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  69:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 	/* Public Interface - May be used in end-application: */
  70:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Macros: */
  71:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Casts a pointer to a descriptor inside the configuration descriptor into a pointer to the gi
  72:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  descriptor type.
  73:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
  74:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Usage Example:
  75:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \code
  76:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t* CurrDescriptor = &ConfigDescriptor[0]; // Pointing to the configuration header
  77:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  USB_Descriptor_Configuration_Header_t* ConfigHeaderPtr = DESCRIPTOR_PCAST(CurrDescriptor,
  78:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *                                                           USB_Descriptor_Configuration_Header
  79:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
  80:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  // Can now access elements of the configuration header struct using the -> indirection opera
  81:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \endcode
  82:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
  83:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_PCAST(DescriptorPtr, Type) ((Type*)(DescriptorPtr))
  84:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  85:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Casts a pointer to a descriptor inside the configuration descriptor into the given descripto
  86:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  type (as an actual struct instance rather than a pointer to a struct).
  87:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
  88:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Usage Example:
  89:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \code
  90:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t* CurrDescriptor = &ConfigDescriptor[0]; // Pointing to the configuration header
  91:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  USB_Descriptor_Configuration_Header_t ConfigHeader = DESCRIPTOR_CAST(CurrDescriptor,
  92:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *                                                       USB_Descriptor_Configuration_Header_t);
  93:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
  94:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  // Can now access elements of the configuration header struct using the . operator
  95:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \endcode
  96:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
  97:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_CAST(DescriptorPtr, Type)  (*DESCRIPTOR_PCAST(DescriptorPtr, Type))
  98:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
  99:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Returns the descriptor's type, expressed as the 8-bit type value in the header of the descri
 100:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  This value's meaning depends on the descriptor's placement in the descriptor, but standard t
 101:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  values can be accessed in the \ref USB_DescriptorTypes_t enum.
 102:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 103:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_TYPE(DescriptorPtr)    DESCRIPTOR_PCAST(DescriptorPtr, USB_Descriptor_Header_
 104:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 105:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Returns the descriptor's size, expressed as the 8-bit value indicating the number of bytes. 
 106:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			#define DESCRIPTOR_SIZE(DescriptorPtr)    DESCRIPTOR_PCAST(DescriptorPtr, USB_Descriptor_Header_
 107:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 108:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Type Defines: */
 109:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Type define for a Configuration Descriptor comparator function (function taking a pointer to
 110:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  of type void, returning a uint8_t value).
 111:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 112:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \see \ref USB_GetNextDescriptorComp function for more details.
 113:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 114:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			typedef uint8_t (* ConfigComparatorPtr_t)(void*);
 115:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 116:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Enums: */
 117:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Enum for the possible return codes of the \ref USB_Host_GetDeviceConfigDescriptor() function
 118:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			enum USB_Host_GetConfigDescriptor_ErrorCodes_t
 119:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
 120:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_Successful       = 0, /**< No error occurred while retrieving the configuration 
 121:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_DeviceDisconnect = 1, /**< The attached device was disconnected while retrieving
 122:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        * descriptor.
 123:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        */
 124:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_PipeError        = 2, /**< An error occurred in the pipe while sending the reque
 125:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_SetupStalled     = 3, /**< The attached device stalled the request to retrieve t
 126:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        * descriptor.
 127:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        */
 128:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_SoftwareTimeOut  = 4, /**< The request or data transfer timed out. */
 129:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_BuffOverflow     = 5, /**< The device's configuration descriptor is too large to
 130:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        * buffer.
 131:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                        */
 132:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				HOST_GETCONFIG_InvalidData      = 6, /**< The device returned invalid configuration descriptor 
 133:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			};
 134:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 135:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Enum for return values of a descriptor comparator function. */
 136:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			enum DSearch_Return_ErrorCodes_t
 137:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
 138:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_Found                = 0, /**< Current descriptor matches comparator criteria
 139:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_Fail                 = 1, /**< No further descriptor could possibly match cri
 140:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_NotFound             = 2, /**< Current descriptor does not match comparator c
 141:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			};
 142:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 143:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Enum for return values of \ref USB_GetNextDescriptorComp(). */
 144:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			enum DSearch_Comp_Return_ErrorCodes_t
 145:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
 146:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_Found           = 0, /**< Configuration descriptor now points to descrip
 147:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				                                             *   search criteria of the given comparator functi
 148:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_Fail            = 1, /**< Comparator function returned \ref DESCRIPTOR_S
 149:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				DESCRIPTOR_SEARCH_COMP_EndOfDescriptor = 2, /**< End of configuration descriptor reached before
 150:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			};
 151:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 152:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Function Prototypes: */
 153:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Retrieves the configuration descriptor data from an attached device via a standard request i
 154:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  including validity and size checking to prevent a buffer overflow.
 155:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 156:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in]     ConfigNumber   Device configuration descriptor number to fetch from the devic
 157:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *                                single configuration devices).
 158:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in,out] ConfigSizePtr  Pointer to a location for storing the retrieved configuration 
 159:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[out]    BufferPtr      Pointer to the buffer for storing the configuration descriptor
 160:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[out]    BufferSize     Size of the allocated buffer where the configuration descripto
 161:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 162:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \return A value from the \ref USB_Host_GetConfigDescriptor_ErrorCodes_t enum.
 163:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 164:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
 165:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                           uint16_t* const ConfigSizePtr,
 166:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                           void* const BufferPtr,
 167:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                           const uint16_t BufferSize) ATTR_NON_NULL_PTR_ARG(2) A
 168:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 169:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 170:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  The bytes remaining value is automatically decremented.
 171:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 172:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 173:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 174:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 175:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 176:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
 177:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                 void** const CurrConfigLoc,
 178:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                 const uint8_t Type)
 179:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                 ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 180:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 181:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 182:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  which must come before a descriptor of the second given type value. If the BeforeType type
 183:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  descriptor is reached first, the number of bytes remaining to process is set to zero and the
 184:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  function exits. The bytes remaining value is automatically decremented.
 185:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 186:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 187:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 188:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 189:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     BeforeType     Descriptor type value which must not be reached before the give
 190:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 191:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
 192:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       void** const CurrConfigLoc,
 193:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       const uint8_t Type,
 194:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       const uint8_t BeforeType)
 195:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                       ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 196:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 197:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips to the next sub-descriptor inside the configuration descriptor of the specified type v
 198:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  which must come after a descriptor of the second given type value. The bytes remaining value
 199:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  automatically decremented.
 200:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 201:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 202:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 203:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     Type           Descriptor type value to search for.
 204:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in]     AfterType      Descriptor type value which must be reached before the given Ty
 205:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 206:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
 207:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      void** const CurrConfigLoc,
 208:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      const uint8_t Type,
 209:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      const uint8_t AfterType)
 210:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                      ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
 211:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 212:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Searches for the next descriptor in the given configuration descriptor using a pre-made comp
 213:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  function. The routine updates the position and remaining configuration descriptor bytes valu
 214:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  automatically. If a comparator routine fails a search, the descriptor pointer is retreated b
 215:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  so that the next descriptor search invocation will start from the descriptor which first cau
 216:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  original search to fail. This behaviour allows for one comparator to be used immediately aft
 217:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  has failed, starting the second search from the descriptor which failed the first.
 218:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 219:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Comparator functions should be standard functions which accept a pointer to the header of th
 220:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  descriptor inside the configuration descriptor which is being compared, and should return a 
 221:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  the \ref DSearch_Return_ErrorCodes_t enum as a uint8_t value.
 222:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 223:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \note This function is available in USB Host mode only.
 224:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 225:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in,out] BytesRem           Pointer to an int storing the remaining bytes in the confi
 226:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in,out] CurrConfigLoc      Pointer to the current position in the configuration descr
 227:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \param[in]     ComparatorRoutine  Name of the comparator search function to use on the confi
 228:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 229:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \return Value of one of the members of the \ref DSearch_Comp_Return_ErrorCodes_t enum.
 230:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 231:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  Usage Example:
 232:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \code
 233:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t EndpointSearcher(void* CurrentDescriptor); // Comparator Prototype
 234:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 235:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  uint8_t EndpointSearcher(void* CurrentDescriptor)
 236:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  {
 237:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *     if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Endpoint)
 238:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *         return DESCRIPTOR_SEARCH_Found;
 239:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *     else
 240:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *         return DESCRIPTOR_SEARCH_NotFound;
 241:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  }
 242:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 243:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  //...
 244:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  // After retrieving configuration descriptor:
 245:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  if (USB_Host_GetNextDescriptorComp(&BytesRemaining, &CurrentConfigLoc, EndpointSearcher) ==
 246:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *      Descriptor_Search_Comp_Found)
 247:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  {
 248:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *      // Do something with the endpoint descriptor
 249:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  }
 250:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *  \endcode
 251:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 252:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
 253:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                  void** const CurrConfigLoc,
 254:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                  ConfigComparatorPtr_t const ComparatorRoutine);
 255:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 256:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 		/* Inline Functions: */
 257:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			/** Skips over the current sub-descriptor inside the configuration descriptor, so that the point
 258:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			    points to the next sub-descriptor. The bytes remaining value is automatically decremented.
 259:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 *
 260:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] BytesRem       Pointer to the number of bytes remaining of the configuration d
 261:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 * \param[in,out] CurrConfigLoc  Pointer to the current descriptor inside the configuration desc
 262:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			 */
 263:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
 264:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON
 265:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
 266:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			                                         void** CurrConfigLoc)
 267:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			{
  14               		.loc 1 267 0
  15               	.LVL0:
  16 0000 CF93      		push r28
  17               	.LCFI0:
  18 0002 DF93      		push r29
  19               	.LCFI1:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 2 */
  23               	.L__stack_usage = 2
  24 0004 FC01      		movw r30,r24
 268:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
  25               		.loc 1 268 0
  26 0006 EB01      		movw r28,r22
  27 0008 A881      		ld r26,Y
  28 000a B981      		ldd r27,Y+1
  29 000c 8C91      		ld r24,X
  30               	.LVL1:
  31 000e 90E0      		ldi r25,0
  32               	.LVL2:
  33 0010 2081      		ld r18,Z
  34 0012 3181      		ldd r19,Z+1
  35 0014 8217      		cp r24,r18
  36 0016 9307      		cpc r25,r19
  37 0018 00F4      		brsh .L2
  38 001a 9C01      		movw r18,r24
  39               	.L2:
  40               	.LVL3:
 269:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 270:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				if (*BytesRem < CurrDescriptorSize)
 271:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				  CurrDescriptorSize = *BytesRem;
 272:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 
 273:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
  41               		.loc 1 273 0
  42 001c A20F      		add r26,r18
  43 001e B31F      		adc r27,r19
  44 0020 EB01      		movw r28,r22
  45 0022 B983      		std Y+1,r27
  46 0024 A883      		st Y,r26
 274:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 				*BytesRem      -= CurrDescriptorSize;
  47               		.loc 1 274 0
  48 0026 8081      		ld r24,Z
  49 0028 9181      		ldd r25,Z+1
  50 002a 821B      		sub r24,r18
  51 002c 930B      		sbc r25,r19
  52 002e 9183      		std Z+1,r25
  53 0030 8083      		st Z,r24
  54               	/* epilogue start */
 275:../LUFA/Drivers/USB/Core/ConfigDescriptor.h **** 			}
  55               		.loc 1 275 0
  56 0032 DF91      		pop r29
  57 0034 CF91      		pop r28
  58 0036 0895      		ret
  59               	.LFE86:
  61               		.section	.text.USB_GetNextDescriptorOfType,"ax",@progbits
  62               	.global	USB_GetNextDescriptorOfType
  64               	USB_GetNextDescriptorOfType:
  65               	.LFB87:
  66               		.file 2 "../LUFA/Drivers/USB/Core/ConfigDescriptor.c"
   1:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** /*
   2:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****              LUFA Library
   3:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
   5:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****            www.lufa-lib.org
   7:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** */
   8:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
   9:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** /*
  10:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  12:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   software and its documentation for any purpose is hereby granted
  14:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   without fee, provided that the above copyright notice appear in
  15:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   all copies and that both that the copyright notice and this
  16:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   documentation, and that the name of the author not be used in
  18:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   advertising or publicity pertaining to distribution of the
  19:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   software without specific, written prior permission.
  20:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  21:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   The author disclaim all warranties with regard to this
  22:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   software, including all implied warranties of merchantability
  23:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   special, indirect or consequential damages or any damages
  25:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   in an action of contract, negligence or other tortious action,
  27:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   arising out of or in connection with the use or performance of
  28:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****   this software.
  29:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** */
  30:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  31:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #include "ConfigDescriptor.h"
  33:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  34:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #if defined(USB_CAN_BE_HOST)
  35:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
  36:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                            uint16_t* const ConfigSizePtr,
  37:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                            void* const BufferPtr,
  38:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                            const uint16_t BufferSize)
  39:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
  40:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	uint8_t ErrorCode;
  41:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];
  42:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  43:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	USB_ControlRequest = (USB_Request_Header_t)
  44:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
  45:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
  46:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.bRequest      = REQ_GetDescriptor,
  47:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
  48:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.wIndex        = 0,
  49:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
  50:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		};
  51:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  52:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	Pipe_SelectPipe(PIPE_CONTROLPIPE);
  53:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  54:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
  55:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return ErrorCode;
  56:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  57:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)
  58:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  59:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if (*ConfigSizePtr > BufferSize)
  60:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return HOST_GETCONFIG_BuffOverflow;
  61:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  62:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	USB_ControlRequest.wLength = *ConfigSizePtr;
  63:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  64:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
  65:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return ErrorCode;
  66:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  67:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
  68:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  return HOST_GETCONFIG_InvalidData;
  69:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  70:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	return HOST_GETCONFIG_Successful;
  71:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
  72:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** #endif
  73:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  74:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** void USB_GetNextDescriptorOfType(uint16_t* const BytesRem,
  75:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                  void** const CurrConfigLoc,
  76:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                  const uint8_t Type)
  77:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
  67               		.loc 2 77 0
  68               	.LVL4:
  69 0000 EF92      		push r14
  70               	.LCFI2:
  71 0002 FF92      		push r15
  72               	.LCFI3:
  73 0004 0F93      		push r16
  74               	.LCFI4:
  75 0006 1F93      		push r17
  76               	.LCFI5:
  77 0008 CF93      		push r28
  78               	.LCFI6:
  79 000a DF93      		push r29
  80               	.LCFI7:
  81 000c 1F92      		push __zero_reg__
  82               	.LCFI8:
  83 000e CDB7      		in r28,__SP_L__
  84 0010 DEB7      		in r29,__SP_H__
  85               	.LCFI9:
  86               	/* prologue: function */
  87               	/* frame size = 1 */
  88               	/* stack size = 7 */
  89               	.L__stack_usage = 7
  90 0012 7C01      		movw r14,r24
  91 0014 8B01      		movw r16,r22
  78:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
  92               		.loc 2 78 0
  93 0016 00C0      		rjmp .L4
  94               	.LVL5:
  95               	.L5:
  79:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	{
  80:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
  96               		.loc 2 80 0
  97 0018 B801      		movw r22,r16
  98 001a C701      		movw r24,r14
  99 001c 4983      		std Y+1,r20
 100 001e 0E94 0000 		call USB_GetNextDescriptor
 101               	.LVL6:
  81:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  82:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 102               		.loc 2 82 0
 103 0022 D801      		movw r26,r16
 104 0024 ED91      		ld r30,X+
 105 0026 FC91      		ld r31,X
 106 0028 8181      		ldd r24,Z+1
 107 002a 4981      		ldd r20,Y+1
 108 002c 8417      		cp r24,r20
 109 002e 01F0      		breq .L3
 110               	.L4:
  78:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 111               		.loc 2 78 0 discriminator 1
 112 0030 F701      		movw r30,r14
 113 0032 8081      		ld r24,Z
 114 0034 9181      		ldd r25,Z+1
 115 0036 892B      		or r24,r25
 116 0038 01F4      		brne .L5
 117               	.L3:
 118               	/* epilogue start */
  83:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		  return;
  84:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	}
  85:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 119               		.loc 2 85 0
 120 003a 0F90      		pop __tmp_reg__
 121 003c DF91      		pop r29
 122 003e CF91      		pop r28
 123 0040 1F91      		pop r17
 124 0042 0F91      		pop r16
 125               	.LVL7:
 126 0044 FF90      		pop r15
 127 0046 EF90      		pop r14
 128               	.LVL8:
 129 0048 0895      		ret
 130               	.LFE87:
 132               		.section	.text.USB_GetNextDescriptorOfTypeBefore,"ax",@progbits
 133               	.global	USB_GetNextDescriptorOfTypeBefore
 135               	USB_GetNextDescriptorOfTypeBefore:
 136               	.LFB88:
  86:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  87:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** void USB_GetNextDescriptorOfTypeBefore(uint16_t* const BytesRem,
  88:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                        void** const CurrConfigLoc,
  89:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                        const uint8_t Type,
  90:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                        const uint8_t BeforeType)
  91:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
 137               		.loc 2 91 0
 138               	.LVL9:
 139 0000 EF92      		push r14
 140               	.LCFI10:
 141 0002 FF92      		push r15
 142               	.LCFI11:
 143 0004 0F93      		push r16
 144               	.LCFI12:
 145 0006 1F93      		push r17
 146               	.LCFI13:
 147 0008 CF93      		push r28
 148               	.LCFI14:
 149 000a DF93      		push r29
 150               	.LCFI15:
 151 000c 00D0      		rcall .
 152               	.LCFI16:
 153 000e CDB7      		in r28,__SP_L__
 154 0010 DEB7      		in r29,__SP_H__
 155               	.LCFI17:
 156               	/* prologue: function */
 157               	/* frame size = 2 */
 158               	/* stack size = 8 */
 159               	.L__stack_usage = 8
 160 0012 7C01      		movw r14,r24
 161 0014 8B01      		movw r16,r22
  92:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 162               		.loc 2 92 0
 163 0016 00C0      		rjmp .L9
 164               	.LVL10:
 165               	.L12:
  93:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	{
  94:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 166               		.loc 2 94 0
 167 0018 B801      		movw r22,r16
 168 001a C701      		movw r24,r14
 169 001c 2A83      		std Y+2,r18
 170 001e 4983      		std Y+1,r20
 171 0020 0E94 0000 		call USB_GetNextDescriptor
 172               	.LVL11:
  95:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
  96:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		if (DESCRIPTOR_TYPE(*CurrConfigLoc) == Type)
 173               		.loc 2 96 0
 174 0024 D801      		movw r26,r16
 175 0026 ED91      		ld r30,X+
 176 0028 FC91      		ld r31,X
 177 002a 8181      		ldd r24,Z+1
 178 002c 4981      		ldd r20,Y+1
 179 002e 2A81      		ldd r18,Y+2
 180 0030 8417      		cp r24,r20
 181 0032 01F0      		breq .L8
  97:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
  98:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			return;
  99:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		}
 100:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		else if (DESCRIPTOR_TYPE(*CurrConfigLoc) == BeforeType)
 182               		.loc 2 100 0
 183 0034 8213      		cpse r24,r18
 184 0036 00C0      		rjmp .L9
 101:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
 102:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			*BytesRem = 0;
 185               		.loc 2 102 0
 186 0038 F701      		movw r30,r14
 187 003a 1182      		std Z+1,__zero_reg__
 188 003c 1082      		st Z,__zero_reg__
 103:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			return;
 189               		.loc 2 103 0
 190 003e 00C0      		rjmp .L8
 191               	.L9:
  92:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 192               		.loc 2 92 0 discriminator 1
 193 0040 D701      		movw r26,r14
 194 0042 8D91      		ld r24,X+
 195 0044 9C91      		ld r25,X
 196 0046 892B      		or r24,r25
 197 0048 01F4      		brne .L12
 198               	.L8:
 199               	/* epilogue start */
 104:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		}
 105:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	}
 106:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 200               		.loc 2 106 0
 201 004a 0F90      		pop __tmp_reg__
 202 004c 0F90      		pop __tmp_reg__
 203 004e DF91      		pop r29
 204 0050 CF91      		pop r28
 205 0052 1F91      		pop r17
 206 0054 0F91      		pop r16
 207               	.LVL12:
 208 0056 FF90      		pop r15
 209 0058 EF90      		pop r14
 210               	.LVL13:
 211 005a 0895      		ret
 212               	.LFE88:
 214               		.section	.text.USB_GetNextDescriptorOfTypeAfter,"ax",@progbits
 215               	.global	USB_GetNextDescriptorOfTypeAfter
 217               	USB_GetNextDescriptorOfTypeAfter:
 218               	.LFB89:
 107:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 108:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** void USB_GetNextDescriptorOfTypeAfter(uint16_t* const BytesRem,
 109:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                       void** const CurrConfigLoc,
 110:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                       const uint8_t Type,
 111:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                       const uint8_t AfterType)
 112:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
 219               		.loc 2 112 0
 220               	.LVL14:
 221 0000 FF92      		push r15
 222               	.LCFI18:
 223 0002 0F93      		push r16
 224               	.LCFI19:
 225 0004 1F93      		push r17
 226               	.LCFI20:
 227 0006 CF93      		push r28
 228               	.LCFI21:
 229 0008 DF93      		push r29
 230               	.LCFI22:
 231               	/* prologue: function */
 232               	/* frame size = 0 */
 233               	/* stack size = 5 */
 234               	.L__stack_usage = 5
 235 000a EC01      		movw r28,r24
 236 000c 8B01      		movw r16,r22
 237 000e F42E      		mov r15,r20
 113:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
 238               		.loc 2 113 0
 239 0010 422F      		mov r20,r18
 240               	.LVL15:
 241 0012 0E94 0000 		call USB_GetNextDescriptorOfType
 242               	.LVL16:
 114:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 115:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	if (*BytesRem)
 243               		.loc 2 115 0
 244 0016 8881      		ld r24,Y
 245 0018 9981      		ldd r25,Y+1
 246 001a 892B      		or r24,r25
 247 001c 01F0      		breq .L15
 116:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 248               		.loc 2 116 0
 249 001e 4F2D      		mov r20,r15
 250 0020 B801      		movw r22,r16
 251 0022 CE01      		movw r24,r28
 252               	/* epilogue start */
 117:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 253               		.loc 2 117 0
 254 0024 DF91      		pop r29
 255 0026 CF91      		pop r28
 256               	.LVL17:
 257 0028 1F91      		pop r17
 258 002a 0F91      		pop r16
 259               	.LVL18:
 260 002c FF90      		pop r15
 261               	.LVL19:
 116:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
 262               		.loc 2 116 0
 263 002e 0C94 0000 		jmp USB_GetNextDescriptorOfType
 264               	.LVL20:
 265               	.L15:
 266               	/* epilogue start */
 267               		.loc 2 117 0
 268 0032 DF91      		pop r29
 269 0034 CF91      		pop r28
 270               	.LVL21:
 271 0036 1F91      		pop r17
 272 0038 0F91      		pop r16
 273               	.LVL22:
 274 003a FF90      		pop r15
 275               	.LVL23:
 276 003c 0895      		ret
 277               	.LFE89:
 279               		.section	.text.USB_GetNextDescriptorComp,"ax",@progbits
 280               	.global	USB_GetNextDescriptorComp
 282               	USB_GetNextDescriptorComp:
 283               	.LFB90:
 118:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 119:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
 120:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                   void** const CurrConfigLoc,
 121:../LUFA/Drivers/USB/Core/ConfigDescriptor.c ****                                   ConfigComparatorPtr_t const ComparatorRoutine)
 122:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** {
 284               		.loc 2 122 0
 285               	.LVL24:
 286 0000 AF92      		push r10
 287               	.LCFI23:
 288 0002 BF92      		push r11
 289               	.LCFI24:
 290 0004 CF92      		push r12
 291               	.LCFI25:
 292 0006 DF92      		push r13
 293               	.LCFI26:
 294 0008 EF92      		push r14
 295               	.LCFI27:
 296 000a FF92      		push r15
 297               	.LCFI28:
 298 000c 0F93      		push r16
 299               	.LCFI29:
 300 000e 1F93      		push r17
 301               	.LCFI30:
 302 0010 CF93      		push r28
 303               	.LCFI31:
 304 0012 DF93      		push r29
 305               	.LCFI32:
 306               	/* prologue: function */
 307               	/* frame size = 0 */
 308               	/* stack size = 10 */
 309               	.L__stack_usage = 10
 310 0014 8C01      		movw r16,r24
 311 0016 EB01      		movw r28,r22
 312 0018 6A01      		movw r12,r20
 123:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	uint8_t ErrorCode;
 124:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 125:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 313               		.loc 2 125 0
 314 001a 00C0      		rjmp .L18
 315               	.LVL25:
 316               	.L20:
 317               	.LBB2:
 126:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	{
 127:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		uint8_t* PrevDescLoc  = *CurrConfigLoc;
 318               		.loc 2 127 0
 319 001c A880      		ld r10,Y
 320 001e B980      		ldd r11,Y+1
 321               	.LVL26:
 128:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		uint16_t PrevBytesRem = *BytesRem;
 129:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 130:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);
 322               		.loc 2 130 0
 323 0020 BE01      		movw r22,r28
 324 0022 C801      		movw r24,r16
 325 0024 0E94 0000 		call USB_GetNextDescriptor
 326               	.LVL27:
 131:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 132:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
 327               		.loc 2 132 0
 328 0028 8881      		ld r24,Y
 329 002a 9981      		ldd r25,Y+1
 330 002c F601      		movw r30,r12
 331 002e 0995      		icall
 332               	.LVL28:
 333 0030 8230      		cpi r24,lo8(2)
 334 0032 01F0      		breq .L18
 133:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		{
 134:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
 335               		.loc 2 134 0
 336 0034 8130      		cpi r24,lo8(1)
 337 0036 01F4      		brne .L19
 135:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			{
 136:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 				*CurrConfigLoc = PrevDescLoc;
 338               		.loc 2 136 0
 339 0038 B982      		std Y+1,r11
 340 003a A882      		st Y,r10
 137:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 				*BytesRem      = PrevBytesRem;
 341               		.loc 2 137 0
 342 003c F801      		movw r30,r16
 343 003e F182      		std Z+1,r15
 344 0040 E082      		st Z,r14
 345 0042 00C0      		rjmp .L19
 346               	.LVL29:
 347               	.L18:
 348               	.LBE2:
 125:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	while (*BytesRem)
 349               		.loc 2 125 0 discriminator 1
 350 0044 F801      		movw r30,r16
 351 0046 E080      		ld r14,Z
 352 0048 F180      		ldd r15,Z+1
 353 004a E114      		cp r14,__zero_reg__
 354 004c F104      		cpc r15,__zero_reg__
 355 004e 01F4      		brne .L20
 138:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			}
 139:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 140:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 			return ErrorCode;
 141:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 		}
 142:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	}
 143:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 
 144:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** 	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
 356               		.loc 2 144 0
 357 0050 82E0      		ldi r24,lo8(2)
 358               	.L19:
 359               	/* epilogue start */
 145:../LUFA/Drivers/USB/Core/ConfigDescriptor.c **** }
 360               		.loc 2 145 0
 361 0052 DF91      		pop r29
 362 0054 CF91      		pop r28
 363               	.LVL30:
 364 0056 1F91      		pop r17
 365 0058 0F91      		pop r16
 366               	.LVL31:
 367 005a FF90      		pop r15
 368 005c EF90      		pop r14
 369 005e DF90      		pop r13
 370 0060 CF90      		pop r12
 371               	.LVL32:
 372 0062 BF90      		pop r11
 373 0064 AF90      		pop r10
 374 0066 0895      		ret
 375               	.LFE90:
 625               	.Letext0:
 626               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 627               		.file 4 "../LUFA/Drivers/USB/Core/AVR8/../StdDescriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ConfigDescriptor.c
     /tmp/cctWahHe.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctWahHe.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctWahHe.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctWahHe.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctWahHe.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctWahHe.s:11     .text.USB_GetNextDescriptor:0000000000000000 USB_GetNextDescriptor
     /tmp/cctWahHe.s:64     .text.USB_GetNextDescriptorOfType:0000000000000000 USB_GetNextDescriptorOfType
     /tmp/cctWahHe.s:135    .text.USB_GetNextDescriptorOfTypeBefore:0000000000000000 USB_GetNextDescriptorOfTypeBefore
     /tmp/cctWahHe.s:217    .text.USB_GetNextDescriptorOfTypeAfter:0000000000000000 USB_GetNextDescriptorOfTypeAfter
     /tmp/cctWahHe.s:282    .text.USB_GetNextDescriptorComp:0000000000000000 USB_GetNextDescriptorComp

NO UNDEFINED SYMBOLS
