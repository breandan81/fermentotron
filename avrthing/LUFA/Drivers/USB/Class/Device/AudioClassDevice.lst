   1               		.file	"AudioClassDevice.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.Audio_Device_ConfigureEndpoints,"ax",@progbits
  10               	.global	Audio_Device_ConfigureEndpoints
  12               	Audio_Device_ConfigureEndpoints:
  13               	.LFB100:
  14               		.file 1 "../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c"
   1:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** /*
   2:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****              LUFA Library
   3:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
   5:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****            www.lufa-lib.org
   7:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** */
   8:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
   9:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** /*
  10:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  12:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   software and its documentation for any purpose is hereby granted
  14:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   without fee, provided that the above copyright notice appear in
  15:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   all copies and that both that the copyright notice and this
  16:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   documentation, and that the name of the author not be used in
  18:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   advertising or publicity pertaining to distribution of the
  19:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   software without specific, written prior permission.
  20:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  21:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   The author disclaim all warranties with regard to this
  22:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   software, including all implied warranties of merchantability
  23:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   special, indirect or consequential damages or any damages
  25:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   in an action of contract, negligence or other tortious action,
  27:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   arising out of or in connection with the use or performance of
  28:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c ****   this software.
  29:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** */
  30:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  31:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** #include "../../Core/USBMode.h"
  33:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  34:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** #if defined(USB_CAN_BE_DEVICE)
  35:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  36:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** #define  __INCLUDE_FROM_AUDIO_DRIVER
  37:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** #define  __INCLUDE_FROM_AUDIO_DEVICE_C
  38:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** #include "AudioClassDevice.h"
  39:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  40:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** void Audio_Device_ProcessControlRequest(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
  41:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** {
  42:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	if (!(Endpoint_IsSETUPReceived()))
  43:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	  return;
  44:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  45:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
  46:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	{
  47:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if ((USB_ControlRequest.wIndex & 0xFF) != AudioInterfaceInfo->Config.StreamingInterfaceNumber)
  48:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		  return;
  49:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	}
  50:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
  51:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	{
  52:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		uint8_t EndpointIndex = (USB_ControlRequest.wIndex & 0xFF);
  53:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	
  54:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if ((EndpointIndex != (ENDPOINT_DIR_IN  | AudioInterfaceInfo->Config.DataINEndpointNumber)) &&
  55:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		    (EndpointIndex != (ENDPOINT_DIR_OUT | AudioInterfaceInfo->Config.DataOUTEndpointNumber)))
  56:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		{
  57:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			return;
  58:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		}
  59:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	}
  60:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  61:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	switch (USB_ControlRequest.bRequest)
  62:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	{
  63:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case REQ_SetInterface:
  64:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFA
  65:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			{
  66:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				Endpoint_ClearSETUP();
  67:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				Endpoint_ClearStatusStage();
  68:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  69:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
  70:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
  71:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			}
  72:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  73:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			break;
  74:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_GetStatus:
  75:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE
  76:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			    (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT)
  77:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			{
  78:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				Endpoint_ClearSETUP();
  79:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				Endpoint_ClearStatusStage();
  80:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			}
  81:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  82:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			break;
  83:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_SetCurrent:
  84:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_SetMinimum:
  85:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_SetMaximum:
  86:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_SetResolution:
  87:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
  88:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			{
  89:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t EndpointProperty = USB_ControlRequest.bRequest;
  90:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
  91:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
  92:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  93:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, Endpoint
  94:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				                                                 EndpointControl, NULL, NULL))
  95:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				{
  96:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint16_t ValueLength = USB_ControlRequest.wLength;
  97:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint8_t  Value[ValueLength];
  98:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
  99:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearSETUP();
 100:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
 101:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearIN();
 102:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 103:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAdd
 104:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					                                             EndpointControl, &ValueLength, Value);
 105:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				}
 106:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			}
 107:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			else if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTER
 108:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			{
 109:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Property  = USB_ControlRequest.bRequest;
 110:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
 111:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t Parameter = USB_ControlRequest.wValue;
 112:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 113:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 114:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				                                                  Parameter, NULL, NULL))
 115:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				{
 116:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint16_t ValueLength = USB_ControlRequest.wLength;
 117:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint8_t  Value[ValueLength];
 118:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 119:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearSETUP();
 120:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
 121:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearIN();
 122:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 123:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 124:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				                                                  Parameter, NULL, NULL);
 125:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				}
 126:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			}
 127:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 128:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			break;
 129:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_GetCurrent:
 130:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_GetMinimum:
 131:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_GetMaximum:
 132:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		case AUDIO_REQ_GetResolution:
 133:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
 134:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			{
 135:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  EndpointProperty = USB_ControlRequest.bRequest;
 136:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
 137:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
 138:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t ValueLength      = USB_ControlRequest.wLength;
 139:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Value[ValueLength];
 140:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 141:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, Endpoint
 142:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				                                                 EndpointControl, &ValueLength, Value))
 143:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				{
 144:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearSETUP();
 145:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
 146:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearOUT();
 147:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				}
 148:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			}
 149:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			else if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTER
 150:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			{
 151:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Property    = USB_ControlRequest.bRequest;
 152:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
 153:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t Parameter   = USB_ControlRequest.wValue;
 154:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t ValueLength = USB_ControlRequest.wLength;
 155:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Value[ValueLength];
 156:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 157:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 158:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				                                                  Parameter, &ValueLength, Value))
 159:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				{
 160:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearSETUP();
 161:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
 162:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_ClearOUT();
 163:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				}
 164:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			}
 165:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 166:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			break;
 167:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	}
 168:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** }
 169:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 170:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** bool Audio_Device_ConfigureEndpoints(USB_ClassInfo_Audio_Device_t* const AudioInterfaceInfo)
 171:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** {
  15               		.loc 1 171 0
  16               	.LVL0:
  17 0000 1F93      		push r17
  18               	.LCFI0:
  19 0002 CF93      		push r28
  20               	.LCFI1:
  21 0004 DF93      		push r29
  22               	.LCFI2:
  23               	/* prologue: function */
  24               	/* frame size = 0 */
  25               	/* stack size = 3 */
  26               	.L__stack_usage = 3
  27 0006 EC01      		movw r28,r24
 172:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
  28               		.loc 1 172 0
  29 0008 1F82      		std Y+7,__zero_reg__
  30               	.LVL1:
 173:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 174:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
  31               		.loc 1 174 0
  32 000a 11E0      		ldi r17,lo8(1)
  33               	.LVL2:
  34               	.L5:
  35               	.LBB39:
  36               	.LBB40:
 175:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	{
 176:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		uint16_t Size;
 177:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		uint8_t  Type;
 178:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		uint8_t  Direction;
 179:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		bool     DoubleBanked;
 180:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 181:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if (EndpointNum == AudioInterfaceInfo->Config.DataINEndpointNumber)
  37               		.loc 1 181 0
  38 000c 8981      		ldd r24,Y+1
  39 000e 1813      		cpse r17,r24
  40 0010 00C0      		rjmp .L2
 182:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		{
 183:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Size         = AudioInterfaceInfo->Config.DataINEndpointSize;
  41               		.loc 1 183 0
  42 0012 6A81      		ldd r22,Y+2
  43 0014 7B81      		ldd r23,Y+3
  44               	.LVL3:
 184:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Direction    = ENDPOINT_DIR_IN;
  45               		.loc 1 184 0
  46 0016 80E8      		ldi r24,lo8(-128)
  47 0018 00C0      		rjmp .L3
  48               	.LVL4:
  49               	.L2:
 185:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Type         = EP_TYPE_ISOCHRONOUS;
 186:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			DoubleBanked = true;
 187:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		}
 188:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		else if (EndpointNum == AudioInterfaceInfo->Config.DataOUTEndpointNumber)
  50               		.loc 1 188 0
  51 001a 8C81      		ldd r24,Y+4
  52 001c 1817      		cp r17,r24
  53 001e 01F0      		breq .L4
  54               	.L10:
  55               	.LBE40:
 174:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
  56               		.loc 1 174 0
  57 0020 1F5F      		subi r17,lo8(-(1))
  58               	.LVL5:
  59 0022 1730      		cpi r17,lo8(7)
  60 0024 01F4      		brne .L5
 189:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		{
 190:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Size         = AudioInterfaceInfo->Config.DataOUTEndpointSize;
 191:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Direction    = ENDPOINT_DIR_OUT;
 192:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Type         = EP_TYPE_ISOCHRONOUS;
 193:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			DoubleBanked = true;
 194:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		}
 195:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		else
 196:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		{
 197:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			continue;
 198:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		}
 199:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 200:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 201:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		                                 DoubleBanked ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
 202:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		{
 203:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			return false;
 204:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		}
 205:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	}
 206:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 207:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	return true;
  61               		.loc 1 207 0
  62 0026 81E0      		ldi r24,lo8(1)
  63 0028 00C0      		rjmp .L6
  64               	.LVL6:
  65               	.L4:
  66               	.LBB45:
 190:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Size         = AudioInterfaceInfo->Config.DataOUTEndpointSize;
  67               		.loc 1 190 0
  68 002a 6D81      		ldd r22,Y+5
  69 002c 7E81      		ldd r23,Y+6
  70               	.LVL7:
 191:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			Direction    = ENDPOINT_DIR_OUT;
  71               		.loc 1 191 0
  72 002e 80E0      		ldi r24,0
  73               	.LVL8:
  74               	.L3:
  75               		.file 2 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
  76               		.loc 2 127 0
  77 0030 28E0      		ldi r18,lo8(8)
  78 0032 30E0      		ldi r19,0
 126:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
  79               		.loc 2 126 0
  80 0034 40E0      		ldi r20,0
  81 0036 00C0      		rjmp .L7
  82               	.LVL9:
  83               	.L8:
  84               	.LBB41:
  85               	.LBB42:
  86               	.LBB43:
  87               	.LBB44:
 128:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
  88               		.loc 2 131 0
  89 0038 4F5F      		subi r20,lo8(-(1))
  90               	.LVL10:
 132:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
  91               		.loc 2 132 0
  92 003a 220F      		lsl r18
  93 003c 331F      		rol r19
  94               	.LVL11:
  95               	.L7:
 129:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
  96               		.loc 2 129 0
  97 003e 2617      		cp r18,r22
  98 0040 3707      		cpc r19,r23
  99 0042 00F0      		brlo .L8
 133:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 100               		.loc 2 135 0
 101 0044 4295      		swap r20
 102               	.LVL12:
 103 0046 407F      		andi r20,lo8(-16)
 104               	.LBE44:
 105               	.LBE43:
 136:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 148:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 106               		.loc 2 276 0
 107 0048 4660      		ori r20,lo8(6)
 108 004a 61E0      		ldi r22,lo8(1)
 109               	.LVL13:
 110 004c 8111      		cpse r24,__zero_reg__
 111 004e 00C0      		rjmp .L9
 112 0050 60E0      		ldi r22,0
 113               	.L9:
 114 0052 6064      		ori r22,lo8(64)
 115 0054 812F      		mov r24,r17
 116               	.LVL14:
 117 0056 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 118               	.LVL15:
 119               	.LBE42:
 120               	.LBE41:
 200:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 121               		.loc 1 200 0
 122 005a 8111      		cpse r24,__zero_reg__
 123 005c 00C0      		rjmp .L10
 124               	.LVL16:
 125               	.L6:
 126               	/* epilogue start */
 127               	.LBE45:
 128               	.LBE39:
 208:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** }
 129               		.loc 1 208 0
 130 005e DF91      		pop r29
 131 0060 CF91      		pop r28
 132               	.LVL17:
 133 0062 1F91      		pop r17
 134 0064 0895      		ret
 135               	.LFE100:
 137               		.section	.text.Audio_Device_Event_Stub,"ax",@progbits
 138               	.global	Audio_Device_Event_Stub
 140               	Audio_Device_Event_Stub:
 141               	.LFB101:
 209:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 
 210:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** void Audio_Device_Event_Stub(void)
 211:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** {
 142               		.loc 1 211 0
 143               	/* prologue: function */
 144               	/* frame size = 0 */
 145               	/* stack size = 0 */
 146               	.L__stack_usage = 0
 147 0000 0895      		ret
 148               	.LFE101:
 150               		.weak	EVENT_Audio_Device_StreamStartStop
 151               		.set	EVENT_Audio_Device_StreamStartStop,Audio_Device_Event_Stub
 152               		.section	.text.Audio_Device_ProcessControlRequest,"ax",@progbits
 153               	.global	Audio_Device_ProcessControlRequest
 155               	Audio_Device_ProcessControlRequest:
 156               	.LFB99:
  41:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** {
 157               		.loc 1 41 0
 158               	.LVL18:
  41:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** {
 159               		.loc 1 41 0
 160 0000 3F92      		push r3
 161               	.LCFI3:
 162 0002 4F92      		push r4
 163               	.LCFI4:
 164 0004 5F92      		push r5
 165               	.LCFI5:
 166 0006 6F92      		push r6
 167               	.LCFI6:
 168 0008 7F92      		push r7
 169               	.LCFI7:
 170 000a 8F92      		push r8
 171               	.LCFI8:
 172 000c 9F92      		push r9
 173               	.LCFI9:
 174 000e AF92      		push r10
 175               	.LCFI10:
 176 0010 BF92      		push r11
 177               	.LCFI11:
 178 0012 CF92      		push r12
 179               	.LCFI12:
 180 0014 DF92      		push r13
 181               	.LCFI13:
 182 0016 EF92      		push r14
 183               	.LCFI14:
 184 0018 FF92      		push r15
 185               	.LCFI15:
 186 001a 0F93      		push r16
 187               	.LCFI16:
 188 001c 1F93      		push r17
 189               	.LCFI17:
 190 001e CF93      		push r28
 191               	.LCFI18:
 192 0020 DF93      		push r29
 193               	.LCFI19:
 194 0022 00D0      		rcall .
 195               	.LCFI20:
 196 0024 CDB7      		in r28,__SP_L__
 197 0026 DEB7      		in r29,__SP_H__
 198               	.LCFI21:
 199               	/* prologue: function */
 200               	/* frame size = 2 */
 201               	/* stack size = 19 */
 202               	.L__stack_usage = 19
 203 0028 6C01      		movw r12,r24
 168:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** }
 204               		.loc 1 168 0
 205 002a 8DB6      		in r8,__SP_L__
 206 002c 9EB6      		in r9,__SP_H__
 207               	.LBB46:
 208               	.LBB47:
 277:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 331:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 209               		.loc 2 491 0
 210 002e 8091 E800 		lds r24,232
 211               	.LVL19:
 212               	.LBE47:
 213               	.LBE46:
  42:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	if (!(Endpoint_IsSETUPReceived()))
 214               		.loc 1 42 0
 215 0032 83FF      		sbrs r24,3
 216 0034 00C0      		rjmp .L13
  45:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_INTERFACE)
 217               		.loc 1 45 0
 218 0036 4091 0000 		lds r20,USB_ControlRequest
 219 003a 842F      		mov r24,r20
 220 003c 8F71      		andi r24,lo8(31)
 221 003e 8130      		cpi r24,lo8(1)
 222 0040 01F4      		brne .L16
  47:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if ((USB_ControlRequest.wIndex & 0xFF) != AudioInterfaceInfo->Config.StreamingInterfaceNumber)
 223               		.loc 1 47 0
 224 0042 8091 0000 		lds r24,USB_ControlRequest+4
 225 0046 9091 0000 		lds r25,USB_ControlRequest+4+1
 226 004a 9927      		clr r25
 227 004c F601      		movw r30,r12
 228 004e 2081      		ld r18,Z
 229 0050 30E0      		ldi r19,0
 230 0052 8217      		cp r24,r18
 231 0054 9307      		cpc r25,r19
 232 0056 01F0      		breq .+2
 233 0058 00C0      		rjmp .L13
 234 005a 00C0      		rjmp .L18
 235               	.L16:
  50:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	else if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT) == REQREC_ENDPOINT)
 236               		.loc 1 50 0
 237 005c 8230      		cpi r24,lo8(2)
 238 005e 01F4      		brne .L18
 239               	.LBB48:
  52:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		uint8_t EndpointIndex = (USB_ControlRequest.wIndex & 0xFF);
 240               		.loc 1 52 0
 241 0060 9091 0000 		lds r25,USB_ControlRequest+4
 242               	.LVL20:
  54:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if ((EndpointIndex != (ENDPOINT_DIR_IN  | AudioInterfaceInfo->Config.DataINEndpointNumber)) &&
 243               		.loc 1 54 0
 244 0064 F601      		movw r30,r12
 245 0066 8181      		ldd r24,Z+1
 246 0068 8068      		ori r24,lo8(-128)
 247 006a 9817      		cp r25,r24
 248 006c 01F0      		breq .L18
  54:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 		if ((EndpointIndex != (ENDPOINT_DIR_IN  | AudioInterfaceInfo->Config.DataINEndpointNumber)) &&
 249               		.loc 1 54 0 is_stmt 0 discriminator 1
 250 006e 8481      		ldd r24,Z+4
 251 0070 9813      		cpse r25,r24
 252 0072 00C0      		rjmp .L13
 253               	.LVL21:
 254               	.L18:
 255               	.LBE48:
  61:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 	switch (USB_ControlRequest.bRequest)
 256               		.loc 1 61 0 is_stmt 1
 257 0074 7090 0000 		lds r7,USB_ControlRequest+1
 258 0078 FBE0      		ldi r31,lo8(11)
 259 007a 7F16      		cp r7,r31
 260 007c 01F0      		breq .L20
 261 007e F715      		cp r31,r7
 262 0080 00F0      		brlo .L23
 263 0082 872D      		mov r24,r7
 264 0084 8150      		subi r24,lo8(-(-1))
 265 0086 8430      		cpi r24,lo8(4)
 266 0088 00F0      		brlo .+2
 267 008a 00C0      		rjmp .L13
 268 008c 00C0      		rjmp .L41
 269               	.L23:
 270 008e 21E8      		ldi r18,lo8(-127)
 271 0090 7216      		cp r7,r18
 272 0092 00F4      		brsh .+2
 273 0094 00C0      		rjmp .L13
 274 0096 34E8      		ldi r19,lo8(-124)
 275 0098 3715      		cp r19,r7
 276 009a 00F0      		brlo .+2
 277 009c 00C0      		rjmp .L21
 278 009e 6FEF      		ldi r22,lo8(-1)
 279 00a0 7612      		cpse r7,r22
 280 00a2 00C0      		rjmp .L13
 281 00a4 00C0      		rjmp .L22
 282               	.L20:
  64:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_INTERFA
 283               		.loc 1 64 0
 284 00a6 4130      		cpi r20,lo8(1)
 285 00a8 01F0      		breq .+2
 286 00aa 00C0      		rjmp .L13
 287               	.LBB49:
 288               	.LBB50:
 492:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 289               		.loc 2 504 0
 290 00ac 8091 E800 		lds r24,232
 291 00b0 877F      		andi r24,lo8(-9)
 292 00b2 8093 E800 		sts 232,r24
 293               	.LBE50:
 294               	.LBE49:
  67:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				Endpoint_ClearStatusStage();
 295               		.loc 1 67 0
 296 00b6 0E94 0000 		call Endpoint_ClearStatusStage
 297               	.LVL22:
  69:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				AudioInterfaceInfo->State.InterfaceEnabled = ((USB_ControlRequest.wValue & 0xFF) != 0);
 298               		.loc 1 69 0
 299 00ba 9091 0000 		lds r25,USB_ControlRequest+2
 300 00be 81E0      		ldi r24,lo8(1)
 301 00c0 9111      		cpse r25,__zero_reg__
 302 00c2 00C0      		rjmp .L24
 303 00c4 80E0      		ldi r24,0
 304               	.L24:
 305 00c6 F601      		movw r30,r12
 306 00c8 8783      		std Z+7,r24
  70:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				EVENT_Audio_Device_StreamStartStop(AudioInterfaceInfo);
 307               		.loc 1 70 0
 308 00ca C601      		movw r24,r12
 309 00cc 0E94 0000 		call EVENT_Audio_Device_StreamStartStop
 310               	.LVL23:
 311 00d0 00C0      		rjmp .L13
 312               	.L22:
  75:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if ((USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE
 313               		.loc 1 75 0
 314 00d2 4152      		subi r20,lo8(-(-33))
 315 00d4 4230      		cpi r20,lo8(2)
 316 00d6 00F0      		brlo .+2
 317 00d8 00C0      		rjmp .L13
 318               	.LBB51:
 319               	.LBB52:
 320               		.loc 2 504 0
 321 00da 8091 E800 		lds r24,232
 322 00de 877F      		andi r24,lo8(-9)
 323 00e0 8093 E800 		sts 232,r24
 324               	.LBE52:
 325               	.LBE51:
  79:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				Endpoint_ClearStatusStage();
 326               		.loc 1 79 0
 327 00e4 0E94 0000 		call Endpoint_ClearStatusStage
 328               	.LVL24:
 329 00e8 00C0      		rjmp .L13
 330               	.L41:
  87:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT))
 331               		.loc 1 87 0
 332 00ea 4232      		cpi r20,lo8(34)
 333 00ec 01F0      		breq .+2
 334 00ee 00C0      		rjmp .L25
 335               	.LVL25:
 336               	.LBB53:
  90:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
 337               		.loc 1 90 0
 338 00f0 6090 0000 		lds r6,USB_ControlRequest+4
 339               	.LVL26:
  91:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t EndpointControl  = (USB_ControlRequest.wValue >> 8);
 340               		.loc 1 91 0
 341 00f4 5090 0000 		lds r5,USB_ControlRequest+3
 342               	.LVL27:
  93:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, Endpoint
 343               		.loc 1 93 0
 344 00f8 E12C      		mov r14,__zero_reg__
 345 00fa F12C      		mov r15,__zero_reg__
 346 00fc 00E0      		ldi r16,0
 347 00fe 10E0      		ldi r17,0
 348 0100 252D      		mov r18,r5
 349 0102 462D      		mov r20,r6
 350 0104 672D      		mov r22,r7
 351 0106 C601      		movw r24,r12
 352 0108 0E94 0000 		call CALLBACK_Audio_Device_GetSetEndpointProperty
 353               	.LVL28:
 354 010c 8823      		tst r24
 355 010e 01F4      		brne .+2
 356 0110 00C0      		rjmp .L13
 357 0112 3DB6      		in r3,__SP_L__
 358 0114 4EB6      		in r4,__SP_H__
 359               	.LBB54:
  96:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint16_t ValueLength = USB_ControlRequest.wLength;
 360               		.loc 1 96 0
 361 0116 8091 0000 		lds r24,USB_ControlRequest+6
 362 011a 9091 0000 		lds r25,USB_ControlRequest+6+1
 363 011e 9A83      		std Y+2,r25
 364 0120 8983      		std Y+1,r24
 365               	.LVL29:
  97:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint8_t  Value[ValueLength];
 366               		.loc 1 97 0
 367 0122 2DB7      		in r18,__SP_L__
 368 0124 3EB7      		in r19,__SP_H__
 369 0126 281B      		sub r18,r24
 370 0128 390B      		sbc r19,r25
 371 012a 0FB6      		in __tmp_reg__,__SREG__
 372 012c F894      		cli
 373 012e 3EBF      		out __SP_H__,r19
 374 0130 0FBE      		out __SREG__,__tmp_reg__
 375 0132 2DBF      		out __SP_L__,r18
 376 0134 ADB6      		in r10,__SP_L__
 377 0136 BEB6      		in r11,__SP_H__
 378 0138 6FEF      		ldi r22,-1
 379 013a A61A      		sub r10,r22
 380 013c B60A      		sbc r11,r22
 381               	.LBB55:
 382               	.LBB56:
 383               		.loc 2 504 0
 384 013e 8091 E800 		lds r24,232
 385               	.LVL30:
 386 0142 877F      		andi r24,lo8(-9)
 387 0144 8093 E800 		sts 232,r24
 388               	.LBE56:
 389               	.LBE55:
 100:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
 390               		.loc 1 100 0
 391 0148 6981      		ldd r22,Y+1
 392 014a 7A81      		ldd r23,Y+2
 393 014c C501      		movw r24,r10
 394 014e 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 395               	.LVL31:
 396               	.LBB57:
 397               	.LBB58:
 505:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 398               		.loc 2 516 0
 399 0152 8091 E800 		lds r24,232
 400 0156 8E77      		andi r24,lo8(126)
 401 0158 8093 E800 		sts 232,r24
 402               	.LBE58:
 403               	.LBE57:
 103:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, EndpointAdd
 404               		.loc 1 103 0
 405 015c 7501      		movw r14,r10
 406 015e 8E01      		movw r16,r28
 407 0160 0F5F      		subi r16,-1
 408 0162 1F4F      		sbci r17,-1
 409 0164 252D      		mov r18,r5
 410 0166 462D      		mov r20,r6
 411 0168 672D      		mov r22,r7
 412 016a C601      		movw r24,r12
 413 016c 0E94 0000 		call CALLBACK_Audio_Device_GetSetEndpointProperty
 414               	.LVL32:
 415 0170 332D      		mov r19,r3
 416 0172 242D      		mov r18,r4
 417 0174 00C0      		rjmp .L42
 418               	.LVL33:
 419               	.L25:
 420               	.LBE54:
 421               	.LBE53:
 107:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			else if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTER
 422               		.loc 1 107 0
 423 0176 4132      		cpi r20,lo8(33)
 424 0178 01F0      		breq .+2
 425 017a 00C0      		rjmp .L13
 426               	.LVL34:
 427               	.LBB59:
 110:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Entity    = (USB_ControlRequest.wIndex >> 8);
 428               		.loc 1 110 0
 429 017c 6090 0000 		lds r6,USB_ControlRequest+5
 430               	.LVL35:
 111:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t Parameter = USB_ControlRequest.wValue;
 431               		.loc 1 111 0
 432 0180 A090 0000 		lds r10,USB_ControlRequest+2
 433 0184 B090 0000 		lds r11,USB_ControlRequest+2+1
 434               	.LVL36:
 113:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 435               		.loc 1 113 0
 436 0188 E12C      		mov r14,__zero_reg__
 437 018a F12C      		mov r15,__zero_reg__
 438 018c 00E0      		ldi r16,0
 439 018e 10E0      		ldi r17,0
 440 0190 9501      		movw r18,r10
 441 0192 462D      		mov r20,r6
 442 0194 672D      		mov r22,r7
 443 0196 C601      		movw r24,r12
 444 0198 0E94 0000 		call CALLBACK_Audio_Device_GetSetInterfaceProperty
 445               	.LVL37:
 446 019c 8823      		tst r24
 447 019e 01F4      		brne .+2
 448 01a0 00C0      		rjmp .L13
 449 01a2 4DB6      		in r4,__SP_L__
 450 01a4 5EB6      		in r5,__SP_H__
 451               	.LBB60:
 116:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint16_t ValueLength = USB_ControlRequest.wLength;
 452               		.loc 1 116 0
 453 01a6 6091 0000 		lds r22,USB_ControlRequest+6
 454 01aa 7091 0000 		lds r23,USB_ControlRequest+6+1
 455               	.LVL38:
 117:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					uint8_t  Value[ValueLength];
 456               		.loc 1 117 0
 457 01ae 8DB7      		in r24,__SP_L__
 458 01b0 9EB7      		in r25,__SP_H__
 459 01b2 861B      		sub r24,r22
 460 01b4 970B      		sbc r25,r23
 461 01b6 0FB6      		in __tmp_reg__,__SREG__
 462 01b8 F894      		cli
 463 01ba 9EBF      		out __SP_H__,r25
 464 01bc 0FBE      		out __SREG__,__tmp_reg__
 465 01be 8DBF      		out __SP_L__,r24
 466 01c0 2DB7      		in r18,__SP_L__
 467 01c2 3EB7      		in r19,__SP_H__
 468 01c4 2F5F      		subi r18,-1
 469 01c6 3F4F      		sbci r19,-1
 470               	.LBB61:
 471               	.LBB62:
 504:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 472               		.loc 2 504 0
 473 01c8 5091 E800 		lds r21,232
 474 01cc 577F      		andi r21,lo8(-9)
 475 01ce 5093 E800 		sts 232,r21
 476               	.LBE62:
 477               	.LBE61:
 120:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_Read_Control_Stream_LE(Value, ValueLength);
 478               		.loc 1 120 0
 479 01d2 C901      		movw r24,r18
 480 01d4 0E94 0000 		call Endpoint_Read_Control_Stream_LE
 481               	.LVL39:
 482               	.LBB63:
 483               	.LBB64:
 484               		.loc 2 516 0
 485 01d8 8091 E800 		lds r24,232
 486 01dc 8E77      		andi r24,lo8(126)
 487 01de 8093 E800 		sts 232,r24
 488               	.LBE64:
 489               	.LBE63:
 123:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 490               		.loc 1 123 0
 491 01e2 9501      		movw r18,r10
 492 01e4 462D      		mov r20,r6
 493 01e6 672D      		mov r22,r7
 494 01e8 C601      		movw r24,r12
 495 01ea 0E94 0000 		call CALLBACK_Audio_Device_GetSetInterfaceProperty
 496               	.LVL40:
 497 01ee 342D      		mov r19,r4
 498 01f0 252D      		mov r18,r5
 499 01f2 00C0      		rjmp .L42
 500               	.LVL41:
 501               	.L21:
 502               	.LBE60:
 503               	.LBE59:
 133:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
 504               		.loc 1 133 0
 505 01f4 423A      		cpi r20,lo8(-94)
 506 01f6 01F4      		brne .L26
 507 01f8 5DB6      		in r5,__SP_L__
 508 01fa 6EB6      		in r6,__SP_H__
 509               	.LVL42:
 510               	.LBB65:
 136:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  EndpointAddress  = (uint8_t)USB_ControlRequest.wIndex;
 511               		.loc 1 136 0
 512 01fc 4091 0000 		lds r20,USB_ControlRequest+4
 513               	.LVL43:
 137:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  EndpointControl  = (USB_ControlRequest.wValue >> 8);
 514               		.loc 1 137 0
 515 0200 2091 0000 		lds r18,USB_ControlRequest+3
 516               	.LVL44:
 138:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t ValueLength      = USB_ControlRequest.wLength;
 517               		.loc 1 138 0
 518 0204 8091 0000 		lds r24,USB_ControlRequest+6
 519 0208 9091 0000 		lds r25,USB_ControlRequest+6+1
 520 020c 9A83      		std Y+2,r25
 521 020e 8983      		std Y+1,r24
 522               	.LVL45:
 139:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Value[ValueLength];
 523               		.loc 1 139 0
 524 0210 EDB7      		in r30,__SP_L__
 525 0212 FEB7      		in r31,__SP_H__
 526 0214 E81B      		sub r30,r24
 527 0216 F90B      		sbc r31,r25
 528 0218 0FB6      		in __tmp_reg__,__SREG__
 529 021a F894      		cli
 530 021c FEBF      		out __SP_H__,r31
 531 021e 0FBE      		out __SREG__,__tmp_reg__
 532 0220 EDBF      		out __SP_L__,r30
 533 0222 ADB6      		in r10,__SP_L__
 534 0224 BEB6      		in r11,__SP_H__
 535 0226 6FEF      		ldi r22,-1
 536 0228 A61A      		sub r10,r22
 537 022a B60A      		sbc r11,r22
 141:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetEndpointProperty(AudioInterfaceInfo, EndpointProperty, Endpoint
 538               		.loc 1 141 0
 539 022c 7501      		movw r14,r10
 540 022e 8E01      		movw r16,r28
 541 0230 0F5F      		subi r16,-1
 542 0232 1F4F      		sbci r17,-1
 543 0234 672D      		mov r22,r7
 544 0236 C601      		movw r24,r12
 545               	.LVL46:
 546 0238 0E94 0000 		call CALLBACK_Audio_Device_GetSetEndpointProperty
 547               	.LVL47:
 548 023c 00C0      		rjmp .L45
 549               	.LVL48:
 550               	.L26:
 551               	.LBE65:
 149:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 			else if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTER
 552               		.loc 1 149 0
 553 023e 413A      		cpi r20,lo8(-95)
 554 0240 01F4      		brne .L13
 555 0242 5DB6      		in r5,__SP_L__
 556 0244 6EB6      		in r6,__SP_H__
 557               	.LVL49:
 558               	.LBB66:
 152:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Entity      = (USB_ControlRequest.wIndex >> 8);
 559               		.loc 1 152 0
 560 0246 4091 0000 		lds r20,USB_ControlRequest+5
 561               	.LVL50:
 153:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t Parameter   = USB_ControlRequest.wValue;
 562               		.loc 1 153 0
 563 024a 2091 0000 		lds r18,USB_ControlRequest+2
 564 024e 3091 0000 		lds r19,USB_ControlRequest+2+1
 565               	.LVL51:
 154:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint16_t ValueLength = USB_ControlRequest.wLength;
 566               		.loc 1 154 0
 567 0252 8091 0000 		lds r24,USB_ControlRequest+6
 568 0256 9091 0000 		lds r25,USB_ControlRequest+6+1
 569 025a 9A83      		std Y+2,r25
 570 025c 8983      		std Y+1,r24
 571               	.LVL52:
 155:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				uint8_t  Value[ValueLength];
 572               		.loc 1 155 0
 573 025e EDB7      		in r30,__SP_L__
 574 0260 FEB7      		in r31,__SP_H__
 575 0262 E81B      		sub r30,r24
 576 0264 F90B      		sbc r31,r25
 577 0266 0FB6      		in __tmp_reg__,__SREG__
 578 0268 F894      		cli
 579 026a FEBF      		out __SP_H__,r31
 580 026c 0FBE      		out __SREG__,__tmp_reg__
 581 026e EDBF      		out __SP_L__,r30
 582 0270 ADB6      		in r10,__SP_L__
 583 0272 BEB6      		in r11,__SP_H__
 584 0274 6FEF      		ldi r22,-1
 585 0276 A61A      		sub r10,r22
 586 0278 B60A      		sbc r11,r22
 157:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 				if (CALLBACK_Audio_Device_GetSetInterfaceProperty(AudioInterfaceInfo, Property, Entity,
 587               		.loc 1 157 0
 588 027a 7501      		movw r14,r10
 589 027c 8E01      		movw r16,r28
 590 027e 0F5F      		subi r16,-1
 591 0280 1F4F      		sbci r17,-1
 592 0282 672D      		mov r22,r7
 593 0284 C601      		movw r24,r12
 594               	.LVL53:
 595 0286 0E94 0000 		call CALLBACK_Audio_Device_GetSetInterfaceProperty
 596               	.LVL54:
 597               	.L45:
 598 028a 8823      		tst r24
 599 028c 01F0      		breq .L28
 600               	.LBB67:
 601               	.LBB68:
 504:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 602               		.loc 2 504 0
 603 028e 8091 E800 		lds r24,232
 604 0292 877F      		andi r24,lo8(-9)
 605 0294 8093 E800 		sts 232,r24
 606               	.LBE68:
 607               	.LBE67:
 161:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** 					Endpoint_Write_Control_Stream_LE(Value, ValueLength);
 608               		.loc 1 161 0
 609 0298 6981      		ldd r22,Y+1
 610 029a 7A81      		ldd r23,Y+2
 611               	.LVL55:
 612 029c C501      		movw r24,r10
 613 029e 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 614               	.LVL56:
 615               	.LBB69:
 616               	.LBB70:
 517:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 617               		.loc 2 531 0
 618 02a2 8091 E800 		lds r24,232
 619 02a6 8B77      		andi r24,lo8(123)
 620 02a8 8093 E800 		sts 232,r24
 621               	.LVL57:
 622               	.L28:
 623 02ac 352D      		mov r19,r5
 624 02ae 262D      		mov r18,r6
 625               	.LVL58:
 626               	.L42:
 627 02b0 832F      		mov r24,r19
 628 02b2 922F      		mov r25,r18
 629 02b4 0FB6      		in __tmp_reg__,__SREG__
 630 02b6 F894      		cli
 631 02b8 9EBF      		out __SP_H__,r25
 632 02ba 0FBE      		out __SREG__,__tmp_reg__
 633 02bc 8DBF      		out __SP_L__,r24
 634               	.L13:
 635               	.LBE70:
 636               	.LBE69:
 637               	.LBE66:
 168:../LUFA/Drivers/USB/Class/Device/AudioClassDevice.c **** }
 638               		.loc 1 168 0
 639 02be 0FB6      		in __tmp_reg__,__SREG__
 640 02c0 F894      		cli
 641 02c2 9EBE      		out __SP_H__,r9
 642 02c4 0FBE      		out __SREG__,__tmp_reg__
 643 02c6 8DBE      		out __SP_L__,r8
 644               	/* epilogue start */
 645 02c8 0F90      		pop __tmp_reg__
 646 02ca 0F90      		pop __tmp_reg__
 647 02cc DF91      		pop r29
 648 02ce CF91      		pop r28
 649 02d0 1F91      		pop r17
 650 02d2 0F91      		pop r16
 651 02d4 FF90      		pop r15
 652 02d6 EF90      		pop r14
 653 02d8 DF90      		pop r13
 654 02da CF90      		pop r12
 655               	.LVL59:
 656 02dc BF90      		pop r11
 657 02de AF90      		pop r10
 658 02e0 9F90      		pop r9
 659 02e2 8F90      		pop r8
 660 02e4 7F90      		pop r7
 661 02e6 6F90      		pop r6
 662 02e8 5F90      		pop r5
 663 02ea 4F90      		pop r4
 664 02ec 3F90      		pop r3
 665 02ee 0895      		ret
 666               	.LFE99:
 838               	.Letext0:
 839               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 840               		.file 4 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../StdRequestType.h"
 841               		.file 5 "../LUFA/Drivers/USB/Class/Device/../../Class/Device/../Common/AudioClassCommon.h"
 842               		.file 6 "../LUFA/Drivers/USB/Class/Device/AudioClassDevice.h"
 843               		.file 7 "../LUFA/Drivers/USB/Class/Device/../../Core/USBTask.h"
 844               		.file 8 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/EndpointStream_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 AudioClassDevice.c
     /tmp/ccRcHpfJ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRcHpfJ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRcHpfJ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRcHpfJ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRcHpfJ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRcHpfJ.s:12     .text.Audio_Device_ConfigureEndpoints:0000000000000000 Audio_Device_ConfigureEndpoints
     /tmp/ccRcHpfJ.s:140    .text.Audio_Device_Event_Stub:0000000000000000 Audio_Device_Event_Stub
     /tmp/ccRcHpfJ.s:140    .text.Audio_Device_Event_Stub:0000000000000000 EVENT_Audio_Device_StreamStartStop
     /tmp/ccRcHpfJ.s:155    .text.Audio_Device_ProcessControlRequest:0000000000000000 Audio_Device_ProcessControlRequest

UNDEFINED SYMBOLS
Endpoint_ConfigureEndpoint_Prv
USB_ControlRequest
Endpoint_ClearStatusStage
CALLBACK_Audio_Device_GetSetEndpointProperty
Endpoint_Read_Control_Stream_LE
CALLBACK_Audio_Device_GetSetInterfaceProperty
Endpoint_Write_Control_Stream_LE
