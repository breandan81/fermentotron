   1               		.file	"RNDISClassDevice.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.section	.text.RNDIS_Device_ProcessControlRequest,"ax",@progbits
  10               	.global	RNDIS_Device_ProcessControlRequest
  12               	RNDIS_Device_ProcessControlRequest:
  13               	.LFB99:
  14               		.file 1 "../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c"
   1:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** /*
   2:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****              LUFA Library
   3:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
   5:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****            www.lufa-lib.org
   7:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** */
   8:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
   9:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** /*
  10:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  12:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   software and its documentation for any purpose is hereby granted
  14:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   without fee, provided that the above copyright notice appear in
  15:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   all copies and that both that the copyright notice and this
  16:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   documentation, and that the name of the author not be used in
  18:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   advertising or publicity pertaining to distribution of the
  19:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   software without specific, written prior permission.
  20:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  21:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   The author disclaim all warranties with regard to this
  22:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   software, including all implied warranties of merchantability
  23:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   special, indirect or consequential damages or any damages
  25:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   in an action of contract, negligence or other tortious action,
  27:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   arising out of or in connection with the use or performance of
  28:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****   this software.
  29:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** */
  30:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  31:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** #define  __INCLUDE_FROM_USB_DRIVER
  32:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** #include "../../Core/USBMode.h"
  33:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  34:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** #if defined(USB_CAN_BE_DEVICE)
  35:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  36:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** #define  __INCLUDE_FROM_RNDIS_DRIVER
  37:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** #define  __INCLUDE_FROM_RNDIS_DEVICE_C
  38:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** #include "RNDISClassDevice.h"
  39:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  40:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** static const uint32_t PROGMEM AdapterSupportedOIDList[]  =
  41:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
  42:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_SUPPORTED_LIST),
  43:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_PHYSICAL_MEDIUM),
  44:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_HARDWARE_STATUS),
  45:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_MEDIA_SUPPORTED),
  46:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_MEDIA_IN_USE),
  47:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_MAXIMUM_FRAME_SIZE),
  48:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_MAXIMUM_TOTAL_SIZE),
  49:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_LINK_SPEED),
  50:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_TRANSMIT_BLOCK_SIZE),
  51:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_RECEIVE_BLOCK_SIZE),
  52:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_VENDOR_ID),
  53:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_VENDOR_DESCRIPTION),
  54:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_CURRENT_PACKET_FILTER),
  55:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_MAXIMUM_TOTAL_SIZE),
  56:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_MEDIA_CONNECT_STATUS),
  57:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_XMIT_OK),
  58:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_RCV_OK),
  59:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_XMIT_ERROR),
  60:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_RCV_ERROR),
  61:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_GEN_RCV_NO_BUFFER),
  62:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_802_3_PERMANENT_ADDRESS),
  63:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_802_3_CURRENT_ADDRESS),
  64:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_802_3_MULTICAST_LIST),
  65:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_802_3_MAXIMUM_LIST_SIZE),
  66:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_802_3_RCV_ERROR_ALIGNMENT),
  67:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_802_3_XMIT_ONE_COLLISION),
  68:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		CPU_TO_LE32(OID_802_3_XMIT_MORE_COLLISIONS),
  69:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	};
  70:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  71:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** void RNDIS_Device_ProcessControlRequest(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
  72:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
  15               		.loc 1 72 0
  16               	.LVL0:
  17 0000 0F93      		push r16
  18               	.LCFI0:
  19 0002 1F93      		push r17
  20               	.LCFI1:
  21 0004 CF93      		push r28
  22               	.LCFI2:
  23 0006 DF93      		push r29
  24               	.LCFI3:
  25               	/* prologue: function */
  26               	/* frame size = 0 */
  27               	/* stack size = 4 */
  28               	.L__stack_usage = 4
  29 0008 EC01      		movw r28,r24
  30               	.LBB62:
  31               	.LBB63:
  32               		.file 2 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h"
   1:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
   2:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****              LUFA Library
   3:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****      Copyright (C) Dean Camera, 2012.
   4:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   5:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   dean [at] fourwalledcubicle [dot] com
   6:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****            www.lufa-lib.org
   7:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
   8:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
   9:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /*
  10:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Copyright 2012  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  12:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   Permission to use, copy, modify, distribute, and sell this
  13:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software and its documentation for any purpose is hereby granted
  14:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   without fee, provided that the above copyright notice appear in
  15:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   all copies and that both that the copyright notice and this
  16:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   permission notice and warranty disclaimer appear in supporting
  17:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   documentation, and that the name of the author not be used in
  18:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   advertising or publicity pertaining to distribution of the
  19:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software without specific, written prior permission.
  20:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  21:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   The author disclaim all warranties with regard to this
  22:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   software, including all implied warranties of merchantability
  23:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   and fitness.  In no event shall the author be liable for any
  24:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   special, indirect or consequential damages or any damages
  25:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   whatsoever resulting from loss of use, data or profits, whether
  26:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   in an action of contract, negligence or other tortious action,
  27:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   arising out of or in connection with the use or performance of
  28:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****   this software.
  29:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** */
  30:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  31:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \file
  32:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief USB Endpoint definitions for the AVR8 microcontrollers.
  33:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \copydetails Group_EndpointManagement_AVR8
  34:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  35:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \note This file should not be included directly. It is automatically included as needed by the 
  36:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *        dispatch header located in LUFA/Drivers/USB/USB.h.
  37:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  38:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  39:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointRW
  40:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointRW_AVR8 Endpoint Data Reading and Writing (AVR8)
  41:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint data read/write definitions for the Atmel AVR8 architecture.
  42:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  43:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing from and to e
  44:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  45:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  46:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPrimitiveRW
  47:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPrimitiveRW_AVR8 Read/Write of Primitive Data Types (AVR8)
  48:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint primitive read/write definitions for the Atmel AVR8 architecture.
  49:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  50:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to data reading and writing of primitive 
  51:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  from and to endpoints.
  52:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  53:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  54:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointPacketManagement
  55:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointPacketManagement_AVR8 Endpoint Packet Management (AVR8)
  56:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint packet management definitions for the Atmel AVR8 architecture.
  57:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  58:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros, variables, enums and types related to packet management of endpoints.
  59:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  60:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  61:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** /** \ingroup Group_EndpointManagement
  62:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \defgroup Group_EndpointManagement_AVR8 Endpoint Management (AVR8)
  63:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  \brief Endpoint management definitions for the Atmel AVR8 architecture.
  64:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  65:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  Functions, macros and enums related to endpoint management when in USB Device mode. This
  66:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  module contains the endpoint management macros, as well as endpoint interrupt and data
  67:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  send/receive functions for various data types.
  68:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *
  69:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  *  @{
  70:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h ****  */
  71:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  72:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #ifndef __ENDPOINT_AVR8_H__
  73:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** #define __ENDPOINT_AVR8_H__
  74:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  75:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Includes: */
  76:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../../../../Common/Common.h"
  77:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBTask.h"
  78:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#include "../USBInterrupt.h"
  79:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  80:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Enable C linkage for C++ Compilers: */
  81:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if defined(__cplusplus)
  82:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			extern "C" {
  83:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  84:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  85:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Preprocessor Checks: */
  86:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#if !defined(__INCLUDE_FROM_USB_DRIVER)
  87:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#error Do not include this file directly. Include LUFA/Drivers/USB/USB.h instead.
  88:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		#endif
  89:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  90:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Private Interface - For use in library only: */
  91:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#if !defined(__DOXYGEN__)
  92:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
  93:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE(EPIndex)         _ENDPOINT_GET_MAXSIZE2(ENDPOINT_DETAILS_EP ## EPI
  94:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE2(EPDetails)      _ENDPOINT_GET_MAXSIZE3(EPDetails)
  95:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_MAXSIZE3(MaxSize, Banks) (MaxSize)
  96:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
  97:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS(EPIndex)           _ENDPOINT_GET_BANKS2(ENDPOINT_DETAILS_EP ## EPInd
  98:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS2(EPDetails)        _ENDPOINT_GET_BANKS3(EPDetails)
  99:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define _ENDPOINT_GET_BANKS3(MaxSize, Banks)   (Banks)
 100:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 101:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 102:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             7
 103:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 104:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 105:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               256, 2
 106:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  2
 107:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 108:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 109:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP5               64,  2
 110:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP6               64,  2
 111:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 112:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_MAXEP             5
 113:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 114:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP0               64,  1
 115:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP1               64,  1
 116:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP2               64,  1
 117:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP3               64,  2
 118:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_DETAILS_EP4               64,  2
 119:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 120:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 121:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 122:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT A
 123:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                                                       ATTR_ALWAYS_INLINE;
 124:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
 125:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 126:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 127:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 128:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 129:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 130:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 131:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 132:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 133:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 134:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 135:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 136:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 137:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 138:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Function Prototypes: */
 139:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			void Endpoint_ClearEndpoints(void);
 140:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
 141:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG0XData,
 142:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                    const uint8_t UECFG1XData);
 143:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 144:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	#endif
 145:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 146:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 	/* Public Interface - May be used in end-application: */
 147:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Macros: */
 148:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** \name Endpoint Bank Mode Masks */
 149:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@{
 150:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 151:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have one single bank, which requires less USB FIFO memory but resul
 152:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in slower transfers as only one USB device (the AVR or the host) can access the endpoint's
 153:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank at the one time.
 154:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 155:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_SINGLE                    (0 << EPBK0)
 156:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 157:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Mask for the bank mode selection for the \ref Endpoint_ConfigureEndpoint() macro. This indic
 158:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  that the endpoint should have two banks, which requires more USB FIFO memory but results
 159:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  in faster transfers as one USB device (the AVR or the host) can access one bank while the ot
 160:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  accesses the second bank.
 161:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 162:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANK_DOUBLE                    (1 << EPBK0)
 163:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			//@}
 164:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 165:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if (!defined(FIXED_CONTROL_ENDPOINT_SIZE) || defined(__DOXYGEN__))
 166:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Default size of the default control endpoint's bank, until altered by the control endpoint 
 167:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  value in the device descriptor. Not available if the \c FIXED_CONTROL_ENDPOINT_SIZE token i
 168:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 169:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_CONTROLEP_DEFAULT_SIZE     8
 170:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 171:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 172:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the maximum bank size in bytes of a given endpoint.
 173:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 174:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 175:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 176:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 177:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 178:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 179:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_MAX_SIZE(EPIndex)              _ENDPOINT_GET_MAXSIZE(EPIndex)
 180:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 181:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the total number of banks supported by the given endpoint.
 182:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 183:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This macro will only work correctly on endpoint indexes that are compile-time constant
 184:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        defined by the preprocessor.
 185:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 186:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EPIndex  Endpoint number, a value between 0 and (\ref ENDPOINT_TOTAL_ENDPOINTS - 
 187:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 188:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#define ENDPOINT_BANKS_SUPPORTED(EPIndex)       _ENDPOINT_GET_BANKS(EPIndex)
 189:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 190:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#if !defined(CONTROL_ONLY_DEVICE) || defined(__DOXYGEN__)
 191:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				/** Total number of endpoints (including the default control endpoint at address 0) which may
 192:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  be used in the device. Different USB AVR models support different amounts of endpoints,
 193:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 *  this value reflects the maximum number of endpoints for the currently selected AVR model.
 194:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				 */
 195:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            ENDPOINT_DETAILS_MAXEP
 196:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#else
 197:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#define ENDPOINT_TOTAL_ENDPOINTS            1
 198:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			#endif
 199:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 200:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Enums: */
 201:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enum for the possible error return codes of the \ref Endpoint_WaitUntilReady() function.
 202:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 203:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 204:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 205:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			enum Endpoint_WaitUntilReady_ErrorCodes_t
 206:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 207:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_NoError                 = 0, /**< Endpoint is ready for next packet, no erro
 208:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_EndpointStalled         = 1, /**< The endpoint was stalled during the stream
 209:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   transfer by the host or device.
 210:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 211:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_DeviceDisconnected      = 2,	/**< Device was disconnected from the host whil
 212:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   waiting for the endpoint to become ready.
 213:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 214:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_BusSuspended            = 3, /**< The USB bus has been suspended by the host
 215:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   no USB endpoint traffic can occur until th
 216:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   has resumed.
 217:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 218:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				ENDPOINT_READYWAIT_Timeout                 = 4, /**< The host failed to accept or send the next
 219:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   within the software timeout period set by 
 220:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 *   \ref USB_STREAM_TIMEOUT_MS macro.
 221:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                                 */
 222:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			};
 223:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 224:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 		/* Inline Functions: */
 225:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Configures the specified endpoint number with the given endpoint type, direction, bank size
 226:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and banking mode. Once configured, the endpoint may be read from or written to, depending
 227:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  on its direction.
 228:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 229:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Number     Endpoint number to configure. This must be more than 0 and less than
 230:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        \ref ENDPOINT_TOTAL_ENDPOINTS.
 231:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 232:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Type       Type of endpoint to configure, a \c EP_TYPE_* mask. Not all endpoint t
 233:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        are available on Low Speed USB devices - refer to the USB 2.0 specific
 234:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 235:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Direction  Endpoint data direction, either \ref ENDPOINT_DIR_OUT or \ref ENDPOINT
 236:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        All endpoints (except Control type) are unidirectional - data may only
 237:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        from or written to the endpoint bank based on its direction, not both.
 238:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 239:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Size       Size of the endpoint's bank, where packets are stored before they are 
 240:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        to the USB host, or after they have been received from the USB host (d
 241:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        the endpoint's data direction). The bank size must indicate the maximu
 242:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        that the endpoint can handle.
 243:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 244:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] Banks      Number of banks to use for the endpoint being configured, an \c ENDPOI
 245:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        More banks uses more USB DPRAM, but offers better performance. Isochro
 246:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *                        endpoints <b>must</b> have at least two banks.
 247:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 248:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note When the \c ORDERED_EP_CONFIG compile time option is used, Endpoints <b>must</b> be co
 249:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        ascending order, or bank corruption will occur.
 250:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 251:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 252:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Different endpoints may have different maximum packet sizes based on the endpoint's in
 253:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        the chosen microcontroller model's datasheet to determine the maximum bank size for ea
 254:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 255:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 256:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The default control endpoint should not be manually configured by the user application
 257:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        it is automatically configured by the library internally.
 258:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        \n\n
 259:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 260:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This routine will automatically select the specified endpoint upon success. Upon failu
 261:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        which failed to reconfigure correctly will be selected.
 262:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 263:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the configuration succeeded, \c false otherwise.
 264:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 265:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 266:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 267:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 268:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 269:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks) ATTR_ALWAYS_INLINE;
 270:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Number,
 271:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Type,
 272:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Direction,
 273:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint16_t Size,
 274:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			                                              const uint8_t Banks)
 275:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 276:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 277:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size))
 278:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 279:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 280:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Indicates the number of bytes currently stored in the current endpoint's selected bank.
 281:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 282:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note The return width of this function may differ, depending on the maximum endpoint bank s
 283:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *        of the selected AVR model.
 284:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 285:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointRW_AVR8
 286:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 287:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
 288:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 289:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
 290:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint16_t Endpoint_BytesInEndpoint(void)
 291:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 292:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
 293:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCX;
 294:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_4_AVR)
 295:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 296:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#elif defined(USB_SERIES_2_AVR)
 297:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return UEBCLX;
 298:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 299:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 300:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 301:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Get the endpoint address of the currently selected endpoint. This is typically used to save
 302:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint number so that it can be restored after another endpoint has
 303:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  been manipulated.
 304:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 305:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Index of the currently selected endpoint.
 306:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 307:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLI
 308:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
 309:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 310:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 311:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return (UENUM & ENDPOINT_EPNUM_MASK);
 312:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 313:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					return ENDPOINT_CONTROLEP;
 314:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 315:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 316:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 317:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Selects the given endpoint number. If the address from the device descriptors is used, the
 318:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  value should be masked with the \ref ENDPOINT_EPNUM_MASK constant to extract only the endpoi
 319:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  number (and discarding the endpoint direction bit).
 320:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 321:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  Any endpoint operations which do not require the endpoint number to be indicated will operat
 322:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  the currently selected endpoint.
 323:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 324:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number to select.
 325:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 326:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 327:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
 328:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 329:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 330:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 331:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 332:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 333:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 334:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Resets the endpoint bank FIFO. This clears all the endpoint banks and resets the USB control
 335:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  data In and Out pointers to the bank's contents.
 336:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 337:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
 338:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 339:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
 340:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
 341:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 342:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = (1 << EndpointNumber);
 343:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UERST = 0;
 344:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 345:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 346:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Enables the currently selected endpoint so that data can be sent and received through it to
 347:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  and from a host.
 348:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 349:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
 350:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 351:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
 352:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_EnableEndpoint(void)
 353:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 354:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << EPEN);
 355:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 356:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 357:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Disables the currently selected endpoint so that data cannot be sent and received through it
 358:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  to and from a host.
 359:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 360:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
 361:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_DisableEndpoint(void)
 362:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 363:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX &= ~(1 << EPEN);
 364:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 365:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 366:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is enabled, but not necessarily configured.
 367:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 368:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
 369:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 370:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 371:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsEnabled(void)
 372:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 373:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UECONX & (1 << EPEN)) ? true : false);
 374:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 375:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 376:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Retrieves the number of busy banks in the currently selected endpoint, which have been queue
 377:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  transmission via the \ref Endpoint_ClearIN() command, or are awaiting acknowledgement via th
 378:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ref Endpoint_ClearOUT() command.
 379:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 380:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 381:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 382:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Total number of busy banks in the selected endpoint.
 383:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 384:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
 385:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetBusyBanks(void)
 386:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 387:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (UESTA0X & (0x03 << NBUSYBK0));
 388:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 389:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 390:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Aborts all pending IN transactions on the currently selected endpoint, once the bank
 391:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  has been queued for transmission to the host via \ref Endpoint_ClearIN(). This function
 392:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  will terminate all queued transactions, resetting the endpoint banks ready for a new
 393:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  packet.
 394:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 395:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 396:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 397:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_AbortPendingIN(void)
 398:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 399:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (Endpoint_GetBusyBanks() != 0)
 400:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				{
 401:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX |= (1 << RXOUTI);
 402:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					while (UEINTX & (1 << RXOUTI));
 403:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				}
 404:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 405:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 406:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint may be read from (if data is waiting in the en
 407:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  bank and the endpoint is an OUT direction, or if the bank is not yet full if the endpoint is
 408:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction). This function will return false if an error has occurred in the endpoint, if the
 409:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is an OUT direction and no packet (or an empty packet) has been received, or if the endpoint
 410:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  direction and the endpoint bank is full.
 411:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 412:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 413:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 414:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint may be read from or written to, d
 415:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *          on its direction.
 416:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 417:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 418:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsReadWriteAllowed(void)
 419:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 420:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RWAL)) ? true : false);
 421:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 422:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 423:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the currently selected endpoint is configured.
 424:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 425:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false oth
 426:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 427:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 428:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsConfigured(void)
 429:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 430:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 431:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 432:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 433:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Returns a mask indicating which INTERRUPT type endpoints have interrupted - i.e. their
 434:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  interrupt duration has elapsed. Which endpoints have interrupted can be determined by
 435:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  masking the return value against <tt>(1 << <i>{Endpoint Number}</i>)</tt>.
 436:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 437:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Mask whose bits indicate which endpoints have interrupted.
 438:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 439:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_I
 440:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline uint8_t Endpoint_GetEndpointInterrupts(void)
 441:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 442:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return UEINT;
 443:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 444:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 445:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the specified endpoint number has interrupted (valid only for INTERRUPT type
 446:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoints).
 447:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 448:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \param[in] EndpointNumber  Index of the endpoint whose interrupt flag should be tested.
 449:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 450:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the specified endpoint has interrupted, \c false otherwise.
 451:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 452:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber) ATTR_WARN_UNUSE
 453:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_HasEndpointInterrupted(const uint8_t EndpointNumber)
 454:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 455:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((Endpoint_GetEndpointInterrupts() & (1 << EndpointNumber)) ? true : false);
 456:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 457:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 458:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected IN endpoint is ready for a new packet to be sent to the host.
 459:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 460:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 461:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 462:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwis
 463:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 464:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 465:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsINReady(void)
 466:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 467:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 468:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 469:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 470:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the selected OUT endpoint has received new packet from the host.
 471:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 472:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 473:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 474:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwis
 475:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 476:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 477:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsOUTReceived(void)
 478:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 479:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 480:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 481:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 482:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Determines if the current CONTROL type endpoint has received a SETUP packet.
 483:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 484:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 485:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 486:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false other
 487:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 488:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
 489:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline bool Endpoint_IsSETUPReceived(void)
 490:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 491:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXSTPI)) ? true : false);
  33               		.loc 2 491 0
  34 000a 8091 E800 		lds r24,232
  35               	.LVL1:
  36               	.LBE63:
  37               	.LBE62:
  73:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (!(Endpoint_IsSETUPReceived()))
  38               		.loc 1 73 0
  39 000e 83FF      		sbrs r24,3
  40 0010 00C0      		rjmp .L1
  74:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	  return;
  75:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  76:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (USB_ControlRequest.wIndex != RNDISInterfaceInfo->Config.ControlInterfaceNumber)
  41               		.loc 1 76 0
  42 0012 8881      		ld r24,Y
  43 0014 90E0      		ldi r25,0
  44 0016 2091 0000 		lds r18,USB_ControlRequest+4
  45 001a 3091 0000 		lds r19,USB_ControlRequest+4+1
  46 001e 2817      		cp r18,r24
  47 0020 3907      		cpc r19,r25
  48 0022 01F0      		breq .+2
  49 0024 00C0      		rjmp .L1
  77:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	  return;
  78:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  79:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	switch (USB_ControlRequest.bRequest)
  50               		.loc 1 79 0
  51 0026 8091 0000 		lds r24,USB_ControlRequest+1
  52 002a 8823      		tst r24
  53 002c 01F0      		breq .L3
  54 002e 8130      		cpi r24,lo8(1)
  55 0030 01F0      		breq .+2
  56 0032 00C0      		rjmp .L1
  57 0034 00C0      		rjmp .L4
  58               	.L3:
  80:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
  81:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case RNDIS_REQ_SendEncapsulatedCommand:
  82:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)
  59               		.loc 1 82 0
  60 0036 8091 0000 		lds r24,USB_ControlRequest
  61 003a 8132      		cpi r24,lo8(33)
  62 003c 01F0      		breq .+2
  63 003e 00C0      		rjmp .L1
  64               	.LBB64:
  65               	.LBB65:
 492:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 493:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 494:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Clears a received SETUP packet on the currently selected CONTROL type endpoint, freeing up t
 495:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint for the next packet.
 496:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 497:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 498:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 499:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \note This is not applicable for non CONTROL type endpoints.
 500:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 501:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
 502:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearSETUP(void)
 503:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 504:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
  66               		.loc 2 504 0
  67 0040 8091 E800 		lds r24,232
  68 0044 877F      		andi r24,lo8(-9)
  69 0046 8093 E800 		sts 232,r24
  70               	.LBE65:
  71               	.LBE64:
  83:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			{
  84:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				Endpoint_ClearSETUP();
  85:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				Endpoint_Read_Control_Stream_LE(RNDISInterfaceInfo->State.RNDISMessageBuffer, USB_ControlReques
  72               		.loc 1 85 0
  73 004a 6091 0000 		lds r22,USB_ControlRequest+6
  74 004e 7091 0000 		lds r23,USB_ControlRequest+6+1
  75 0052 CE01      		movw r24,r28
  76 0054 4596      		adiw r24,21
  77 0056 0E94 0000 		call Endpoint_Read_Control_Stream_LE
  78               	.LVL2:
  79               	.LBB66:
  80               	.LBB67:
 505:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 506:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 507:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Sends an IN packet to the host on the currently selected endpoint, freeing up the endpoint f
 508:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  next packet and switching to the alternative endpoint bank if double banked.
 509:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 510:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 511:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 512:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
 513:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearIN(void)
 514:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 515:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 516:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
  81               		.loc 2 516 0
  82 005a 8091 E800 		lds r24,232
  83 005e 8E77      		andi r24,lo8(126)
  84 0060 8093 E800 		sts 232,r24
  85               	.LVL3:
  86               	.LBE67:
  87               	.LBE66:
  88               	.LBB68:
  89               	.LBB69:
  86:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				Endpoint_ClearIN();
  87:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  88:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				RNDIS_Device_ProcessRNDISControlMessage(RNDISInterfaceInfo);
  89:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			}
  90:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  91:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
  92:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case RNDIS_REQ_GetEncapsulatedResponse:
  93:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
  94:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			{
  95:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RND
  96:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
  97:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				if (!(MessageHeader->MessageLength))
  98:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				{
  99:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 					RNDISInterfaceInfo->State.RNDISMessageBuffer[0] = 0;
 100:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 					MessageHeader->MessageLength                    = CPU_TO_LE32(1);
 101:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				}
 102:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 103:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				Endpoint_ClearSETUP();
 104:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				Endpoint_Write_Control_Stream_LE(RNDISInterfaceInfo->State.RNDISMessageBuffer, le32_to_cpu(Mess
 105:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				Endpoint_ClearOUT();
 106:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 107:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				MessageHeader->MessageLength = CPU_TO_LE32(0);
 108:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			}
 109:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 110:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
 111:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 112:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 113:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 114:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** bool RNDIS_Device_ConfigureEndpoints(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
 115:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 116:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
 117:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 118:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 119:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 120:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		uint16_t Size;
 121:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		uint8_t  Type;
 122:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		uint8_t  Direction;
 123:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		bool     DoubleBanked;
 124:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 125:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		if (EndpointNum == RNDISInterfaceInfo->Config.DataINEndpointNumber)
 126:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		{
 127:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Size         = RNDISInterfaceInfo->Config.DataINEndpointSize;
 128:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Direction    = ENDPOINT_DIR_IN;
 129:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Type         = EP_TYPE_BULK;
 130:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			DoubleBanked = RNDISInterfaceInfo->Config.DataINEndpointDoubleBank;
 131:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		}
 132:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		else if (EndpointNum == RNDISInterfaceInfo->Config.DataOUTEndpointNumber)
 133:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		{
 134:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Size         = RNDISInterfaceInfo->Config.DataOUTEndpointSize;
 135:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Direction    = ENDPOINT_DIR_OUT;
 136:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Type         = EP_TYPE_BULK;
 137:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			DoubleBanked = RNDISInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 138:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		}
 139:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		else if (EndpointNum == RNDISInterfaceInfo->Config.NotificationEndpointNumber)
 140:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		{
 141:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Size         = RNDISInterfaceInfo->Config.NotificationEndpointSize;
 142:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Direction    = ENDPOINT_DIR_IN;
 143:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Type         = EP_TYPE_INTERRUPT;
 144:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			DoubleBanked = RNDISInterfaceInfo->Config.NotificationEndpointDoubleBank;
 145:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		}
 146:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		else
 147:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		{
 148:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			continue;
 149:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		}
 150:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 151:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 152:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		                                 DoubleBanked ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
 153:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		{
 154:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return false;
 155:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		}
 156:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 157:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 158:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	return true;
 159:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 160:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 161:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** void RNDIS_Device_USBTask(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
 162:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 163:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 164:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	  return;
 165:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 166:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.NotificationEndpointNumber);
 167:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 168:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (Endpoint_IsINReady() && RNDISInterfaceInfo->State.ResponseReady)
 169:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 170:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		USB_Request_Header_t Notification = (USB_Request_Header_t)
 171:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			{
 172:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE),
 173:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				.bRequest      = RNDIS_NOTIF_ResponseAvailable,
 174:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				.wValue        = CPU_TO_LE16(0),
 175:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				.wIndex        = CPU_TO_LE16(0),
 176:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				.wLength       = CPU_TO_LE16(0),
 177:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			};
 178:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 179:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 180:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 181:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		Endpoint_ClearIN();
 182:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 183:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		RNDISInterfaceInfo->State.ResponseReady = false;
 184:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 185:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 186:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 187:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** void RNDIS_Device_ProcessRNDISControlMessage(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo
 188:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 189:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	/* Note: Only a single buffer is used for both the received message and its response to save SRAM.
 190:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	         this, response bytes should be filled in order so that they do not clobber unread data in
 191:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 192:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	RNDIS_Message_Header_t* MessageHeader = (RNDIS_Message_Header_t*)&RNDISInterfaceInfo->State.RNDISM
 193:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 194:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	switch (le32_to_cpu(MessageHeader->MessageType))
  90               		.loc 1 194 0
  91 0064 4D89      		ldd r20,Y+21
  92 0066 5E89      		ldd r21,Y+22
  93 0068 6F89      		ldd r22,Y+23
  94 006a 788D      		ldd r23,Y+24
  95 006c 4430      		cpi r20,4
  96 006e 5105      		cpc r21,__zero_reg__
  97 0070 6105      		cpc r22,__zero_reg__
  98 0072 7105      		cpc r23,__zero_reg__
  99 0074 01F4      		brne .+2
 100 0076 00C0      		rjmp .L7
 101 0078 00F4      		brsh .L11
 102 007a 4230      		cpi r20,2
 103 007c 5105      		cpc r21,__zero_reg__
 104 007e 6105      		cpc r22,__zero_reg__
 105 0080 7105      		cpc r23,__zero_reg__
 106 0082 01F0      		breq .L5
 107 0084 4330      		cpi r20,3
 108 0086 5105      		cpc r21,__zero_reg__
 109 0088 6105      		cpc r22,__zero_reg__
 110 008a 7105      		cpc r23,__zero_reg__
 111 008c 01F0      		breq .+2
 112 008e 00C0      		rjmp .L1
 113 0090 00C0      		rjmp .L6
 114               	.L11:
 115 0092 4630      		cpi r20,6
 116 0094 5105      		cpc r21,__zero_reg__
 117 0096 6105      		cpc r22,__zero_reg__
 118 0098 7105      		cpc r23,__zero_reg__
 119 009a 01F4      		brne .+2
 120 009c 00C0      		rjmp .L9
 121 009e 00F4      		brsh .+2
 122 00a0 00C0      		rjmp .L8
 123 00a2 4830      		cpi r20,8
 124 00a4 5105      		cpc r21,__zero_reg__
 125 00a6 6105      		cpc r22,__zero_reg__
 126 00a8 7105      		cpc r23,__zero_reg__
 127 00aa 01F0      		breq .+2
 128 00ac 00C0      		rjmp .L1
 129 00ae 00C0      		rjmp .L10
 130               	.L5:
 131               	.LBB70:
 195:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 196:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case REMOTE_NDIS_INITIALIZE_MSG:
 197:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 132               		.loc 1 197 0
 133 00b0 FE01      		movw r30,r28
 134 00b2 EB56      		subi r30,107
 135 00b4 FF4F      		sbci r31,-1
 136 00b6 21E0      		ldi r18,lo8(1)
 137 00b8 2083      		st Z,r18
 138               	.LVL4:
 198:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 199:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_Initialize_Message_t*  INITIALIZE_Message  =
 200:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			               (RNDIS_Initialize_Message_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 201:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_Initialize_Complete_t* INITIALIZE_Response =
 202:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			               (RNDIS_Initialize_Complete_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 203:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 204:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->MessageType            = CPU_TO_LE32(REMOTE_NDIS_INITIALIZE_CMPLT);
 139               		.loc 1 204 0
 140 00ba 82E0      		ldi r24,lo8(2)
 141 00bc 90E0      		ldi r25,0
 142 00be A0E0      		ldi r26,0
 143 00c0 B0E8      		ldi r27,lo8(-128)
 144 00c2 8D8B      		std Y+21,r24
 145 00c4 9E8B      		std Y+22,r25
 146 00c6 AF8B      		std Y+23,r26
 147 00c8 B88F      		std Y+24,r27
 205:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->MessageLength          = CPU_TO_LE32(sizeof(RNDIS_Initialize_Complete_t));
 148               		.loc 1 205 0
 149 00ca 84E3      		ldi r24,lo8(52)
 150 00cc 90E0      		ldi r25,0
 151 00ce A0E0      		ldi r26,0
 152 00d0 B0E0      		ldi r27,0
 153 00d2 898F      		std Y+25,r24
 154 00d4 9A8F      		std Y+26,r25
 155 00d6 AB8F      		std Y+27,r26
 156 00d8 BC8F      		std Y+28,r27
 206:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->RequestId              = INITIALIZE_Message->RequestId;
 207:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->Status                 = CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS);
 157               		.loc 1 207 0
 158 00da 19A2      		std Y+33,__zero_reg__
 159 00dc 1AA2      		std Y+34,__zero_reg__
 160 00de 1BA2      		std Y+35,__zero_reg__
 161 00e0 1CA2      		std Y+36,__zero_reg__
 208:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 209:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->MajorVersion           = CPU_TO_LE32(REMOTE_NDIS_VERSION_MAJOR);
 162               		.loc 1 209 0
 163 00e2 41E0      		ldi r20,lo8(1)
 164 00e4 50E0      		ldi r21,0
 165 00e6 60E0      		ldi r22,0
 166 00e8 70E0      		ldi r23,0
 167 00ea 4DA3      		std Y+37,r20
 168 00ec 5EA3      		std Y+38,r21
 169 00ee 6FA3      		std Y+39,r22
 170 00f0 78A7      		std Y+40,r23
 210:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->MinorVersion           = CPU_TO_LE32(REMOTE_NDIS_VERSION_MINOR);
 171               		.loc 1 210 0
 172 00f2 19A6      		std Y+41,__zero_reg__
 173 00f4 1AA6      		std Y+42,__zero_reg__
 174 00f6 1BA6      		std Y+43,__zero_reg__
 175 00f8 1CA6      		std Y+44,__zero_reg__
 211:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->DeviceFlags            = CPU_TO_LE32(REMOTE_NDIS_DF_CONNECTIONLESS);
 176               		.loc 1 211 0
 177 00fa 4DA7      		std Y+45,r20
 178 00fc 5EA7      		std Y+46,r21
 179 00fe 6FA7      		std Y+47,r22
 180 0100 78AB      		std Y+48,r23
 212:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->Medium                 = CPU_TO_LE32(REMOTE_NDIS_MEDIUM_802_3);
 181               		.loc 1 212 0
 182 0102 19AA      		std Y+49,__zero_reg__
 183 0104 1AAA      		std Y+50,__zero_reg__
 184 0106 1BAA      		std Y+51,__zero_reg__
 185 0108 1CAA      		std Y+52,__zero_reg__
 213:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->MaxPacketsPerTransfer  = CPU_TO_LE32(1);
 186               		.loc 1 213 0
 187 010a 4DAB      		std Y+53,r20
 188 010c 5EAB      		std Y+54,r21
 189 010e 6FAB      		std Y+55,r22
 190 0110 78AF      		std Y+56,r23
 214:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->MaxTransferSize        = CPU_TO_LE32(sizeof(RNDIS_Packet_Message_t) + ETHER
 191               		.loc 1 214 0
 192 0112 88E0      		ldi r24,lo8(8)
 193 0114 96E0      		ldi r25,lo8(6)
 194 0116 A0E0      		ldi r26,0
 195 0118 B0E0      		ldi r27,0
 196 011a 89AF      		std Y+57,r24
 197 011c 9AAF      		std Y+58,r25
 198 011e ABAF      		std Y+59,r26
 199 0120 BCAF      		std Y+60,r27
 215:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->PacketAlignmentFactor  = CPU_TO_LE32(0);
 200               		.loc 1 215 0
 201 0122 FE01      		movw r30,r28
 202 0124 FD96      		adiw r30,61
 203 0126 1082      		st Z,__zero_reg__
 204 0128 1182      		std Z+1,__zero_reg__
 205 012a 1282      		std Z+2,__zero_reg__
 206 012c 1382      		std Z+3,__zero_reg__
 216:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->AFListOffset           = CPU_TO_LE32(0);
 207               		.loc 1 216 0
 208 012e FE01      		movw r30,r28
 209 0130 EF5B      		subi r30,-65
 210 0132 FF4F      		sbci r31,-1
 211 0134 1082      		st Z,__zero_reg__
 212 0136 1182      		std Z+1,__zero_reg__
 213 0138 1282      		std Z+2,__zero_reg__
 214 013a 1382      		std Z+3,__zero_reg__
 217:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			INITIALIZE_Response->AFListSize             = CPU_TO_LE32(0);
 215               		.loc 1 217 0
 216 013c FE01      		movw r30,r28
 217 013e EB5B      		subi r30,-69
 218 0140 FF4F      		sbci r31,-1
 219 0142 1082      		st Z,__zero_reg__
 220 0144 1182      		std Z+1,__zero_reg__
 221 0146 1282      		std Z+2,__zero_reg__
 222 0148 1382      		std Z+3,__zero_reg__
 218:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 219:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.CurrRNDISState    = RNDIS_Initialized;
 223               		.loc 1 219 0
 224 014a CA56      		subi r28,106
 225 014c DF4F      		sbci r29,-1
 226               	.LVL5:
 227 014e 2883      		st Y,r18
 228 0150 00C0      		rjmp .L1
 229               	.LVL6:
 230               	.L6:
 220:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
 221:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case REMOTE_NDIS_HALT_MSG:
 222:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = false;
 231               		.loc 1 222 0
 232 0152 FE01      		movw r30,r28
 233 0154 EB56      		subi r30,107
 234 0156 FF4F      		sbci r31,-1
 235 0158 1082      		st Z,__zero_reg__
 223:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 224:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			MessageHeader->MessageLength                = CPU_TO_LE32(0);
 236               		.loc 1 224 0
 237 015a 198E      		std Y+25,__zero_reg__
 238 015c 1A8E      		std Y+26,__zero_reg__
 239 015e 1B8E      		std Y+27,__zero_reg__
 240 0160 1C8E      		std Y+28,__zero_reg__
 225:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 226:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.CurrRNDISState    = RNDIS_Uninitialized;
 241               		.loc 1 226 0
 242 0162 CA56      		subi r28,106
 243 0164 DF4F      		sbci r29,-1
 244               	.LVL7:
 245 0166 1882      		st Y,__zero_reg__
 246 0168 00C0      		rjmp .L1
 247               	.LVL8:
 248               	.L7:
 227:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
 228:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case REMOTE_NDIS_QUERY_MSG:
 229:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 249               		.loc 1 229 0
 250 016a FE01      		movw r30,r28
 251 016c EB56      		subi r30,107
 252 016e FF4F      		sbci r31,-1
 253 0170 81E0      		ldi r24,lo8(1)
 254 0172 8083      		st Z,r24
 255               	.LVL9:
 230:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 231:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_Query_Message_t*  QUERY_Message       = (RNDIS_Query_Message_t*)&RNDISInterfaceInfo->State
 232:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_Query_Complete_t* QUERY_Response      = (RNDIS_Query_Complete_t*)&RNDISInterfaceInfo->Stat
 233:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			uint32_t                Query_Oid           = CPU_TO_LE32(QUERY_Message->Oid);
 256               		.loc 1 233 0
 257 0174 49A1      		ldd r20,Y+33
 258 0176 5AA1      		ldd r21,Y+34
 259 0178 6BA1      		ldd r22,Y+35
 260 017a 7CA1      		ldd r23,Y+36
 261               	.LVL10:
 234:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 235:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			void*    QueryData    = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Message_Heade
 236:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                                      le32_to_cpu(QUERY_Message-
 237:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			void*    ResponseData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Query_Complet
 262               		.loc 1 237 0
 263 017c DE01      		movw r26,r28
 264 017e 9D96      		adiw r26,45
 265               	.LVL11:
 238:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			uint16_t ResponseSize;
 239:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 240:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			QUERY_Response->MessageType                 = CPU_TO_LE32(REMOTE_NDIS_QUERY_CMPLT);
 266               		.loc 1 240 0
 267 0180 04E0      		ldi r16,lo8(4)
 268 0182 10E0      		ldi r17,0
 269 0184 20E0      		ldi r18,0
 270 0186 30E8      		ldi r19,lo8(-128)
 271 0188 0D8B      		std Y+21,r16
 272 018a 1E8B      		std Y+22,r17
 273 018c 2F8B      		std Y+23,r18
 274 018e 388F      		std Y+24,r19
 275               	.LVL12:
 276               	.LBB71:
 277               	.LBB72:
 241:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 242:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			if (RNDIS_Device_ProcessNDISQuery(RNDISInterfaceInfo, Query_Oid, QueryData, le32_to_cpu(QUERY_Me
 243:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                  ResponseData, &ResponseSize))
 244:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			{
 245:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->Status                  = CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS);
 246:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->MessageLength           = cpu_to_le32(sizeof(RNDIS_Query_Complete_t) + Response
 247:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 248:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferLength = CPU_TO_LE32(ResponseSize);
 249:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Query_Complete_t) - sizeof(R
 250:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			}
 251:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			else
 252:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			{
 253:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->Status                  = CPU_TO_LE32(REMOTE_NDIS_STATUS_NOT_SUPPORTED);
 254:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->MessageLength           = CPU_TO_LE32(sizeof(RNDIS_Query_Complete_t));
 255:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 256:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferLength = CPU_TO_LE32(0);
 257:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferOffset = CPU_TO_LE32(0);
 258:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			}
 259:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 260:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
 261:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case REMOTE_NDIS_SET_MSG:
 262:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 263:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 264:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_Set_Message_t*  SET_Message           = (RNDIS_Set_Message_t*)&RNDISInterfaceInfo->State.R
 265:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_Set_Complete_t* SET_Response          = (RNDIS_Set_Complete_t*)&RNDISInterfaceInfo->State.
 266:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			uint32_t              SET_Oid               = le32_to_cpu(SET_Message->Oid);
 267:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 268:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			SET_Response->MessageType                   = CPU_TO_LE32(REMOTE_NDIS_SET_CMPLT);
 269:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			SET_Response->MessageLength                 = CPU_TO_LE32(sizeof(RNDIS_Set_Complete_t));
 270:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			SET_Response->RequestId                     = SET_Message->RequestId;
 271:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 272:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			void* SetData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Message_Header_t) +
 273:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                              le32_to_cpu(SET_Message->Informati
 274:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 275:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			SET_Response->Status = RNDIS_Device_ProcessNDISSet(RNDISInterfaceInfo, SET_Oid, SetData,
 276:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                   le32_to_cpu(SET_Message->InformationBufferLen
 277:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                   REMOTE_NDIS_STATUS_SUCCESS : REMOTE_NDIS_STAT
 278:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
 279:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case REMOTE_NDIS_RESET_MSG:
 280:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 281:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 282:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_Reset_Complete_t* RESET_Response      = (RNDIS_Reset_Complete_t*)&RNDISInterfaceInfo->Stat
 283:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 284:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RESET_Response->MessageType                 = CPU_TO_LE32(REMOTE_NDIS_RESET_CMPLT);
 285:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RESET_Response->MessageLength               = CPU_TO_LE32(sizeof(RNDIS_Reset_Complete_t));
 286:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RESET_Response->Status                      = CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS);
 287:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RESET_Response->AddressingReset             = CPU_TO_LE32(0);
 288:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 289:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
 290:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case REMOTE_NDIS_KEEPALIVE_MSG:
 291:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 292:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 293:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_KeepAlive_Message_t*  KEEPALIVE_Message  =
 294:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                (RNDIS_KeepAlive_Message_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 295:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDIS_KeepAlive_Complete_t* KEEPALIVE_Response =
 296:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                (RNDIS_KeepAlive_Complete_t*)&RNDISInterfaceInfo->State.RNDISMessageBuffer;
 297:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 298:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			KEEPALIVE_Response->MessageType             = CPU_TO_LE32(REMOTE_NDIS_KEEPALIVE_CMPLT);
 299:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			KEEPALIVE_Response->MessageLength           = CPU_TO_LE32(sizeof(RNDIS_KeepAlive_Complete_t));
 300:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			KEEPALIVE_Response->RequestId               = KEEPALIVE_Message->RequestId;
 301:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			KEEPALIVE_Response->Status                  = CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS);
 302:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 303:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			break;
 304:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 305:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 306:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 307:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** static bool RNDIS_Device_ProcessNDISQuery(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 308:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                           const uint32_t OId,
 309:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                           void* const QueryData,
 310:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                           const uint16_t QuerySize,
 311:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                           void* ResponseData,
 312:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                           uint16_t* const ResponseSize)
 313:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 314:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	(void)QueryData;
 315:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	(void)QuerySize;
 316:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 317:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	switch (OId)
 278               		.loc 1 317 0
 279 0190 4E30      		cpi r20,14
 280 0192 81E0      		ldi r24,1
 281 0194 5807      		cpc r21,r24
 282 0196 6807      		cpc r22,r24
 283 0198 7105      		cpc r23,__zero_reg__
 284 019a 01F4      		brne .+2
 285 019c 00C0      		rjmp .L20
 286 019e 00F0      		brlo .+2
 287 01a0 00C0      		rjmp .L27
 288 01a2 4630      		cpi r20,6
 289 01a4 F1E0      		ldi r31,1
 290 01a6 5F07      		cpc r21,r31
 291 01a8 6F07      		cpc r22,r31
 292 01aa 7105      		cpc r23,__zero_reg__
 293 01ac 01F4      		brne .+2
 294 01ae 00C0      		rjmp .L16
 295 01b0 00F4      		brsh .L28
 296 01b2 4230      		cpi r20,2
 297 01b4 E1E0      		ldi r30,1
 298 01b6 5E07      		cpc r21,r30
 299 01b8 6E07      		cpc r22,r30
 300 01ba 7105      		cpc r23,__zero_reg__
 301 01bc 01F4      		brne .+2
 302 01be 00C0      		rjmp .L24
 303 01c0 00F4      		brsh .L29
 304 01c2 4130      		cpi r20,1
 305 01c4 5140      		sbci r21,1
 306 01c6 6140      		sbci r22,1
 307 01c8 7105      		cpc r23,__zero_reg__
 308 01ca 01F0      		breq .+2
 309 01cc 00C0      		rjmp .L12
 310 01ce 00C0      		rjmp .L13
 311               	.L29:
 312 01d0 4530      		cpi r20,5
 313 01d2 5140      		sbci r21,1
 314 01d4 6140      		sbci r22,1
 315 01d6 7105      		cpc r23,__zero_reg__
 316 01d8 00F0      		brlo .+2
 317 01da 00C0      		rjmp .L12
 318 01dc 00C0      		rjmp .L24
 319               	.L28:
 320 01de 4C30      		cpi r20,12
 321 01e0 F1E0      		ldi r31,1
 322 01e2 5F07      		cpc r21,r31
 323 01e4 6F07      		cpc r22,r31
 324 01e6 7105      		cpc r23,__zero_reg__
 325 01e8 00F4      		brsh .L30
 326 01ea 4A30      		cpi r20,10
 327 01ec 81E0      		ldi r24,1
 328 01ee 5807      		cpc r21,r24
 329 01f0 6807      		cpc r22,r24
 330 01f2 7105      		cpc r23,__zero_reg__
 331 01f4 00F0      		brlo .+2
 332 01f6 00C0      		rjmp .L16
 333 01f8 4730      		cpi r20,7
 334 01fa 5140      		sbci r21,1
 335 01fc 6140      		sbci r22,1
 336 01fe 7105      		cpc r23,__zero_reg__
 337 0200 01F0      		breq .+2
 338 0202 00C0      		rjmp .L12
 339 0204 00C0      		rjmp .L17
 340               	.L30:
 341 0206 4C30      		cpi r20,12
 342 0208 F1E0      		ldi r31,1
 343 020a 5F07      		cpc r21,r31
 344 020c 6F07      		cpc r22,r31
 345 020e 7105      		cpc r23,__zero_reg__
 346 0210 01F4      		brne .+2
 347 0212 00C0      		rjmp .L18
 348 0214 4D30      		cpi r20,13
 349 0216 5140      		sbci r21,1
 350 0218 6140      		sbci r22,1
 351 021a 7105      		cpc r23,__zero_reg__
 352 021c 01F0      		breq .+2
 353 021e 00C0      		rjmp .L12
 354 0220 00C0      		rjmp .L19
 355               	.L27:
 356 0222 4630      		cpi r20,6
 357 0224 E1E0      		ldi r30,1
 358 0226 5E07      		cpc r21,r30
 359 0228 E2E0      		ldi r30,2
 360 022a 6E07      		cpc r22,r30
 361 022c 7105      		cpc r23,__zero_reg__
 362 022e 00F4      		brsh .L31
 363 0230 4130      		cpi r20,1
 364 0232 F1E0      		ldi r31,1
 365 0234 5F07      		cpc r21,r31
 366 0236 F2E0      		ldi r31,2
 367 0238 6F07      		cpc r22,r31
 368 023a 7105      		cpc r23,__zero_reg__
 369 023c 00F0      		brlo .+2
 370 023e 00C0      		rjmp .L24
 371 0240 4431      		cpi r20,20
 372 0242 81E0      		ldi r24,1
 373 0244 5807      		cpc r21,r24
 374 0246 6807      		cpc r22,r24
 375 0248 7105      		cpc r23,__zero_reg__
 376 024a 01F4      		brne .+2
 377 024c 00C0      		rjmp .L24
 378 024e 4230      		cpi r20,2
 379 0250 E2E0      		ldi r30,2
 380 0252 5E07      		cpc r21,r30
 381 0254 E1E0      		ldi r30,1
 382 0256 6E07      		cpc r22,r30
 383 0258 7105      		cpc r23,__zero_reg__
 384 025a 01F4      		brne .+2
 385 025c 00C0      		rjmp .L24
 386 025e 4131      		cpi r20,17
 387 0260 5140      		sbci r21,1
 388 0262 6140      		sbci r22,1
 389 0264 7105      		cpc r23,__zero_reg__
 390 0266 01F0      		breq .+2
 391 0268 00C0      		rjmp .L12
 392 026a 00C0      		rjmp .L21
 393               	.L31:
 394 026c 4430      		cpi r20,4
 395 026e 81E0      		ldi r24,1
 396 0270 5807      		cpc r21,r24
 397 0272 6807      		cpc r22,r24
 398 0274 7807      		cpc r23,r24
 399 0276 01F4      		brne .+2
 400 0278 00C0      		rjmp .L26
 401 027a 00F4      		brsh .L32
 402 027c 4150      		subi r20,1
 403 027e 5140      		sbci r21,1
 404 0280 6140      		sbci r22,1
 405 0282 7140      		sbci r23,1
 406               	.LVL13:
 407 0284 4230      		cpi r20,2
 408 0286 5105      		cpc r21,__zero_reg__
 409 0288 6105      		cpc r22,__zero_reg__
 410 028a 7105      		cpc r23,__zero_reg__
 411 028c 00F0      		brlo .+2
 412 028e 00C0      		rjmp .L12
 413 0290 00C0      		rjmp .L49
 414               	.LVL14:
 415               	.L32:
 416 0292 4150      		subi r20,1
 417 0294 5140      		sbci r21,1
 418 0296 6240      		sbci r22,2
 419 0298 7140      		sbci r23,1
 420               	.LVL15:
 421 029a 4330      		cpi r20,3
 422 029c 5105      		cpc r21,__zero_reg__
 423 029e 6105      		cpc r22,__zero_reg__
 424 02a0 7105      		cpc r23,__zero_reg__
 425 02a2 00F0      		brlo .+2
 426 02a4 00C0      		rjmp .L12
 427 02a6 00C0      		rjmp .L24
 428               	.LVL16:
 429               	.L13:
 318:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 319:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_SUPPORTED_LIST:
 320:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(AdapterSupportedOIDList);
 321:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 322:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			memcpy_P(ResponseData, AdapterSupportedOIDList, sizeof(AdapterSupportedOIDList));
 430               		.loc 1 322 0
 431 02a8 4CE6      		ldi r20,lo8(108)
 432 02aa 50E0      		ldi r21,0
 433               	.LVL17:
 434 02ac 60E0      		ldi r22,lo8(AdapterSupportedOIDList)
 435 02ae 70E0      		ldi r23,hi8(AdapterSupportedOIDList)
 436 02b0 CD01      		movw r24,r26
 437 02b2 0E94 0000 		call memcpy_P
 438               	.LVL18:
 320:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(AdapterSupportedOIDList);
 439               		.loc 1 320 0
 440 02b6 0CE6      		ldi r16,lo8(108)
 441 02b8 10E0      		ldi r17,0
 442 02ba 00C0      		rjmp .L33
 443               	.LVL19:
 444               	.L18:
 323:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 324:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 325:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_PHYSICAL_MEDIUM:
 326:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 327:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 328:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			/* Indicate that the device is a true ethernet link */
 329:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(0);
 330:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 331:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 332:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_HARDWARE_STATUS:
 333:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 334:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 335:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(NDIS_HardwareStatus_Ready);
 336:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 337:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 338:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_MEDIA_SUPPORTED:
 339:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_MEDIA_IN_USE:
 340:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 341:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 342:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(REMOTE_NDIS_MEDIUM_802_3);
 343:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 344:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 345:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_VENDOR_ID:
 346:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 347:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 348:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			/* Vendor ID 0x0xFFFFFF is reserved for vendors who have not purchased a NDIS VID */
 349:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(0x00FFFFFF);
 445               		.loc 1 349 0
 446 02bc 8FEF      		ldi r24,lo8(-1)
 447 02be 9FEF      		ldi r25,lo8(-1)
 448 02c0 AFEF      		ldi r26,lo8(-1)
 449 02c2 B0E0      		ldi r27,0
 450 02c4 8DA7      		std Y+45,r24
 451 02c6 9EA7      		std Y+46,r25
 452 02c8 AFA7      		std Y+47,r26
 453 02ca B8AB      		std Y+48,r27
 454 02cc 00C0      		rjmp .L51
 455               	.LVL20:
 456               	.L16:
 350:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 351:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 352:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_MAXIMUM_FRAME_SIZE:
 353:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_TRANSMIT_BLOCK_SIZE:
 354:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_RECEIVE_BLOCK_SIZE:
 355:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 356:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 357:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(ETHERNET_FRAME_SIZE_MAX);
 457               		.loc 1 357 0
 458 02ce 4CED      		ldi r20,lo8(-36)
 459 02d0 55E0      		ldi r21,lo8(5)
 460 02d2 60E0      		ldi r22,0
 461 02d4 70E0      		ldi r23,0
 462               	.LVL21:
 463 02d6 00C0      		rjmp .L52
 464               	.LVL22:
 465               	.L19:
 358:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 359:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 360:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_VENDOR_DESCRIPTION:
 361:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = (strlen(RNDISInterfaceInfo->Config.AdapterVendorDescription) + 1);
 466               		.loc 1 361 0
 467 02d8 6D85      		ldd r22,Y+13
 468 02da 7E85      		ldd r23,Y+14
 469 02dc CB01      		movw r24,r22
 470 02de FC01      		movw r30,r24
 471               		0:
 472 02e0 0190      		ld __tmp_reg__,Z+
 473 02e2 0020      		tst __tmp_reg__
 474 02e4 01F4      		brne 0b
 475 02e6 8F01      		movw r16,r30
 476 02e8 081B      		sub r16,r24
 477 02ea 190B      		sbc r17,r25
 478               	.LVL23:
 362:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 363:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			memcpy(ResponseData, RNDISInterfaceInfo->Config.AdapterVendorDescription, *ResponseSize);
 479               		.loc 1 363 0
 480 02ec A801      		movw r20,r16
 481               	.LVL24:
 482 02ee CD01      		movw r24,r26
 483 02f0 0E94 0000 		call memcpy
 484               	.LVL25:
 485 02f4 00C0      		rjmp .L33
 486               	.LVL26:
 487               	.L17:
 364:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 365:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 366:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_MEDIA_CONNECT_STATUS:
 367:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 368:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 369:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(REMOTE_NDIS_MEDIA_STATE_CONNECTED);
 370:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 371:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 372:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_LINK_SPEED:
 373:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 374:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 375:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			/* Indicate 10Mb/s link speed */
 376:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(100000);
 488               		.loc 1 376 0
 489 02f6 40EA      		ldi r20,lo8(-96)
 490 02f8 56E8      		ldi r21,lo8(-122)
 491 02fa 61E0      		ldi r22,lo8(1)
 492 02fc 70E0      		ldi r23,0
 493               	.LVL27:
 494 02fe 00C0      		rjmp .L52
 495               	.LVL28:
 496               	.L49:
 377:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 378:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 379:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_802_3_PERMANENT_ADDRESS:
 380:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_802_3_CURRENT_ADDRESS:
 381:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(MAC_Address_t);
 382:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 383:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			memcpy(ResponseData, &RNDISInterfaceInfo->Config.AdapterMACAddress, sizeof(MAC_Address_t));
 497               		.loc 1 383 0
 498 0300 FE01      		movw r30,r28
 499 0302 3F96      		adiw r30,15
 500 0304 86E0      		ldi r24,lo8(6)
 501               		0:
 502 0306 0190      		ld r0,Z+
 503 0308 0D92      		st X+,r0
 504 030a 8A95      		dec r24
 505 030c 01F4      		brne 0b
 506               	.LVL29:
 381:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(MAC_Address_t);
 507               		.loc 1 381 0
 508 030e 06E0      		ldi r16,lo8(6)
 509 0310 10E0      		ldi r17,0
 510 0312 00C0      		rjmp .L33
 511               	.LVL30:
 512               	.L26:
 384:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 385:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 386:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_802_3_MAXIMUM_LIST_SIZE:
 387:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 388:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 389:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			/* Indicate only one multicast address supported */
 390:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(1);
 513               		.loc 1 390 0
 514 0314 41E0      		ldi r20,lo8(1)
 515 0316 50E0      		ldi r21,0
 516 0318 60E0      		ldi r22,0
 517 031a 70E0      		ldi r23,0
 518               	.LVL31:
 519 031c 00C0      		rjmp .L52
 520               	.LVL32:
 521               	.L20:
 391:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 392:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 393:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_CURRENT_PACKET_FILTER:
 394:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 395:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 396:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = cpu_to_le32(RNDISInterfaceInfo->State.CurrPacketFilter);
 522               		.loc 1 396 0
 523 031e FE01      		movw r30,r28
 524 0320 E956      		subi r30,105
 525 0322 FF4F      		sbci r31,-1
 526 0324 4081      		ld r20,Z
 527 0326 5181      		ldd r21,Z+1
 528 0328 6281      		ldd r22,Z+2
 529 032a 7381      		ldd r23,Z+3
 530               	.LVL33:
 531 032c 00C0      		rjmp .L52
 532               	.LVL34:
 533               	.L24:
 397:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 398:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 399:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_XMIT_OK:
 400:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_RCV_OK:
 401:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_XMIT_ERROR:
 402:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_RCV_ERROR:
 403:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_RCV_NO_BUFFER:
 404:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_802_3_RCV_ERROR_ALIGNMENT:
 405:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_802_3_XMIT_ONE_COLLISION:
 406:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_802_3_XMIT_MORE_COLLISIONS:
 407:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 408:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 409:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			/* Unused statistic OIDs - always return 0 for each */
 410:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(0);
 534               		.loc 1 410 0
 535 032e 1DA6      		std Y+45,__zero_reg__
 536 0330 1EA6      		std Y+46,__zero_reg__
 537 0332 1FA6      		std Y+47,__zero_reg__
 538 0334 18AA      		std Y+48,__zero_reg__
 539 0336 00C0      		rjmp .L51
 540               	.LVL35:
 541               	.L21:
 411:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 412:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 413:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_MAXIMUM_TOTAL_SIZE:
 414:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 415:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 416:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			/* Indicate maximum overall buffer (Ethernet frame and RNDIS header) the adapter can handle */
 417:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*((uint32_t*)ResponseData) = CPU_TO_LE32(RNDIS_MESSAGE_BUFFER_SIZE + ETHERNET_FRAME_SIZE_MAX);
 542               		.loc 1 417 0
 543 0338 4CE5      		ldi r20,lo8(92)
 544 033a 56E0      		ldi r21,lo8(6)
 545 033c 60E0      		ldi r22,0
 546 033e 70E0      		ldi r23,0
 547               	.LVL36:
 548               	.L52:
 549 0340 4DA7      		std Y+45,r20
 550 0342 5EA7      		std Y+46,r21
 551 0344 6FA7      		std Y+47,r22
 552 0346 78AB      		std Y+48,r23
 553               	.L51:
 414:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			*ResponseSize = sizeof(uint32_t);
 554               		.loc 1 414 0
 555 0348 04E0      		ldi r16,lo8(4)
 556 034a 10E0      		ldi r17,0
 557 034c 00C0      		rjmp .L33
 558               	.LVL37:
 559               	.L8:
 560               	.LBE72:
 561               	.LBE71:
 262:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 562               		.loc 1 262 0
 563 034e FE01      		movw r30,r28
 564 0350 EB56      		subi r30,107
 565 0352 FF4F      		sbci r31,-1
 566 0354 81E0      		ldi r24,lo8(1)
 567 0356 8083      		st Z,r24
 568               	.LVL38:
 266:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			uint32_t              SET_Oid               = le32_to_cpu(SET_Message->Oid);
 569               		.loc 1 266 0
 570 0358 49A1      		ldd r20,Y+33
 571 035a 5AA1      		ldd r21,Y+34
 572 035c 6BA1      		ldd r22,Y+35
 573 035e 7CA1      		ldd r23,Y+36
 574               	.LVL39:
 268:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			SET_Response->MessageType                   = CPU_TO_LE32(REMOTE_NDIS_SET_CMPLT);
 575               		.loc 1 268 0
 576 0360 05E0      		ldi r16,lo8(5)
 577 0362 10E0      		ldi r17,0
 578 0364 20E0      		ldi r18,0
 579 0366 30E8      		ldi r19,lo8(-128)
 580 0368 0D8B      		std Y+21,r16
 581 036a 1E8B      		std Y+22,r17
 582 036c 2F8B      		std Y+23,r18
 583 036e 388F      		std Y+24,r19
 269:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			SET_Response->MessageLength                 = CPU_TO_LE32(sizeof(RNDIS_Set_Complete_t));
 584               		.loc 1 269 0
 585 0370 00E1      		ldi r16,lo8(16)
 586 0372 10E0      		ldi r17,0
 587 0374 20E0      		ldi r18,0
 588 0376 30E0      		ldi r19,0
 589 0378 098F      		std Y+25,r16
 590 037a 1A8F      		std Y+26,r17
 591 037c 2B8F      		std Y+27,r18
 592 037e 3C8F      		std Y+28,r19
 273:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                              le32_to_cpu(SET_Message->Informati
 593               		.loc 1 273 0
 594 0380 09A5      		ldd r16,Y+41
 595 0382 1AA5      		ldd r17,Y+42
 596 0384 2BA5      		ldd r18,Y+43
 597 0386 3CA5      		ldd r19,Y+44
 598               	.LVL40:
 599               	.LBB73:
 600               	.LBB74:
 418:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 419:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 420:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		default:
 421:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return false;
 422:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 423:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 424:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 425:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** static bool RNDIS_Device_ProcessNDISSet(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 426:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                         const uint32_t OId,
 427:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                         const void* SetData,
 428:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                         const uint16_t SetSize)
 429:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 430:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	(void)SetSize;
 431:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 432:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	switch (OId)
 601               		.loc 1 432 0
 602 0388 4E30      		cpi r20,14
 603 038a F1E0      		ldi r31,1
 604 038c 5F07      		cpc r21,r31
 605 038e 6F07      		cpc r22,r31
 606 0390 7105      		cpc r23,__zero_reg__
 607 0392 01F0      		breq .L35
 608 0394 4330      		cpi r20,3
 609 0396 5140      		sbci r21,1
 610 0398 6140      		sbci r22,1
 611 039a 7140      		sbci r23,1
 612 039c 01F4      		brne .L50
 613 039e 00C0      		rjmp .L36
 614               	.L35:
 615               	.LBE74:
 616               	.LBE73:
 272:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			void* SetData = &RNDISInterfaceInfo->State.RNDISMessageBuffer[sizeof(RNDIS_Message_Header_t) +
 617               		.loc 1 272 0
 618 03a0 B901      		movw r22,r18
 619 03a2 A801      		movw r20,r16
 620               	.LVL41:
 621 03a4 485F      		subi r20,-8
 622 03a6 5F4F      		sbci r21,-1
 623 03a8 6F4F      		sbci r22,-1
 624 03aa 7F4F      		sbci r23,-1
 625               	.LBB76:
 626               	.LBB75:
 433:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 434:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_GEN_CURRENT_PACKET_FILTER:
 435:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.CurrPacketFilter = le32_to_cpu(*((uint32_t*)SetData));
 627               		.loc 1 435 0
 628 03ac FE01      		movw r30,r28
 629 03ae E40F      		add r30,r20
 630 03b0 F51F      		adc r31,r21
 631 03b2 4589      		ldd r20,Z+21
 632 03b4 5689      		ldd r21,Z+22
 633 03b6 6789      		ldd r22,Z+23
 634 03b8 708D      		ldd r23,Z+24
 635 03ba FE01      		movw r30,r28
 636 03bc E956      		subi r30,105
 637 03be FF4F      		sbci r31,-1
 638 03c0 4083      		st Z,r20
 639 03c2 5183      		std Z+1,r21
 640 03c4 6283      		std Z+2,r22
 641 03c6 7383      		std Z+3,r23
 436:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.CurrRNDISState   = le32_to_cpu((RNDISInterfaceInfo->State.CurrPacketFi
 642               		.loc 1 436 0
 643 03c8 FE01      		movw r30,r28
 644 03ca EA56      		subi r30,106
 645 03cc FF4F      		sbci r31,-1
 646 03ce 82E0      		ldi r24,lo8(2)
 647 03d0 8083      		st Z,r24
 648 03d2 00C0      		rjmp .L36
 649               	.LVL42:
 650               	.L50:
 277:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                   REMOTE_NDIS_STATUS_SUCCESS : REMOTE_NDIS_STAT
 651               		.loc 1 277 0
 652 03d4 4BEB      		ldi r20,lo8(-69)
 653 03d6 50E0      		ldi r21,0
 654 03d8 60E0      		ldi r22,0
 655 03da 70EC      		ldi r23,lo8(-64)
 656               	.LVL43:
 657               	.L34:
 658               	.LBE75:
 659               	.LBE76:
 275:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			SET_Response->Status = RNDIS_Device_ProcessNDISSet(RNDISInterfaceInfo, SET_Oid, SetData,
 660               		.loc 1 275 0
 661 03dc 49A3      		std Y+33,r20
 662 03de 5AA3      		std Y+34,r21
 663 03e0 6BA3      		std Y+35,r22
 664 03e2 7CA3      		std Y+36,r23
 665 03e4 00C0      		rjmp .L1
 666               	.LVL44:
 667               	.L9:
 280:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 668               		.loc 1 280 0
 669 03e6 FE01      		movw r30,r28
 670 03e8 EB56      		subi r30,107
 671 03ea FF4F      		sbci r31,-1
 672 03ec 81E0      		ldi r24,lo8(1)
 673 03ee 8083      		st Z,r24
 674               	.LVL45:
 284:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RESET_Response->MessageType                 = CPU_TO_LE32(REMOTE_NDIS_RESET_CMPLT);
 675               		.loc 1 284 0
 676 03f0 46E0      		ldi r20,lo8(6)
 677 03f2 50E0      		ldi r21,0
 678 03f4 60E0      		ldi r22,0
 679 03f6 70E8      		ldi r23,lo8(-128)
 680 03f8 4D8B      		std Y+21,r20
 681 03fa 5E8B      		std Y+22,r21
 682 03fc 6F8B      		std Y+23,r22
 683 03fe 788F      		std Y+24,r23
 285:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RESET_Response->MessageLength               = CPU_TO_LE32(sizeof(RNDIS_Reset_Complete_t));
 684               		.loc 1 285 0
 685 0400 40E1      		ldi r20,lo8(16)
 686 0402 50E0      		ldi r21,0
 687 0404 60E0      		ldi r22,0
 688 0406 70E0      		ldi r23,0
 689 0408 498F      		std Y+25,r20
 690 040a 5A8F      		std Y+26,r21
 691 040c 6B8F      		std Y+27,r22
 692 040e 7C8F      		std Y+28,r23
 286:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RESET_Response->Status                      = CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS);
 693               		.loc 1 286 0
 694 0410 1D8E      		std Y+29,__zero_reg__
 695 0412 1E8E      		std Y+30,__zero_reg__
 696 0414 1F8E      		std Y+31,__zero_reg__
 697 0416 18A2      		std Y+32,__zero_reg__
 698 0418 00C0      		rjmp .L53
 699               	.LVL46:
 700               	.L10:
 291:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			RNDISInterfaceInfo->State.ResponseReady     = true;
 701               		.loc 1 291 0
 702 041a FE01      		movw r30,r28
 703 041c EB56      		subi r30,107
 704 041e FF4F      		sbci r31,-1
 705 0420 81E0      		ldi r24,lo8(1)
 706 0422 8083      		st Z,r24
 707               	.LVL47:
 298:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			KEEPALIVE_Response->MessageType             = CPU_TO_LE32(REMOTE_NDIS_KEEPALIVE_CMPLT);
 708               		.loc 1 298 0
 709 0424 48E0      		ldi r20,lo8(8)
 710 0426 50E0      		ldi r21,0
 711 0428 60E0      		ldi r22,0
 712 042a 70E8      		ldi r23,lo8(-128)
 713 042c 4D8B      		std Y+21,r20
 714 042e 5E8B      		std Y+22,r21
 715 0430 6F8B      		std Y+23,r22
 716 0432 788F      		std Y+24,r23
 299:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			KEEPALIVE_Response->MessageLength           = CPU_TO_LE32(sizeof(RNDIS_KeepAlive_Complete_t));
 717               		.loc 1 299 0
 718 0434 40E1      		ldi r20,lo8(16)
 719 0436 50E0      		ldi r21,0
 720 0438 60E0      		ldi r22,0
 721 043a 70E0      		ldi r23,0
 722 043c 498F      		std Y+25,r20
 723 043e 5A8F      		std Y+26,r21
 724 0440 6B8F      		std Y+27,r22
 725 0442 7C8F      		std Y+28,r23
 726               	.LVL48:
 727               	.L53:
 301:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			KEEPALIVE_Response->Status                  = CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS);
 728               		.loc 1 301 0
 729 0444 19A2      		std Y+33,__zero_reg__
 730 0446 1AA2      		std Y+34,__zero_reg__
 731 0448 1BA2      		std Y+35,__zero_reg__
 732 044a 1CA2      		std Y+36,__zero_reg__
 733 044c 00C0      		rjmp .L1
 734               	.LVL49:
 735               	.L4:
 736               	.LBE70:
 737               	.LBE69:
 738               	.LBE68:
  93:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)
 739               		.loc 1 93 0
 740 044e 8091 0000 		lds r24,USB_ControlRequest
 741 0452 813A      		cpi r24,lo8(-95)
 742 0454 01F0      		breq .+2
 743 0456 00C0      		rjmp .L1
 744               	.LVL50:
 745               	.LBB79:
  97:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				if (!(MessageHeader->MessageLength))
 746               		.loc 1 97 0
 747 0458 498D      		ldd r20,Y+25
 748 045a 5A8D      		ldd r21,Y+26
 749 045c 6B8D      		ldd r22,Y+27
 750 045e 7C8D      		ldd r23,Y+28
 751 0460 452B      		or r20,r21
 752 0462 462B      		or r20,r22
 753 0464 472B      		or r20,r23
 754 0466 01F4      		brne .L37
  99:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 					RNDISInterfaceInfo->State.RNDISMessageBuffer[0] = 0;
 755               		.loc 1 99 0
 756 0468 1D8A      		std Y+21,__zero_reg__
 100:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 					MessageHeader->MessageLength                    = CPU_TO_LE32(1);
 757               		.loc 1 100 0
 758 046a 41E0      		ldi r20,lo8(1)
 759 046c 50E0      		ldi r21,0
 760 046e 60E0      		ldi r22,0
 761 0470 70E0      		ldi r23,0
 762 0472 498F      		std Y+25,r20
 763 0474 5A8F      		std Y+26,r21
 764 0476 6B8F      		std Y+27,r22
 765 0478 7C8F      		std Y+28,r23
 766               	.L37:
 767               	.LBB80:
 768               	.LBB81:
 504:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UEINTX &= ~(1 << RXSTPI);
 769               		.loc 2 504 0
 770 047a 8091 E800 		lds r24,232
 771 047e 877F      		andi r24,lo8(-9)
 772 0480 8093 E800 		sts 232,r24
 773               	.LBE81:
 774               	.LBE80:
 104:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				Endpoint_Write_Control_Stream_LE(RNDISInterfaceInfo->State.RNDISMessageBuffer, le32_to_cpu(Mess
 775               		.loc 1 104 0
 776 0484 698D      		ldd r22,Y+25
 777 0486 7A8D      		ldd r23,Y+26
 778 0488 CE01      		movw r24,r28
 779 048a 4596      		adiw r24,21
 780 048c 0E94 0000 		call Endpoint_Write_Control_Stream_LE
 781               	.LVL51:
 782               	.LBB82:
 783               	.LBB83:
 517:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 518:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << TXINI);
 519:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 520:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 521:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 522:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Acknowledges an OUT packet to the host on the currently selected endpoint, freeing up the en
 523:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  for the next packet and switching to the alternative endpoint bank if double banked.
 524:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 525:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 526:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 527:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
 528:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_ClearOUT(void)
 529:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 530:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#if !defined(CONTROL_ONLY_DEVICE)
 531:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 784               		.loc 2 531 0
 785 0490 8091 E800 		lds r24,232
 786 0494 8B77      		andi r24,lo8(123)
 787 0496 8093 E800 		sts 232,r24
 788               	.LBE83:
 789               	.LBE82:
 107:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				MessageHeader->MessageLength = CPU_TO_LE32(0);
 790               		.loc 1 107 0
 791 049a 198E      		std Y+25,__zero_reg__
 792 049c 1A8E      		std Y+26,__zero_reg__
 793 049e 1B8E      		std Y+27,__zero_reg__
 794 04a0 1C8E      		std Y+28,__zero_reg__
 795 04a2 00C0      		rjmp .L1
 796               	.LVL52:
 797               	.L33:
 798               	.LBE79:
 799               	.LBB84:
 800               	.LBB78:
 801               	.LBB77:
 245:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->Status                  = CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS);
 802               		.loc 1 245 0
 803 04a4 19A2      		std Y+33,__zero_reg__
 804 04a6 1AA2      		std Y+34,__zero_reg__
 805 04a8 1BA2      		std Y+35,__zero_reg__
 806 04aa 1CA2      		std Y+36,__zero_reg__
 246:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->MessageLength           = cpu_to_le32(sizeof(RNDIS_Query_Complete_t) + Response
 807               		.loc 1 246 0
 808 04ac C801      		movw r24,r16
 809 04ae 4896      		adiw r24,24
 810 04b0 A0E0      		ldi r26,0
 811 04b2 B0E0      		ldi r27,0
 812 04b4 898F      		std Y+25,r24
 813 04b6 9A8F      		std Y+26,r25
 814 04b8 AB8F      		std Y+27,r26
 815 04ba BC8F      		std Y+28,r27
 248:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferLength = CPU_TO_LE32(ResponseSize);
 816               		.loc 1 248 0
 817 04bc A801      		movw r20,r16
 818 04be 60E0      		ldi r22,0
 819 04c0 70E0      		ldi r23,0
 820 04c2 4DA3      		std Y+37,r20
 821 04c4 5EA3      		std Y+38,r21
 822 04c6 6FA3      		std Y+39,r22
 823 04c8 78A7      		std Y+40,r23
 249:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Query_Complete_t) - sizeof(R
 824               		.loc 1 249 0
 825 04ca 40E1      		ldi r20,lo8(16)
 826 04cc 50E0      		ldi r21,0
 827 04ce 60E0      		ldi r22,0
 828 04d0 70E0      		ldi r23,0
 829 04d2 49A7      		std Y+41,r20
 830 04d4 5AA7      		std Y+42,r21
 831 04d6 6BA7      		std Y+43,r22
 832 04d8 7CA7      		std Y+44,r23
 833 04da 00C0      		rjmp .L1
 834               	.LVL53:
 835               	.L12:
 253:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->Status                  = CPU_TO_LE32(REMOTE_NDIS_STATUS_NOT_SUPPORTED);
 836               		.loc 1 253 0
 837 04dc 4BEB      		ldi r20,lo8(-69)
 838 04de 50E0      		ldi r21,0
 839 04e0 60E0      		ldi r22,0
 840 04e2 70EC      		ldi r23,lo8(-64)
 841 04e4 49A3      		std Y+33,r20
 842 04e6 5AA3      		std Y+34,r21
 843 04e8 6BA3      		std Y+35,r22
 844 04ea 7CA3      		std Y+36,r23
 254:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->MessageLength           = CPU_TO_LE32(sizeof(RNDIS_Query_Complete_t));
 845               		.loc 1 254 0
 846 04ec 48E1      		ldi r20,lo8(24)
 847 04ee 50E0      		ldi r21,0
 848 04f0 60E0      		ldi r22,0
 849 04f2 70E0      		ldi r23,0
 850 04f4 498F      		std Y+25,r20
 851 04f6 5A8F      		std Y+26,r21
 852 04f8 6B8F      		std Y+27,r22
 853 04fa 7C8F      		std Y+28,r23
 256:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferLength = CPU_TO_LE32(0);
 854               		.loc 1 256 0
 855 04fc 1DA2      		std Y+37,__zero_reg__
 856 04fe 1EA2      		std Y+38,__zero_reg__
 857 0500 1FA2      		std Y+39,__zero_reg__
 858 0502 18A6      		std Y+40,__zero_reg__
 257:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 				QUERY_Response->InformationBufferOffset = CPU_TO_LE32(0);
 859               		.loc 1 257 0
 860 0504 19A6      		std Y+41,__zero_reg__
 861 0506 1AA6      		std Y+42,__zero_reg__
 862 0508 1BA6      		std Y+43,__zero_reg__
 863 050a 1CA6      		std Y+44,__zero_reg__
 864 050c 00C0      		rjmp .L1
 865               	.LVL54:
 866               	.L36:
 867               	.LBE77:
 868               	.LBE78:
 869               	.LBE84:
 277:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                   REMOTE_NDIS_STATUS_SUCCESS : REMOTE_NDIS_STAT
 870               		.loc 1 277 0
 871 050e 40E0      		ldi r20,0
 872 0510 50E0      		ldi r21,0
 873 0512 BA01      		movw r22,r20
 874 0514 00C0      		rjmp .L34
 875               	.LVL55:
 876               	.L1:
 877               	/* epilogue start */
 112:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 878               		.loc 1 112 0
 879 0516 DF91      		pop r29
 880 0518 CF91      		pop r28
 881 051a 1F91      		pop r17
 882 051c 0F91      		pop r16
 883 051e 0895      		ret
 884               	.LFE99:
 886               		.section	.text.RNDIS_Device_ConfigureEndpoints,"ax",@progbits
 887               	.global	RNDIS_Device_ConfigureEndpoints
 889               	RNDIS_Device_ConfigureEndpoints:
 890               	.LFB100:
 115:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 891               		.loc 1 115 0
 892               	.LVL56:
 893 0000 1F93      		push r17
 894               	.LCFI4:
 895 0002 CF93      		push r28
 896               	.LCFI5:
 897 0004 DF93      		push r29
 898               	.LCFI6:
 899               	/* prologue: function */
 900               	/* frame size = 0 */
 901               	/* stack size = 3 */
 902               	.L__stack_usage = 3
 903 0006 EC01      		movw r28,r24
 116:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
 904               		.loc 1 116 0
 905 0008 4596      		adiw r24,21
 906               	.LVL57:
 907 000a FC01      		movw r30,r24
 908 000c 86E8      		ldi r24,lo8(-122)
 909 000e DF01      		movw r26,r30
 910               		0:
 911 0010 1D92      		st X+,__zero_reg__
 912 0012 8A95      		dec r24
 913 0014 01F4      		brne 0b
 914               	.LVL58:
 118:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 915               		.loc 1 118 0
 916 0016 11E0      		ldi r17,lo8(1)
 917               	.LVL59:
 918               	.L59:
 919               	.LBB85:
 920               	.LBB86:
 125:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		if (EndpointNum == RNDISInterfaceInfo->Config.DataINEndpointNumber)
 921               		.loc 1 125 0
 922 0018 8981      		ldd r24,Y+1
 923 001a 1813      		cpse r17,r24
 924 001c 00C0      		rjmp .L55
 127:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Size         = RNDISInterfaceInfo->Config.DataINEndpointSize;
 925               		.loc 1 127 0
 926 001e 2A81      		ldd r18,Y+2
 927 0020 3B81      		ldd r19,Y+3
 928               	.LVL60:
 130:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			DoubleBanked = RNDISInterfaceInfo->Config.DataINEndpointDoubleBank;
 929               		.loc 1 130 0
 930 0022 4C81      		ldd r20,Y+4
 931               	.LVL61:
 128:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Direction    = ENDPOINT_DIR_IN;
 932               		.loc 1 128 0
 933 0024 80E8      		ldi r24,lo8(-128)
 934 0026 00C0      		rjmp .L68
 935               	.LVL62:
 936               	.L55:
 132:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		else if (EndpointNum == RNDISInterfaceInfo->Config.DataOUTEndpointNumber)
 937               		.loc 1 132 0
 938 0028 8D81      		ldd r24,Y+5
 939 002a 1813      		cpse r17,r24
 940 002c 00C0      		rjmp .L57
 134:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Size         = RNDISInterfaceInfo->Config.DataOUTEndpointSize;
 941               		.loc 1 134 0
 942 002e 2E81      		ldd r18,Y+6
 943 0030 3F81      		ldd r19,Y+7
 944               	.LVL63:
 137:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			DoubleBanked = RNDISInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 945               		.loc 1 137 0
 946 0032 4885      		ldd r20,Y+8
 947               	.LVL64:
 135:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Direction    = ENDPOINT_DIR_OUT;
 948               		.loc 1 135 0
 949 0034 80E0      		ldi r24,0
 950               	.LVL65:
 951               	.L68:
 136:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Type         = EP_TYPE_BULK;
 952               		.loc 1 136 0
 953 0036 92E0      		ldi r25,lo8(2)
 954 0038 00C0      		rjmp .L56
 955               	.LVL66:
 956               	.L57:
 139:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		else if (EndpointNum == RNDISInterfaceInfo->Config.NotificationEndpointNumber)
 957               		.loc 1 139 0
 958 003a 8985      		ldd r24,Y+9
 959 003c 1817      		cp r17,r24
 960 003e 01F0      		breq .L58
 961               	.L65:
 962               	.LBE86:
 118:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 963               		.loc 1 118 0
 964 0040 1F5F      		subi r17,lo8(-(1))
 965               	.LVL67:
 966 0042 1730      		cpi r17,lo8(7)
 967 0044 01F4      		brne .L59
 158:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	return true;
 968               		.loc 1 158 0
 969 0046 81E0      		ldi r24,lo8(1)
 970 0048 00C0      		rjmp .L60
 971               	.LVL68:
 972               	.L58:
 973               	.LBB93:
 141:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Size         = RNDISInterfaceInfo->Config.NotificationEndpointSize;
 974               		.loc 1 141 0
 975 004a 2A85      		ldd r18,Y+10
 976 004c 3B85      		ldd r19,Y+11
 977               	.LVL69:
 144:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			DoubleBanked = RNDISInterfaceInfo->Config.NotificationEndpointDoubleBank;
 978               		.loc 1 144 0
 979 004e 4C85      		ldd r20,Y+12
 980               	.LVL70:
 142:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Direction    = ENDPOINT_DIR_IN;
 981               		.loc 1 142 0
 982 0050 80E8      		ldi r24,lo8(-128)
 143:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			Type         = EP_TYPE_INTERRUPT;
 983               		.loc 1 143 0
 984 0052 93E0      		ldi r25,lo8(3)
 985               	.LVL71:
 986               	.L56:
 151:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 987               		.loc 1 151 0
 988 0054 4423      		tst r20
 989 0056 01F0      		breq .L66
 990 0058 44E0      		ldi r20,lo8(4)
 991               	.LVL72:
 992 005a 00C0      		rjmp .L61
 993               	.LVL73:
 994               	.L66:
 995 005c 40E0      		ldi r20,0
 996               	.LVL74:
 997               	.L61:
 127:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint16_t CheckBytes = 8;
 998               		.loc 2 127 0 discriminator 3
 999 005e E8E0      		ldi r30,lo8(8)
 1000 0060 F0E0      		ldi r31,0
 126:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				uint8_t  MaskVal    = 0;
 1001               		.loc 2 126 0 discriminator 3
 1002 0062 50E0      		ldi r21,0
 1003 0064 00C0      		rjmp .L62
 1004               	.LVL75:
 1005               	.L63:
 1006               	.LBB87:
 1007               	.LBB88:
 1008               	.LBB89:
 1009               	.LBB90:
 131:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					MaskVal++;
 1010               		.loc 2 131 0
 1011 0066 5F5F      		subi r21,lo8(-(1))
 1012               	.LVL76:
 132:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					CheckBytes <<= 1;
 1013               		.loc 2 132 0
 1014 0068 EE0F      		lsl r30
 1015 006a FF1F      		rol r31
 1016               	.LVL77:
 1017               	.L62:
 129:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				while (CheckBytes < Bytes)
 1018               		.loc 2 129 0
 1019 006c E217      		cp r30,r18
 1020 006e F307      		cpc r31,r19
 1021 0070 00F0      		brlo .L63
 1022               	.LBE90:
 1023               	.LBE89:
 276:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 1024               		.loc 2 276 0
 1025 0072 4260      		ori r20,lo8(2)
 1026               	.LVL78:
 1027               	.LBB92:
 1028               	.LBB91:
 135:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return (MaskVal << EPSIZE0);
 1029               		.loc 2 135 0
 1030 0074 5295      		swap r21
 1031               	.LVL79:
 1032 0076 507F      		andi r21,lo8(-16)
 1033               	.LBE91:
 1034               	.LBE92:
 276:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 
 1035               		.loc 2 276 0
 1036 0078 452B      		or r20,r21
 1037 007a B0E4      		ldi r27,lo8(64)
 1038 007c 9B9F      		mul r25,r27
 1039 007e 9001      		movw r18,r0
 1040 0080 1124      		clr __zero_reg__
 1041               	.LVL80:
 1042 0082 61E0      		ldi r22,lo8(1)
 1043 0084 8111      		cpse r24,__zero_reg__
 1044 0086 00C0      		rjmp .L64
 1045 0088 60E0      		ldi r22,0
 1046               	.L64:
 1047 008a 622B      		or r22,r18
 1048 008c 812F      		mov r24,r17
 1049               	.LVL81:
 1050 008e 0E94 0000 		call Endpoint_ConfigureEndpoint_Prv
 1051               	.LVL82:
 1052               	.LBE88:
 1053               	.LBE87:
 151:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 1054               		.loc 1 151 0
 1055 0092 8111      		cpse r24,__zero_reg__
 1056 0094 00C0      		rjmp .L65
 1057               	.LVL83:
 1058               	.L60:
 1059               	/* epilogue start */
 1060               	.LBE93:
 1061               	.LBE85:
 159:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 1062               		.loc 1 159 0
 1063 0096 DF91      		pop r29
 1064 0098 CF91      		pop r28
 1065               	.LVL84:
 1066 009a 1F91      		pop r17
 1067 009c 0895      		ret
 1068               	.LFE100:
 1070               		.section	.rodata
 1071               	.LC0:
 1072 0000 A1        		.byte	-95
 1073 0001 01        		.byte	1
 1074 0002 0000      		.word	0
 1075 0004 0000      		.word	0
 1076 0006 0000      		.word	0
 1077               		.section	.text.RNDIS_Device_USBTask,"ax",@progbits
 1078               	.global	RNDIS_Device_USBTask
 1080               	RNDIS_Device_USBTask:
 1081               	.LFB101:
 162:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 1082               		.loc 1 162 0
 1083               	.LVL85:
 1084 0000 0F93      		push r16
 1085               	.LCFI7:
 1086 0002 1F93      		push r17
 1087               	.LCFI8:
 1088 0004 CF93      		push r28
 1089               	.LCFI9:
 1090 0006 DF93      		push r29
 1091               	.LCFI10:
 1092 0008 CDB7      		in r28,__SP_L__
 1093 000a DEB7      		in r29,__SP_H__
 1094               	.LCFI11:
 1095 000c 2897      		sbiw r28,8
 1096               	.LCFI12:
 1097 000e 0FB6      		in __tmp_reg__,__SREG__
 1098 0010 F894      		cli
 1099 0012 DEBF      		out __SP_H__,r29
 1100 0014 0FBE      		out __SREG__,__tmp_reg__
 1101 0016 CDBF      		out __SP_L__,r28
 1102               	/* prologue: function */
 1103               	/* frame size = 8 */
 1104               	/* stack size = 12 */
 1105               	.L__stack_usage = 12
 163:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (USB_DeviceState != DEVICE_STATE_Configured)
 1106               		.loc 1 163 0
 1107 0018 2091 0000 		lds r18,USB_DeviceState
 1108 001c 2430      		cpi r18,lo8(4)
 1109 001e 01F4      		brne .L69
 166:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.NotificationEndpointNumber);
 1110               		.loc 1 166 0
 1111 0020 FC01      		movw r30,r24
 1112 0022 2185      		ldd r18,Z+9
 1113               	.LVL86:
 1114               	.LBB94:
 1115               	.LBB95:
 330:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1116               		.loc 2 330 0
 1117 0024 2093 E900 		sts 233,r18
 1118               	.LBE95:
 1119               	.LBE94:
 1120               	.LBB96:
 1121               	.LBB97:
 467:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << TXINI)) ? true : false);
 1122               		.loc 2 467 0
 1123 0028 2091 E800 		lds r18,232
 1124               	.LVL87:
 1125               	.LBE97:
 1126               	.LBE96:
 168:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (Endpoint_IsINReady() && RNDISInterfaceInfo->State.ResponseReady)
 1127               		.loc 1 168 0
 1128 002c 20FF      		sbrs r18,0
 1129 002e 00C0      		rjmp .L69
 168:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (Endpoint_IsINReady() && RNDISInterfaceInfo->State.ResponseReady)
 1130               		.loc 1 168 0 is_stmt 0 discriminator 1
 1131 0030 8C01      		movw r16,r24
 1132 0032 0B56      		subi r16,107
 1133 0034 1F4F      		sbci r17,-1
 1134 0036 F801      		movw r30,r16
 1135 0038 8081      		ld r24,Z
 1136               	.LVL88:
 1137 003a 8823      		tst r24
 1138 003c 01F0      		breq .L69
 1139               	.LBB98:
 170:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		USB_Request_Header_t Notification = (USB_Request_Header_t)
 1140               		.loc 1 170 0 is_stmt 1
 1141 003e 88E0      		ldi r24,lo8(8)
 1142 0040 E0E0      		ldi r30,lo8(.LC0)
 1143 0042 F0E0      		ldi r31,hi8(.LC0)
 1144 0044 DE01      		movw r26,r28
 1145 0046 1196      		adiw r26,1
 1146               		0:
 1147 0048 0190      		ld r0,Z+
 1148 004a 0D92      		st X+,r0
 1149 004c 8A95      		dec r24
 1150 004e 01F4      		brne 0b
 179:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		Endpoint_Write_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
 1151               		.loc 1 179 0
 1152 0050 40E0      		ldi r20,0
 1153 0052 50E0      		ldi r21,0
 1154 0054 68E0      		ldi r22,lo8(8)
 1155 0056 70E0      		ldi r23,0
 1156 0058 CE01      		movw r24,r28
 1157 005a 0196      		adiw r24,1
 1158 005c 0E94 0000 		call Endpoint_Write_Stream_LE
 1159               	.LVL89:
 1160               	.LBB99:
 1161               	.LBB100:
 516:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1162               		.loc 2 516 0
 1163 0060 8091 E800 		lds r24,232
 1164 0064 8E77      		andi r24,lo8(126)
 1165 0066 8093 E800 		sts 232,r24
 1166               	.LBE100:
 1167               	.LBE99:
 183:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		RNDISInterfaceInfo->State.ResponseReady = false;
 1168               		.loc 1 183 0
 1169 006a F801      		movw r30,r16
 1170 006c 1082      		st Z,__zero_reg__
 1171               	.LVL90:
 1172               	.L69:
 1173               	/* epilogue start */
 1174               	.LBE98:
 185:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 1175               		.loc 1 185 0
 1176 006e 2896      		adiw r28,8
 1177 0070 0FB6      		in __tmp_reg__,__SREG__
 1178 0072 F894      		cli
 1179 0074 DEBF      		out __SP_H__,r29
 1180 0076 0FBE      		out __SREG__,__tmp_reg__
 1181 0078 CDBF      		out __SP_L__,r28
 1182 007a DF91      		pop r29
 1183 007c CF91      		pop r28
 1184 007e 1F91      		pop r17
 1185 0080 0F91      		pop r16
 1186 0082 0895      		ret
 1187               	.LFE101:
 1189               		.section	.text.RNDIS_Device_IsPacketReceived,"ax",@progbits
 1190               	.global	RNDIS_Device_IsPacketReceived
 1192               	RNDIS_Device_IsPacketReceived:
 1193               	.LFB105:
 437:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			                                                         RNDIS_Data_Initialized : RNDIS_Data_Ini
 438:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 439:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 440:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		case OID_802_3_MULTICAST_LIST:
 441:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			/* Do nothing - throw away the value from the host as it is unused */
 442:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 443:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return true;
 444:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		default:
 445:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 			return false;
 446:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 447:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 448:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 449:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** bool RNDIS_Device_IsPacketReceived(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo)
 450:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 1194               		.loc 1 450 0
 1195               	.LVL91:
 1196               	/* prologue: function */
 1197               	/* frame size = 0 */
 1198               	/* stack size = 0 */
 1199               	.L__stack_usage = 0
 451:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if ((USB_DeviceState != DEVICE_STATE_Configured) ||
 1200               		.loc 1 451 0
 1201 0000 2091 0000 		lds r18,USB_DeviceState
 1202 0004 2430      		cpi r18,lo8(4)
 1203 0006 01F4      		brne .L82
 452:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	    (RNDISInterfaceInfo->State.CurrRNDISState != RNDIS_Data_Initialized))
 1204               		.loc 1 452 0 discriminator 1
 1205 0008 FC01      		movw r30,r24
 1206 000a EA56      		subi r30,106
 1207 000c FF4F      		sbci r31,-1
 451:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if ((USB_DeviceState != DEVICE_STATE_Configured) ||
 1208               		.loc 1 451 0 discriminator 1
 1209 000e 2081      		ld r18,Z
 1210 0010 2230      		cpi r18,lo8(2)
 1211 0012 01F4      		brne .L82
 453:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 454:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return false;
 455:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 456:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 457:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.DataOUTEndpointNumber);
 1212               		.loc 1 457 0
 1213 0014 FC01      		movw r30,r24
 1214 0016 8581      		ldd r24,Z+5
 1215               	.LVL92:
 1216               	.LBB101:
 1217               	.LBB102:
 330:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1218               		.loc 2 330 0
 1219 0018 8093 E900 		sts 233,r24
 1220               	.LBE102:
 1221               	.LBE101:
 1222               	.LBB103:
 1223               	.LBB104:
 479:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1224               		.loc 2 479 0
 1225 001c 8091 E800 		lds r24,232
 1226               	.LVL93:
 1227 0020 82FB      		bst r24,2
 1228 0022 8827      		clr r24
 1229 0024 80F9      		bld r24,0
 1230               	.LBE104:
 1231               	.LBE103:
 458:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	return Endpoint_IsOUTReceived();
 1232               		.loc 1 458 0
 1233 0026 0895      		ret
 1234               	.LVL94:
 1235               	.L82:
 454:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return false;
 1236               		.loc 1 454 0
 1237 0028 80E0      		ldi r24,0
 1238               	.LVL95:
 459:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 1239               		.loc 1 459 0
 1240 002a 0895      		ret
 1241               	.LFE105:
 1243               		.section	.text.RNDIS_Device_ReadPacket,"ax",@progbits
 1244               	.global	RNDIS_Device_ReadPacket
 1246               	RNDIS_Device_ReadPacket:
 1247               	.LFB106:
 460:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 461:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** uint8_t RNDIS_Device_ReadPacket(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 462:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                 void* Buffer,
 463:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                 uint16_t* const PacketLength)
 464:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 1248               		.loc 1 464 0
 1249               	.LVL96:
 1250 0000 EF92      		push r14
 1251               	.LCFI13:
 1252 0002 FF92      		push r15
 1253               	.LCFI14:
 1254 0004 0F93      		push r16
 1255               	.LCFI15:
 1256 0006 1F93      		push r17
 1257               	.LCFI16:
 1258 0008 CF93      		push r28
 1259               	.LCFI17:
 1260 000a DF93      		push r29
 1261               	.LCFI18:
 1262 000c CDB7      		in r28,__SP_L__
 1263 000e DEB7      		in r29,__SP_H__
 1264               	.LCFI19:
 1265 0010 AC97      		sbiw r28,44
 1266               	.LCFI20:
 1267 0012 0FB6      		in __tmp_reg__,__SREG__
 1268 0014 F894      		cli
 1269 0016 DEBF      		out __SP_H__,r29
 1270 0018 0FBE      		out __SREG__,__tmp_reg__
 1271 001a CDBF      		out __SP_L__,r28
 1272               	/* prologue: function */
 1273               	/* frame size = 44 */
 1274               	/* stack size = 50 */
 1275               	.L__stack_usage = 50
 1276 001c FC01      		movw r30,r24
 1277 001e 7B01      		movw r14,r22
 1278 0020 8A01      		movw r16,r20
 465:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if ((USB_DeviceState != DEVICE_STATE_Configured) ||
 1279               		.loc 1 465 0
 1280 0022 8091 0000 		lds r24,USB_DeviceState
 1281               	.LVL97:
 1282 0026 8430      		cpi r24,lo8(4)
 1283 0028 01F4      		brne .L87
 466:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	    (RNDISInterfaceInfo->State.CurrRNDISState != RNDIS_Data_Initialized))
 1284               		.loc 1 466 0 discriminator 1
 1285 002a DF01      		movw r26,r30
 1286 002c AA56      		subi r26,106
 1287 002e BF4F      		sbci r27,-1
 465:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if ((USB_DeviceState != DEVICE_STATE_Configured) ||
 1288               		.loc 1 465 0 discriminator 1
 1289 0030 8C91      		ld r24,X
 1290 0032 8230      		cpi r24,lo8(2)
 1291 0034 01F4      		brne .L87
 467:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 468:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return ENDPOINT_RWSTREAM_DeviceDisconnected;
 469:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 470:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 471:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.DataOUTEndpointNumber);
 1292               		.loc 1 471 0
 1293 0036 8581      		ldd r24,Z+5
 1294               	.LVL98:
 1295               	.LBB105:
 1296               	.LBB106:
 330:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1297               		.loc 2 330 0
 1298 0038 8093 E900 		sts 233,r24
 1299               	.LBE106:
 1300               	.LBE105:
 472:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 473:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	*PacketLength = 0;
 1301               		.loc 1 473 0
 1302 003c FA01      		movw r30,r20
 1303               	.LVL99:
 1304 003e 1182      		std Z+1,__zero_reg__
 1305 0040 1082      		st Z,__zero_reg__
 1306               	.LBB107:
 1307               	.LBB108:
 479:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 1308               		.loc 2 479 0
 1309 0042 8091 E800 		lds r24,232
 1310               	.LVL100:
 1311               	.LBE108:
 1312               	.LBE107:
 474:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 475:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (!(Endpoint_IsOUTReceived()))
 1313               		.loc 1 475 0
 1314 0046 82FF      		sbrs r24,2
 1315 0048 00C0      		rjmp .L88
 476:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return ENDPOINT_RWSTREAM_NoError;
 477:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 478:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	RNDIS_Packet_Message_t RNDISPacketHeader;
 479:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_Read_Stream_LE(&RNDISPacketHeader, sizeof(RNDIS_Packet_Message_t), NULL);
 1316               		.loc 1 479 0
 1317 004a 40E0      		ldi r20,0
 1318 004c 50E0      		ldi r21,0
 1319               	.LVL101:
 1320 004e 6CE2      		ldi r22,lo8(44)
 1321 0050 70E0      		ldi r23,0
 1322               	.LVL102:
 1323 0052 CE01      		movw r24,r28
 1324 0054 0196      		adiw r24,1
 1325 0056 0E94 0000 		call Endpoint_Read_Stream_LE
 1326               	.LVL103:
 480:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 481:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if (le32_to_cpu(RNDISPacketHeader.DataLength) > ETHERNET_FRAME_SIZE_MAX)
 1327               		.loc 1 481 0
 1328 005a 6D85      		ldd r22,Y+13
 1329 005c 7E85      		ldd r23,Y+14
 1330 005e 8F85      		ldd r24,Y+15
 1331 0060 9889      		ldd r25,Y+16
 1332 0062 6D3D      		cpi r22,-35
 1333 0064 F5E0      		ldi r31,5
 1334 0066 7F07      		cpc r23,r31
 1335 0068 8105      		cpc r24,__zero_reg__
 1336 006a 9105      		cpc r25,__zero_reg__
 1337 006c 00F0      		brlo .L85
 1338               	.LBB109:
 1339               	.LBB110:
 532:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#else
 533:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~(1 << RXOUTI);
 534:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				#endif
 535:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			}
 536:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 
 537:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			/** Stalls the current endpoint, indicating to the host that a logical problem occurred with the
 538:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  indicated endpoint and that the current transfer sequence should be aborted. This provides a
 539:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  way for devices to indicate invalid commands to the host so that the current transfer can be
 540:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  aborted and the host can begin its own recovery sequence.
 541:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 542:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  The currently selected endpoint remains stalled until either the \ref Endpoint_ClearStall() 
 543:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  is called, or the host issues a CLEAR FEATURE request to the device for the currently select
 544:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  endpoint.
 545:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *
 546:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 *  \ingroup Group_EndpointPacketManagement_AVR8
 547:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			 */
 548:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
 549:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			static inline void Endpoint_StallTransaction(void)
 550:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 			{
 551:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 				UECONX |= (1 << STALLRQ);
 1340               		.loc 2 551 0
 1341 006e 8091 EB00 		lds r24,235
 1342 0072 8062      		ori r24,lo8(32)
 1343 0074 8093 EB00 		sts 235,r24
 482:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 483:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		Endpoint_StallTransaction();
 484:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 485:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return RNDIS_ERROR_LOGICAL_CMD_FAILED;
 1344               		.loc 1 485 0
 1345 0078 80E8      		ldi r24,lo8(-128)
 1346 007a 00C0      		rjmp .L84
 1347               	.L85:
 1348               	.LBE110:
 1349               	.LBE109:
 486:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 487:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 488:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	*PacketLength = (uint16_t)le32_to_cpu(RNDISPacketHeader.DataLength);
 1350               		.loc 1 488 0
 1351 007c F801      		movw r30,r16
 1352 007e 7183      		std Z+1,r23
 1353 0080 6083      		st Z,r22
 489:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 490:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_Read_Stream_LE(Buffer, *PacketLength, NULL);
 1354               		.loc 1 490 0
 1355 0082 40E0      		ldi r20,0
 1356 0084 50E0      		ldi r21,0
 1357 0086 C701      		movw r24,r14
 1358 0088 0E94 0000 		call Endpoint_Read_Stream_LE
 1359               	.LVL104:
 1360               	.LBB111:
 1361               	.LBB112:
 531:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 1362               		.loc 2 531 0
 1363 008c 8091 E800 		lds r24,232
 1364 0090 8B77      		andi r24,lo8(123)
 1365 0092 8093 E800 		sts 232,r24
 1366 0096 00C0      		rjmp .L88
 1367               	.LVL105:
 1368               	.L87:
 1369               	.LBE112:
 1370               	.LBE111:
 468:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return ENDPOINT_RWSTREAM_DeviceDisconnected;
 1371               		.loc 1 468 0
 1372 0098 82E0      		ldi r24,lo8(2)
 1373 009a 00C0      		rjmp .L84
 1374               	.LVL106:
 1375               	.L88:
 476:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return ENDPOINT_RWSTREAM_NoError;
 1376               		.loc 1 476 0
 1377 009c 80E0      		ldi r24,0
 1378               	.L84:
 1379               	/* epilogue start */
 491:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_ClearOUT();
 492:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 493:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	return ENDPOINT_RWSTREAM_NoError;
 494:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 1380               		.loc 1 494 0
 1381 009e AC96      		adiw r28,44
 1382 00a0 0FB6      		in __tmp_reg__,__SREG__
 1383 00a2 F894      		cli
 1384 00a4 DEBF      		out __SP_H__,r29
 1385 00a6 0FBE      		out __SREG__,__tmp_reg__
 1386 00a8 CDBF      		out __SP_L__,r28
 1387 00aa DF91      		pop r29
 1388 00ac CF91      		pop r28
 1389 00ae 1F91      		pop r17
 1390 00b0 0F91      		pop r16
 1391               	.LVL107:
 1392 00b2 FF90      		pop r15
 1393 00b4 EF90      		pop r14
 1394               	.LVL108:
 1395 00b6 0895      		ret
 1396               	.LFE106:
 1398               		.section	.text.RNDIS_Device_SendPacket,"ax",@progbits
 1399               	.global	RNDIS_Device_SendPacket
 1401               	RNDIS_Device_SendPacket:
 1402               	.LFB107:
 495:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 496:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** uint8_t RNDIS_Device_SendPacket(USB_ClassInfo_RNDIS_Device_t* const RNDISInterfaceInfo,
 497:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                 void* Buffer,
 498:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c ****                                 const uint16_t PacketLength)
 499:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** {
 1403               		.loc 1 499 0
 1404               	.LVL109:
 1405 0000 AF92      		push r10
 1406               	.LCFI21:
 1407 0002 BF92      		push r11
 1408               	.LCFI22:
 1409 0004 DF92      		push r13
 1410               	.LCFI23:
 1411 0006 EF92      		push r14
 1412               	.LCFI24:
 1413 0008 FF92      		push r15
 1414               	.LCFI25:
 1415 000a 0F93      		push r16
 1416               	.LCFI26:
 1417 000c 1F93      		push r17
 1418               	.LCFI27:
 1419 000e CF93      		push r28
 1420               	.LCFI28:
 1421 0010 DF93      		push r29
 1422               	.LCFI29:
 1423 0012 CDB7      		in r28,__SP_L__
 1424 0014 DEB7      		in r29,__SP_H__
 1425               	.LCFI30:
 1426 0016 AC97      		sbiw r28,44
 1427               	.LCFI31:
 1428 0018 0FB6      		in __tmp_reg__,__SREG__
 1429 001a F894      		cli
 1430 001c DEBF      		out __SP_H__,r29
 1431 001e 0FBE      		out __SREG__,__tmp_reg__
 1432 0020 CDBF      		out __SP_L__,r28
 1433               	/* prologue: function */
 1434               	/* frame size = 44 */
 1435               	/* stack size = 53 */
 1436               	.L__stack_usage = 53
 1437 0022 FC01      		movw r30,r24
 1438 0024 5B01      		movw r10,r22
 1439 0026 7A01      		movw r14,r20
 500:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	uint8_t ErrorCode;
 501:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 502:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if ((USB_DeviceState != DEVICE_STATE_Configured) ||
 1440               		.loc 1 502 0
 1441 0028 8091 0000 		lds r24,USB_DeviceState
 1442               	.LVL110:
 1443 002c 8430      		cpi r24,lo8(4)
 1444 002e 01F0      		breq .+2
 1445 0030 00C0      		rjmp .L92
 503:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	    (RNDISInterfaceInfo->State.CurrRNDISState != RNDIS_Data_Initialized))
 1446               		.loc 1 503 0 discriminator 1
 1447 0032 DF01      		movw r26,r30
 1448 0034 AA56      		subi r26,106
 1449 0036 BF4F      		sbci r27,-1
 502:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if ((USB_DeviceState != DEVICE_STATE_Configured) ||
 1450               		.loc 1 502 0 discriminator 1
 1451 0038 8C91      		ld r24,X
 1452 003a 8230      		cpi r24,lo8(2)
 1453 003c 01F0      		breq .+2
 1454 003e 00C0      		rjmp .L92
 504:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	{
 505:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return ENDPOINT_RWSTREAM_DeviceDisconnected;
 506:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	}
 507:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 508:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_SelectEndpoint(RNDISInterfaceInfo->Config.DataINEndpointNumber);
 1455               		.loc 1 508 0
 1456 0040 8181      		ldd r24,Z+1
 1457               	.LVL111:
 1458               	.LBB113:
 1459               	.LBB114:
 330:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UENUM = EndpointNumber;
 1460               		.loc 2 330 0
 1461 0042 8093 E900 		sts 233,r24
 1462               	.LBE114:
 1463               	.LBE113:
 509:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 510:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 1464               		.loc 1 510 0
 1465 0046 0E94 0000 		call Endpoint_WaitUntilReady
 1466               	.LVL112:
 1467 004a D82E      		mov r13,r24
 1468               	.LVL113:
 1469 004c 8111      		cpse r24,__zero_reg__
 1470 004e 00C0      		rjmp .L90
 511:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	  return ErrorCode;
 512:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 513:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	RNDIS_Packet_Message_t RNDISPacketHeader;
 514:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 515:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	memset(&RNDISPacketHeader, 0, sizeof(RNDIS_Packet_Message_t));
 1471               		.loc 1 515 0
 1472 0050 FE01      		movw r30,r28
 1473 0052 3196      		adiw r30,1
 1474 0054 8CE2      		ldi r24,lo8(44)
 1475 0056 DF01      		movw r26,r30
 1476               		0:
 1477 0058 1D92      		st X+,__zero_reg__
 1478 005a 8A95      		dec r24
 1479 005c 01F4      		brne 0b
 516:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 517:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	RNDISPacketHeader.MessageType   = CPU_TO_LE32(REMOTE_NDIS_PACKET_MSG);
 1480               		.loc 1 517 0
 1481 005e 01E0      		ldi r16,lo8(1)
 1482 0060 10E0      		ldi r17,0
 1483 0062 20E0      		ldi r18,0
 1484 0064 30E0      		ldi r19,0
 1485 0066 0983      		std Y+1,r16
 1486 0068 1A83      		std Y+2,r17
 1487 006a 2B83      		std Y+3,r18
 1488 006c 3C83      		std Y+4,r19
 518:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	RNDISPacketHeader.MessageLength = cpu_to_le32(sizeof(RNDIS_Packet_Message_t) + PacketLength);
 1489               		.loc 1 518 0
 1490 006e 8701      		movw r16,r14
 1491 0070 045D      		subi r16,-44
 1492 0072 1F4F      		sbci r17,-1
 1493 0074 20E0      		ldi r18,0
 1494 0076 30E0      		ldi r19,0
 1495 0078 0D83      		std Y+5,r16
 1496 007a 1E83      		std Y+6,r17
 1497 007c 2F83      		std Y+7,r18
 1498 007e 3887      		std Y+8,r19
 519:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	RNDISPacketHeader.DataOffset    = CPU_TO_LE32(sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Messag
 1499               		.loc 1 519 0
 1500 0080 04E2      		ldi r16,lo8(36)
 1501 0082 10E0      		ldi r17,0
 1502 0084 20E0      		ldi r18,0
 1503 0086 30E0      		ldi r19,0
 1504 0088 0987      		std Y+9,r16
 1505 008a 1A87      		std Y+10,r17
 1506 008c 2B87      		std Y+11,r18
 1507 008e 3C87      		std Y+12,r19
 520:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	RNDISPacketHeader.DataLength    = cpu_to_le32(PacketLength);
 1508               		.loc 1 520 0
 1509 0090 8701      		movw r16,r14
 1510 0092 20E0      		ldi r18,0
 1511 0094 30E0      		ldi r19,0
 1512 0096 0D87      		std Y+13,r16
 1513 0098 1E87      		std Y+14,r17
 1514 009a 2F87      		std Y+15,r18
 1515 009c 388B      		std Y+16,r19
 521:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 522:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_Write_Stream_LE(&RNDISPacketHeader, sizeof(RNDIS_Packet_Message_t), NULL);
 1516               		.loc 1 522 0
 1517 009e 40E0      		ldi r20,0
 1518 00a0 50E0      		ldi r21,0
 1519 00a2 6CE2      		ldi r22,lo8(44)
 1520 00a4 70E0      		ldi r23,0
 1521 00a6 CF01      		movw r24,r30
 1522 00a8 0E94 0000 		call Endpoint_Write_Stream_LE
 1523               	.LVL114:
 523:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_Write_Stream_LE(Buffer, PacketLength, NULL);
 1524               		.loc 1 523 0
 1525 00ac 40E0      		ldi r20,0
 1526 00ae 50E0      		ldi r21,0
 1527 00b0 B701      		movw r22,r14
 1528 00b2 C501      		movw r24,r10
 1529 00b4 0E94 0000 		call Endpoint_Write_Stream_LE
 1530               	.LVL115:
 1531               	.LBB115:
 1532               	.LBB116:
 516:../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/Endpoint_AVR8.h **** 					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 1533               		.loc 2 516 0
 1534 00b8 8091 E800 		lds r24,232
 1535 00bc 8E77      		andi r24,lo8(126)
 1536 00be 8093 E800 		sts 232,r24
 1537 00c2 00C0      		rjmp .L90
 1538               	.LVL116:
 1539               	.L92:
 1540               	.LBE116:
 1541               	.LBE115:
 505:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 		return ENDPOINT_RWSTREAM_DeviceDisconnected;
 1542               		.loc 1 505 0
 1543 00c4 72E0      		ldi r23,lo8(2)
 1544 00c6 D72E      		mov r13,r23
 1545               	.LVL117:
 1546               	.L90:
 524:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	Endpoint_ClearIN();
 525:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 
 526:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** 	return ENDPOINT_RWSTREAM_NoError;
 527:../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.c **** }
 1547               		.loc 1 527 0
 1548 00c8 8D2D      		mov r24,r13
 1549               	/* epilogue start */
 1550 00ca AC96      		adiw r28,44
 1551 00cc 0FB6      		in __tmp_reg__,__SREG__
 1552 00ce F894      		cli
 1553 00d0 DEBF      		out __SP_H__,r29
 1554 00d2 0FBE      		out __SREG__,__tmp_reg__
 1555 00d4 CDBF      		out __SP_L__,r28
 1556 00d6 DF91      		pop r29
 1557 00d8 CF91      		pop r28
 1558 00da 1F91      		pop r17
 1559 00dc 0F91      		pop r16
 1560 00de FF90      		pop r15
 1561 00e0 EF90      		pop r14
 1562               	.LVL118:
 1563 00e2 DF90      		pop r13
 1564 00e4 BF90      		pop r11
 1565 00e6 AF90      		pop r10
 1566               	.LVL119:
 1567 00e8 0895      		ret
 1568               	.LFE107:
 1570               		.section	.progmem.data,"a",@progbits
 1573               	AdapterSupportedOIDList:
 1574 0000 01        		.byte	1
 1575 0001 01        		.byte	1
 1576 0002 01        		.byte	1
 1577 0003 00        		.byte	0
 1578 0004 02        		.byte	2
 1579 0005 02        		.byte	2
 1580 0006 01        		.byte	1
 1581 0007 00        		.byte	0
 1582 0008 02        		.byte	2
 1583 0009 01        		.byte	1
 1584 000a 01        		.byte	1
 1585 000b 00        		.byte	0
 1586 000c 03        		.byte	3
 1587 000d 01        		.byte	1
 1588 000e 01        		.byte	1
 1589 000f 00        		.byte	0
 1590 0010 04        		.byte	4
 1591 0011 01        		.byte	1
 1592 0012 01        		.byte	1
 1593 0013 00        		.byte	0
 1594 0014 06        		.byte	6
 1595 0015 01        		.byte	1
 1596 0016 01        		.byte	1
 1597 0017 00        		.byte	0
 1598 0018 11        		.byte	17
 1599 0019 01        		.byte	1
 1600 001a 01        		.byte	1
 1601 001b 00        		.byte	0
 1602 001c 07        		.byte	7
 1603 001d 01        		.byte	1
 1604 001e 01        		.byte	1
 1605 001f 00        		.byte	0
 1606 0020 0A        		.byte	10
 1607 0021 01        		.byte	1
 1608 0022 01        		.byte	1
 1609 0023 00        		.byte	0
 1610 0024 0B        		.byte	11
 1611 0025 01        		.byte	1
 1612 0026 01        		.byte	1
 1613 0027 00        		.byte	0
 1614 0028 0C        		.byte	12
 1615 0029 01        		.byte	1
 1616 002a 01        		.byte	1
 1617 002b 00        		.byte	0
 1618 002c 0D        		.byte	13
 1619 002d 01        		.byte	1
 1620 002e 01        		.byte	1
 1621 002f 00        		.byte	0
 1622 0030 0E        		.byte	14
 1623 0031 01        		.byte	1
 1624 0032 01        		.byte	1
 1625 0033 00        		.byte	0
 1626 0034 11        		.byte	17
 1627 0035 01        		.byte	1
 1628 0036 01        		.byte	1
 1629 0037 00        		.byte	0
 1630 0038 14        		.byte	20
 1631 0039 01        		.byte	1
 1632 003a 01        		.byte	1
 1633 003b 00        		.byte	0
 1634 003c 01        		.byte	1
 1635 003d 01        		.byte	1
 1636 003e 02        		.byte	2
 1637 003f 00        		.byte	0
 1638 0040 02        		.byte	2
 1639 0041 01        		.byte	1
 1640 0042 02        		.byte	2
 1641 0043 00        		.byte	0
 1642 0044 03        		.byte	3
 1643 0045 01        		.byte	1
 1644 0046 02        		.byte	2
 1645 0047 00        		.byte	0
 1646 0048 04        		.byte	4
 1647 0049 01        		.byte	1
 1648 004a 02        		.byte	2
 1649 004b 00        		.byte	0
 1650 004c 05        		.byte	5
 1651 004d 01        		.byte	1
 1652 004e 02        		.byte	2
 1653 004f 00        		.byte	0
 1654 0050 01        		.byte	1
 1655 0051 01        		.byte	1
 1656 0052 01        		.byte	1
 1657 0053 01        		.byte	1
 1658 0054 02        		.byte	2
 1659 0055 01        		.byte	1
 1660 0056 01        		.byte	1
 1661 0057 01        		.byte	1
 1662 0058 03        		.byte	3
 1663 0059 01        		.byte	1
 1664 005a 01        		.byte	1
 1665 005b 01        		.byte	1
 1666 005c 04        		.byte	4
 1667 005d 01        		.byte	1
 1668 005e 01        		.byte	1
 1669 005f 01        		.byte	1
 1670 0060 01        		.byte	1
 1671 0061 01        		.byte	1
 1672 0062 02        		.byte	2
 1673 0063 01        		.byte	1
 1674 0064 02        		.byte	2
 1675 0065 01        		.byte	1
 1676 0066 02        		.byte	2
 1677 0067 01        		.byte	1
 1678 0068 03        		.byte	3
 1679 0069 01        		.byte	1
 1680 006a 02        		.byte	2
 1681 006b 01        		.byte	1
 1928               	.Letext0:
 1929               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 1930               		.file 4 "/usr/lib/gcc/avr/4.7.0/include/stddef.h"
 1931               		.file 5 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../Device.h"
 1932               		.file 6 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../StdRequestType.h"
 1933               		.file 7 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../EndpointStream.h"
 1934               		.file 8 "../LUFA/Drivers/USB/Class/Device/../Common/RNDISClassCommon.h"
 1935               		.file 9 "../LUFA/Drivers/USB/Class/Device/RNDISClassDevice.h"
 1936               		.file 10 "../LUFA/Drivers/USB/Class/Device/../../Core/USBTask.h"
 1937               		.file 11 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/pgmspace.h"
 1938               		.file 12 "../LUFA/Drivers/USB/Class/Device/../../Core/AVR8/../AVR8/EndpointStream_AVR8.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 RNDISClassDevice.c
     /tmp/cc0iIPRa.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc0iIPRa.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc0iIPRa.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc0iIPRa.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc0iIPRa.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc0iIPRa.s:12     .text.RNDIS_Device_ProcessControlRequest:0000000000000000 RNDIS_Device_ProcessControlRequest
     /tmp/cc0iIPRa.s:1573   .progmem.data:0000000000000000 AdapterSupportedOIDList
     /tmp/cc0iIPRa.s:889    .text.RNDIS_Device_ConfigureEndpoints:0000000000000000 RNDIS_Device_ConfigureEndpoints
     /tmp/cc0iIPRa.s:1080   .text.RNDIS_Device_USBTask:0000000000000000 RNDIS_Device_USBTask
     /tmp/cc0iIPRa.s:1192   .text.RNDIS_Device_IsPacketReceived:0000000000000000 RNDIS_Device_IsPacketReceived
     /tmp/cc0iIPRa.s:1246   .text.RNDIS_Device_ReadPacket:0000000000000000 RNDIS_Device_ReadPacket
     /tmp/cc0iIPRa.s:1401   .text.RNDIS_Device_SendPacket:0000000000000000 RNDIS_Device_SendPacket

UNDEFINED SYMBOLS
USB_ControlRequest
Endpoint_Read_Control_Stream_LE
memcpy_P
memcpy
Endpoint_Write_Control_Stream_LE
Endpoint_ConfigureEndpoint_Prv
USB_DeviceState
Endpoint_Write_Stream_LE
Endpoint_Read_Stream_LE
Endpoint_WaitUntilReady
__do_copy_data
